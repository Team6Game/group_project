1508348469
3 2
13 libp3dcparser 4 zIbG 14 panda3d.direct 
233
246 18 ~DCPackerInterface 0 6 481 37 DCPackerInterface::~DCPackerInterface 0 0 10
/**
 *
 */
52
virtual DCPackerInterface::~DCPackerInterface(void);

247 8 get_name 0 4 481 27 DCPackerInterface::get_name 0 1 1 83
/**
 * Returns the name of this field, or empty string if the field is unnamed.
 */
66
inline std::string const &DCPackerInterface::get_name(void) const;

248 15 find_seek_index 0 4 481 34 DCPackerInterface::find_seek_index 0 1 2 491
/**
 * Returns the index number to be passed to a future call to DCPacker::seek()
 * to seek directly to the named field without having to look up the field
 * name in a table later, or -1 if the named field cannot be found.
 *
 * If the named field is nested within a switch or some similar dynamic
 * structure that reveals different fields based on the contents of the data,
 * this mechanism cannot be used to pre-fetch the field index number--you must
 * seek for the field by name.
 */
70
int DCPackerInterface::find_seek_index(std::string const &name) const;

249 8 as_field 0 6 481 27 DCPackerInterface::as_field 0 2 3 4 22
/**
 *
 */

/**
 *
 */
115
virtual DCField *DCPackerInterface::as_field(void);
virtual DCField const *DCPackerInterface::as_field(void) const;

250 19 as_switch_parameter 0 6 481 38 DCPackerInterface::as_switch_parameter 0 2 5 6 22
/**
 *
 */

/**
 *
 */
157
virtual DCSwitchParameter *DCPackerInterface::as_switch_parameter(void);
virtual DCSwitchParameter const *DCPackerInterface::as_switch_parameter(void) const;

251 18 as_class_parameter 0 6 481 37 DCPackerInterface::as_class_parameter 0 2 7 8 22
/**
 *
 */

/**
 *
 */
153
virtual DCClassParameter *DCPackerInterface::as_class_parameter(void);
virtual DCClassParameter const *DCPackerInterface::as_class_parameter(void) const;

252 11 check_match 0 4 481 30 DCPackerInterface::check_match 0 2 9 10 553
/**
 * Returns true if the other interface is bitwise the same as this one--that
 * is, a uint32 only matches a uint32, etc.  Names of components, and range
 * limits, are not compared.
 */

/**
 * Returns true if this interface is bitwise the same as the interface
 * described with the indicated formatted string, e.g.  "(uint8, uint8,
 * int16)", or false otherwise.
 *
 * If DCFile is not NULL, it specifies the DCFile that was previously loaded,
 * from which some predefined structs and typedefs may be referenced in the
 * description string.
 */
179
inline bool DCPackerInterface::check_match(DCPackerInterface const *other) const;
bool DCPackerInterface::check_match(std::string const &description, DCFile *dcfile = NULL) const;

253 14 ~DCKeywordList 0 4 482 29 DCKeywordList::~DCKeywordList 0 0 10
/**
 *
 */
36
DCKeywordList::~DCKeywordList(void);

254 11 has_keyword 0 4 482 26 DCKeywordList::has_keyword 0 2 11 12 172
/**
 * Returns true if this list includes the indicated keyword, false otherwise.
 */

/**
 * Returns true if this list includes the indicated keyword, false otherwise.
 */
128
bool DCKeywordList::has_keyword(std::string const &name) const;
bool DCKeywordList::has_keyword(DCKeyword const *keyword) const;

255 16 get_num_keywords 0 4 482 31 DCKeywordList::get_num_keywords 0 1 13 54
/**
 * Returns the number of keywords in the list.
 */
48
int DCKeywordList::get_num_keywords(void) const;

256 11 get_keyword 0 4 482 26 DCKeywordList::get_keyword 0 1 14 47
/**
 * Returns the nth keyword in the list.
 */
57
DCKeyword const *DCKeywordList::get_keyword(int n) const;

257 19 get_keyword_by_name 0 4 482 34 DCKeywordList::get_keyword_by_name 0 1 15 129
/**
 * Returns the keyword in the list with the indicated name, or NULL if there
 * is no keyword in the list with that name.
 */
83
DCKeyword const *DCKeywordList::get_keyword_by_name(std::string const &name) const;

258 16 compare_keywords 0 4 482 31 DCKeywordList::compare_keywords 0 1 16 147
/**
 * Returns true if this list has the same keywords as the other list, false if
 * some keywords differ.  Order is not considered important.
 */
71
bool DCKeywordList::compare_keywords(DCKeywordList const &other) const;

259 27 upcast_to_DCPackerInterface 0 12 483 36 DCField::upcast_to_DCPackerInterface 0 1 50 40
upcast from DCField to DCPackerInterface
62
DCPackerInterface *DCField::upcast_to_DCPackerInterface(void);

260 19 downcast_to_DCField 0 12 481 38 DCPackerInterface::downcast_to_DCField 0 1 51 42
downcast from DCPackerInterface to DCField
54
DCField *DCPackerInterface::downcast_to_DCField(void);

261 23 upcast_to_DCKeywordList 0 12 483 32 DCField::upcast_to_DCKeywordList 0 1 52 36
upcast from DCField to DCKeywordList
54
DCKeywordList *DCField::upcast_to_DCKeywordList(void);

262 19 downcast_to_DCField 0 12 482 34 DCKeywordList::downcast_to_DCField 0 1 53 38
downcast from DCKeywordList to DCField
50
DCField *DCKeywordList::downcast_to_DCField(void);

263 8 ~DCField 0 6 483 17 DCField::~DCField 0 0 10
/**
 *
 */
32
virtual DCField::~DCField(void);

264 10 get_number 0 4 483 19 DCField::get_number 0 1 17 130
/**
 * Returns a unique index number associated with this field.  This is defined
 * implicitly when the .dc file(s) are read.
 */
43
inline int DCField::get_number(void) const;

265 9 get_class 0 4 483 18 DCField::get_class 0 1 18 78
/**
 * Returns the DCClass pointer for the class that contains this field.
 */
47
inline DCClass *DCField::get_class(void) const;

266 8 as_field 0 6 483 17 DCField::as_field 0 2 19 20 22
/**
 *
 */

/**
 *
 */
95
virtual DCField *DCField::as_field(void);
virtual DCField const *DCField::as_field(void) const;

267 15 as_atomic_field 0 6 483 24 DCField::as_atomic_field 0 2 21 22 288
/**
 * Returns the same field pointer converted to an atomic field pointer, if
 * this is in fact an atomic field; otherwise, returns NULL.
 */

/**
 * Returns the same field pointer converted to an atomic field pointer, if
 * this is in fact an atomic field; otherwise, returns NULL.
 */
121
virtual DCAtomicField *DCField::as_atomic_field(void);
virtual DCAtomicField const *DCField::as_atomic_field(void) const;

268 18 as_molecular_field 0 6 483 27 DCField::as_molecular_field 0 2 23 24 296
/**
 * Returns the same field pointer converted to a molecular field pointer, if
 * this is in fact a molecular field; otherwise, returns NULL.
 */

/**
 * Returns the same field pointer converted to a molecular field pointer, if
 * this is in fact a molecular field; otherwise, returns NULL.
 */
133
virtual DCMolecularField *DCField::as_molecular_field(void);
virtual DCMolecularField const *DCField::as_molecular_field(void) const;

269 12 as_parameter 0 6 483 21 DCField::as_parameter 0 2 25 26 22
/**
 *
 */

/**
 *
 */
111
virtual DCParameter *DCField::as_parameter(void);
virtual DCParameter const *DCField::as_parameter(void) const;

270 11 format_data 0 4 483 20 DCField::format_data 0 1 27 175
/**
 * Given a blob that represents the packed data for this field, returns a
 * string formatting it for human consumption.  Returns empty string if there
 * is an error.
 */
95
std::string DCField::format_data(std::string const &packed_data, bool show_field_names = true);

271 12 parse_string 0 4 483 21 DCField::parse_string 0 1 28 243
/**
 * Given a human-formatted string (for instance, as returned by format_data(),
 * above) that represents the value of this field, parse the string and return
 * the corresponding packed data.  Returns empty string if there is an error.
 */
71
std::string DCField::parse_string(std::string const &formatted_string);

272 15 validate_ranges 0 4 483 24 DCField::validate_ranges 0 1 29 221
/**
 * Verifies that all of the packed values in the field data are within the
 * specified ranges and that there are no extra bytes on the end of the
 * record.  Returns true if all fields are valid, false otherwise.
 */
68
bool DCField::validate_ranges(std::string const &packed_data) const;

273 17 has_default_value 0 4 483 26 DCField::has_default_value 0 1 30 110
/**
 * Returns true if a default value has been explicitly established for this
 * field, false otherwise.
 */
51
inline bool DCField::has_default_value(void) const;

274 17 get_default_value 0 4 483 26 DCField::get_default_value 0 1 31 218
/**
 * Returns the default value for this field.  If a default value has been
 * explicitly set (e.g.  has_default_value() returns true), returns that
 * value; otherwise, returns an implicit default for the field.
 */
65
inline std::string const &DCField::get_default_value(void) const;

275 14 is_bogus_field 0 4 483 23 DCField::is_bogus_field 0 1 32 251
/**
 * Returns true if the field has been flagged as a bogus field.  This is set
 * for fields that are generated by the parser as placeholder for missing
 * fields, as when reading a partial file; it should not occur in a normal
 * valid dc file.
 */
48
inline bool DCField::is_bogus_field(void) const;

276 11 is_required 0 4 483 20 DCField::is_required 0 1 33 86
/**
 * Returns true if the "required" flag is set for this field, false otherwise.
 */
45
inline bool DCField::is_required(void) const;

277 12 is_broadcast 0 4 483 21 DCField::is_broadcast 0 1 34 90
/**
 * Returns true if the "broadcast" flag is set for this field, false
 * otherwise.
 */
46
inline bool DCField::is_broadcast(void) const;

278 6 is_ram 0 4 483 15 DCField::is_ram 0 1 35 81
/**
 * Returns true if the "ram" flag is set for this field, false otherwise.
 */
40
inline bool DCField::is_ram(void) const;

279 5 is_db 0 4 483 14 DCField::is_db 0 1 36 80
/**
 * Returns true if the "db" flag is set for this field, false otherwise.
 */
39
inline bool DCField::is_db(void) const;

280 9 is_clsend 0 4 483 18 DCField::is_clsend 0 1 37 84
/**
 * Returns true if the "clsend" flag is set for this field, false otherwise.
 */
43
inline bool DCField::is_clsend(void) const;

281 9 is_clrecv 0 4 483 18 DCField::is_clrecv 0 1 38 84
/**
 * Returns true if the "clrecv" flag is set for this field, false otherwise.
 */
43
inline bool DCField::is_clrecv(void) const;

282 10 is_ownsend 0 4 483 19 DCField::is_ownsend 0 1 39 85
/**
 * Returns true if the "ownsend" flag is set for this field, false otherwise.
 */
44
inline bool DCField::is_ownsend(void) const;

283 10 is_ownrecv 0 4 483 19 DCField::is_ownrecv 0 1 40 85
/**
 * Returns true if the "ownrecv" flag is set for this field, false otherwise.
 */
44
inline bool DCField::is_ownrecv(void) const;

284 9 is_airecv 0 4 483 18 DCField::is_airecv 0 1 41 84
/**
 * Returns true if the "airecv" flag is set for this field, false otherwise.
 */
43
inline bool DCField::is_airecv(void) const;

285 6 output 0 4 483 15 DCField::output 0 1 42 67
/**
 * Write a string representation of this instance to <out>.
 */
48
inline void DCField::output(ostream &out) const;

286 5 write 0 4 483 14 DCField::write 0 1 43 67
/**
 * Write a string representation of this instance to <out>.
 */
65
inline void DCField::write(ostream &out, int indent_level) const;

287 9 pack_args 0 4 483 18 DCField::pack_args 0 1 44 200
/**
 * Packs the Python arguments from the indicated tuple into the packer.
 * Returns true on success, false on failure.
 *
 * It is assumed that the packer is currently positioned on this field.
 */
68
bool DCField::pack_args(DCPacker &packer, PyObject *sequence) const;

288 11 unpack_args 0 4 483 20 DCField::unpack_args 0 1 45 220
/**
 * Unpacks the values from the packer, beginning at the current point in the
 * unpack_buffer, into a Python tuple and returns the tuple.
 *
 * It is assumed that the packer is currently positioned on this field.
 */
55
PyObject *DCField::unpack_args(DCPacker &packer) const;

289 14 receive_update 0 4 483 23 DCField::receive_update 0 1 46 135
/**
 * Extracts the update message out of the datagram and applies it to the
 * indicated object by calling the appropriate method.
 */
72
void DCField::receive_update(DCPacker &packer, PyObject *distobj) const;

290 20 client_format_update 0 4 483 29 DCField::client_format_update 0 1 47 139
/**
 * Generates a datagram containing the message necessary to send an update for
 * the indicated distributed object from the client.
 */
78
Datagram DCField::client_format_update(DOID_TYPE do_id, PyObject *args) const;

291 16 ai_format_update 0 4 483 25 DCField::ai_format_update 0 1 48 135
/**
 * Generates a datagram containing the message necessary to send an update for
 * the indicated distributed object from the AI.
 */
116
Datagram DCField::ai_format_update(DOID_TYPE do_id, CHANNEL_TYPE to_id, CHANNEL_TYPE from_id, PyObject *args) const;

292 25 ai_format_update_msg_type 0 4 483 34 DCField::ai_format_update_msg_type 0 1 49 155
/**
 * Generates a datagram containing the message necessary to send an update,
 * with the msg type, for the indicated distributed object from the AI.
 */
139
Datagram DCField::ai_format_update_msg_type(DOID_TYPE do_id, CHANNEL_TYPE to_id, CHANNEL_TYPE from_id, int msg_type, PyObject *args) const;

293 10 DCPackData 0 4 484 22 DCPackData::DCPackData 0 2 54 55 10
/**
 *
 */
97
inline DCPackData::DCPackData(void);
inline DCPackData::DCPackData(DCPackData const &) = default;

294 11 ~DCPackData 0 4 484 23 DCPackData::~DCPackData 0 0 10
/**
 *
 */
37
inline DCPackData::~DCPackData(void);

295 5 clear 0 4 484 17 DCPackData::clear 0 1 56 98
/**
 * Empties the contents of the data (without necessarily freeing its allocated
 * memory).
 */
36
inline void DCPackData::clear(void);

296 10 get_string 0 4 484 22 DCPackData::get_string 0 1 57 69
/**
 * Returns the data buffer as a string.  Also see get_data().
 */
54
inline std::string DCPackData::get_string(void) const;

297 10 get_length 0 4 484 22 DCPackData::get_length 0 1 58 151
/**
 * Returns the current length of the buffer.  This is the number of useful
 * bytes stored in the buffer, not the amount of memory it takes up.
 */
54
inline std::size_t DCPackData::get_length(void) const;

298 8 DCPacker 0 4 485 18 DCPacker::DCPacker 0 2 59 60 10
/**
 *
 */
80
DCPacker::DCPacker(void);
inline DCPacker::DCPacker(DCPacker const &) = default;

299 9 ~DCPacker 0 4 485 19 DCPacker::~DCPacker 0 0 10
/**
 *
 */
26
DCPacker::~DCPacker(void);

300 10 clear_data 0 4 485 20 DCPacker::clear_data 0 1 61 190
/**
 * Empties the data in the pack buffer and unpack buffer.  This should be
 * called between calls to begin_pack(), unless you want to concatenate all of
 * the pack results together.
 */
39
inline void DCPacker::clear_data(void);

301 10 begin_pack 0 4 485 20 DCPacker::begin_pack 0 1 62 390
/**
 * Begins a packing session.  The parameter is the DC object that describes
 * the packing format; it may be a DCParameter or DCField.
 *
 * Unless you call clear_data() between sessions, multiple packing sessions
 * will be concatenated together into the same buffer.  If you wish to add
 * bytes to the buffer between packing sessions, use append_data() or
 * get_write_pointer().
 */
57
void DCPacker::begin_pack(DCPackerInterface const *root);

302 8 end_pack 0 4 485 18 DCPacker::end_pack 0 1 63 138
/**
 * Finishes a packing session.
 *
 * The return value is true on success, or false if there has been some error
 * during packing.
 */
30
bool DCPacker::end_pack(void);

303 15 set_unpack_data 0 4 485 25 DCPacker::set_unpack_data 0 1 64 284
/**
 * Sets up the unpack_data pointer.  You may call this before calling the
 * version of begin_unpack() that takes only one parameter.
 */

/**
 * Sets up the unpack_data pointer.  You may call this before calling the
 * version of begin_unpack() that takes only one parameter.
 */
56
void DCPacker::set_unpack_data(std::string const &data);

304 12 begin_unpack 0 4 485 22 DCPacker::begin_unpack 0 1 65 375
/**
 * Begins an unpacking session.  You must have previously called
 * set_unpack_data() to specify a buffer to unpack.
 *
 * If there was data left in the buffer after a previous begin_unpack() ..
 * end_unpack() session, the new session will resume from the current point.
 * This method may be used, therefore, to unpack a sequence of objects from
 * the same buffer.
 */
59
void DCPacker::begin_unpack(DCPackerInterface const *root);

305 10 end_unpack 0 4 485 20 DCPacker::end_unpack 0 1 66 186
/**
 * Finishes the unpacking session.
 *
 * The return value is true on success, or false if there has been some error
 * during unpacking (or if all fields have not been unpacked).
 */
32
bool DCPacker::end_unpack(void);

306 12 begin_repack 0 4 485 22 DCPacker::begin_repack 0 1 67 562
/**
 * Begins a repacking session.  You must have previously called
 * set_unpack_data() to specify a buffer to unpack.
 *
 * Unlike begin_pack() or begin_unpack() you may not concatenate the results
 * of multiple begin_repack() sessions in one buffer.
 *
 * Also, unlike in packing or unpacking modes, you may not walk through the
 * fields from beginning to end, or even pack two consecutive fields at once.
 * Instead, you must call seek() for each field you wish to modify and pack
 * only that one field; then call seek() again to modify another field.
 */
59
void DCPacker::begin_repack(DCPackerInterface const *root);

307 10 end_repack 0 4 485 20 DCPacker::end_repack 0 1 68 186
/**
 * Finishes the repacking session.
 *
 * The return value is true on success, or false if there has been some error
 * during repacking (or if all fields have not been repacked).
 */
32
bool DCPacker::end_repack(void);

308 4 seek 0 4 485 14 DCPacker::seek 0 2 69 70 709
/**
 * Sets the current unpack (or repack) position to the named field.  In unpack
 * mode, the next call to unpack_*() or push() will begin to read the named
 * field.  In repack mode, the next call to pack_*() or push() will modify the
 * named field.
 *
 * Returns true if successful, false if the field is not known (or if the
 * packer is in an invalid mode).
 */

/**
 * Seeks to the field indentified by seek_index, which was returned by an
 * earlier call to DCField::find_seek_index() to get the index of some nested
 * field.  Also see the version of seek() that accepts a field name.
 *
 * Returns true if successful, false if the field is not known (or if the
 * packer is in an invalid mode).
 */
88
bool DCPacker::seek(std::string const &field_name);
bool DCPacker::seek(int seek_index);

309 17 has_nested_fields 0 4 485 27 DCPacker::has_nested_fields 0 1 71 254
/**
 * Returns true if the current field has any nested fields (and thus expects a
 * push() .. pop() interface), or false otherwise.  If this returns true,
 * get_num_nested_fields() may be called to determine how many nested fields
 * are expected.
 */
52
inline bool DCPacker::has_nested_fields(void) const;

310 21 get_num_nested_fields 0 4 485 31 DCPacker::get_num_nested_fields 0 1 72 517
/**
 * Returns the number of nested fields associated with the current field, if
 * has_nested_fields() returned true.
 *
 * The return value may be -1 to indicate that a variable number of nested
 * fields are accepted by this field type (e.g.  a variable-length array).
 *
 * Note that this method is unreliable to determine how many fields you must
 * traverse before you can call pop(), since particularly in the presence of a
 * DCSwitch, it may change during traversal.  Use more_nested_fields()
 * instead.
 */
55
inline int DCPacker::get_num_nested_fields(void) const;

311 18 more_nested_fields 0 4 485 28 DCPacker::more_nested_fields 0 1 73 141
/**
 * Returns true if there are more nested fields to pack or unpack in the
 * current push sequence, false if it is time to call pop().
 */
53
inline bool DCPacker::more_nested_fields(void) const;

312 18 get_current_parent 0 4 485 28 DCPacker::get_current_parent 0 1 74 175
/**
 * Returns the field that we left in our last call to push(): the owner of the
 * current level of fields.  This may be NULL at the beginning of the pack
 * operation.
 */
73
inline DCPackerInterface const *DCPacker::get_current_parent(void) const;

313 17 get_current_field 0 4 485 27 DCPacker::get_current_field 0 1 75 197
/**
 * Returns the field that will be referenced by the next call to pack_*() or
 * unpack_*().  This will be NULL if we have unpacked (or packed) all fields,
 * or if it is time to call pop().
 */
72
inline DCPackerInterface const *DCPacker::get_current_field(void) const;

314 15 get_last_switch 0 4 485 25 DCPacker::get_last_switch 0 1 76 428
/**
 * Returns a pointer to the last DCSwitch instance that we have passed by and
 * selected one case of during the pack/unpack process.  Each time we
 * encounter a new DCSwitch and select a case, this will change state.
 *
 * This may be used to detect when a DCSwitch has been selected.  At the
 * moment this changes state, get_current_parent() will contain the particular
 * SwitchCase that was selected by the switch.
 */
70
inline DCSwitchParameter const *DCPacker::get_last_switch(void) const;

315 13 get_pack_type 0 4 485 23 DCPacker::get_pack_type 0 1 77 438
/**
 * Returns the type of value expected by the current field.  See the
 * enumerated type definition at the top of DCPackerInterface.h.  If this
 * returns one of PT_double, PT_int, PT_int64, or PT_string, then you should
 * call the corresponding pack_double(), pack_int() function (or
 * unpack_double(), unpack_int(), etc.) to transfer data.  Otherwise, you
 * should call push() and begin packing or unpacking the nested fields.
 */
54
inline DCPackType DCPacker::get_pack_type(void) const;

316 22 get_current_field_name 0 4 485 32 DCPacker::get_current_field_name 0 1 78 154
/**
 * Returns the name of the current field, if it has a name, or the empty
 * string if the field does not have a name or there is no current field.
 */
64
inline std::string DCPacker::get_current_field_name(void) const;

317 4 push 0 4 485 14 DCPacker::push 0 1 79 315
/**
 * Marks the beginning of a nested series of fields.
 *
 * This must be called before filling the elements of an array or the
 * individual fields in a structure field.  It must also be balanced by a
 * matching pop().
 *
 * It is necessary to use push() / pop() only if has_nested_fields() returns
 * true.
 */
26
void DCPacker::push(void);

318 3 pop 0 4 485 13 DCPacker::pop 0 1 80 234
/**
 * Marks the end of a nested series of fields.
 *
 * This must be called to match a previous push() only after all the expected
 * number of nested fields have been packed.  It is an error to call it too
 * early, or too late.
 */
25
void DCPacker::pop(void);

319 11 pack_double 0 4 485 21 DCPacker::pack_double 0 1 81 71
/**
 * Packs the indicated numeric or string value into the stream.
 */
48
inline void DCPacker::pack_double(double value);

320 8 pack_int 0 4 485 18 DCPacker::pack_int 0 1 82 71
/**
 * Packs the indicated numeric or string value into the stream.
 */
42
inline void DCPacker::pack_int(int value);

321 9 pack_uint 0 4 485 19 DCPacker::pack_uint 0 1 83 71
/**
 * Packs the indicated numeric or string value into the stream.
 */
52
inline void DCPacker::pack_uint(unsigned int value);

322 10 pack_int64 0 4 485 20 DCPacker::pack_int64 0 1 84 71
/**
 * Packs the indicated numeric or string value into the stream.
 */
48
inline void DCPacker::pack_int64(int64_t value);

323 11 pack_uint64 0 4 485 21 DCPacker::pack_uint64 0 1 85 71
/**
 * Packs the indicated numeric or string value into the stream.
 */
50
inline void DCPacker::pack_uint64(uint64_t value);

324 11 pack_string 0 4 485 21 DCPacker::pack_string 0 1 86 71
/**
 * Packs the indicated numeric or string value into the stream.
 */
60
inline void DCPacker::pack_string(std::string const &value);

325 18 pack_literal_value 0 4 485 28 DCPacker::pack_literal_value 0 1 87 155
/**
 * Adds the indicated string value into the stream, representing a single pre-
 * packed field element, or a whole group of field elements at once.
 */
67
inline void DCPacker::pack_literal_value(std::string const &value);

326 18 pack_default_value 0 4 485 28 DCPacker::pack_default_value 0 1 88 158
/**
 * Adds the default value for the current element into the stream.  If no
 * default has been set for the current element, creates a sensible default.
 */
40
void DCPacker::pack_default_value(void);

327 13 unpack_double 0 4 485 23 DCPacker::unpack_double 0 1 89 144
/**
 * Unpacks the current numeric or string value from the stream.
 */

/**
 * Unpacks the current numeric or string value from the stream.
 */
44
inline double DCPacker::unpack_double(void);

328 10 unpack_int 0 4 485 20 DCPacker::unpack_int 0 1 90 144
/**
 * Unpacks the current numeric or string value from the stream.
 */

/**
 * Unpacks the current numeric or string value from the stream.
 */
38
inline int DCPacker::unpack_int(void);

329 11 unpack_uint 0 4 485 21 DCPacker::unpack_uint 0 1 91 144
/**
 * Unpacks the current numeric or string value from the stream.
 */

/**
 * Unpacks the current numeric or string value from the stream.
 */
48
inline unsigned int DCPacker::unpack_uint(void);

330 12 unpack_int64 0 4 485 22 DCPacker::unpack_int64 0 1 92 144
/**
 * Unpacks the current numeric or string value from the stream.
 */

/**
 * Unpacks the current numeric or string value from the stream.
 */
44
inline int64_t DCPacker::unpack_int64(void);

331 13 unpack_uint64 0 4 485 23 DCPacker::unpack_uint64 0 1 93 144
/**
 * Unpacks the current numeric or string value from the stream.
 */

/**
 * Unpacks the current numeric or string value from the stream.
 */
46
inline uint64_t DCPacker::unpack_uint64(void);

332 13 unpack_string 0 4 485 23 DCPacker::unpack_string 0 1 94 144
/**
 * Unpacks the current numeric or string value from the stream.
 */

/**
 * Unpacks the current numeric or string value from the stream.
 */
49
inline std::string DCPacker::unpack_string(void);

333 20 unpack_literal_value 0 4 485 30 DCPacker::unpack_literal_value 0 1 95 256
/**
 * Returns the literal string that represents the packed value of the current
 * field, and advances the field pointer.
 */

/**
 * Returns the literal string that represents the packed value of the current
 * field, and advances the field pointer.
 */
56
inline std::string DCPacker::unpack_literal_value(void);

334 15 unpack_validate 0 4 485 25 DCPacker::unpack_validate 0 1 96 219
/**
 * Internally unpacks the current numeric or string value and validates it
 * against the type range limits, but does not return the value.  If the
 * current field contains nested fields, validates all of them.
 */
37
void DCPacker::unpack_validate(void);

335 11 unpack_skip 0 4 485 21 DCPacker::unpack_skip 0 1 97 155
/**
 * Skips the current field without unpacking it and advances to the next
 * field.  If the current field contains nested fields, skips all of them.
 */
33
void DCPacker::unpack_skip(void);

336 11 pack_object 0 4 485 21 DCPacker::pack_object 0 1 98 259
/**
 * Packs the Python object of whatever type into the packer.  Each numeric
 * object and string object maps to the corresponding pack_value() call; a
 * tuple or sequence maps to a push() followed by all of the tuple's contents
 * followed by a pop().
 */
45
void DCPacker::pack_object(PyObject *object);

337 13 unpack_object 0 4 485 23 DCPacker::unpack_object 0 1 99 238
/**
 * Unpacks a Python object of the appropriate type from the stream for the
 * current field.  This may be an integer or a string for a simple field
 * object; if the current field represents a list of fields it will be a
 * tuple.
 */
40
PyObject *DCPacker::unpack_object(void);

338 14 parse_and_pack 0 4 485 24 DCPacker::parse_and_pack 0 2 100 101 344
/**
 * Parses an object's value according to the DC file syntax (e.g.  as a
 * default value string) and packs it.  Returns true on success, false on a
 * parse error.
 */

/**
 * Parses an object's value according to the DC file syntax (e.g.  as a
 * default value string) and packs it.  Returns true on success, false on a
 * parse error.
 */
111
bool DCPacker::parse_and_pack(std::string const &formatted_object);
bool DCPacker::parse_and_pack(istream &in);

339 17 unpack_and_format 0 4 485 27 DCPacker::unpack_and_format 0 2 102 103 328
/**
 * Unpacks an object and formats its value into a syntax suitable for parsing
 * in the dc file (e.g.  as a default value), or as an input to parse_object.
 */

/**
 * Unpacks an object and formats its value into a syntax suitable for parsing
 * in the dc file (e.g.  as a default value), or as an input to parse_object.
 */
148
std::string DCPacker::unpack_and_format(bool show_field_names = true);
void DCPacker::unpack_and_format(ostream &out, bool show_field_names = true);

340 15 had_parse_error 0 4 485 25 DCPacker::had_parse_error 0 1 104 149
/**
 * Returns true if there has been an parse error since the most recent call to
 * begin(); this can only happen if you call parse_and_pack().
 */
50
inline bool DCPacker::had_parse_error(void) const;

341 14 had_pack_error 0 4 485 24 DCPacker::had_pack_error 0 1 105 471
/**
 * Returns true if there has been an packing error since the most recent call
 * to begin(); in particular, this may be called after end() has returned
 * false to determine the nature of the failure.
 *
 * A return value of true indicates there was a push/pop mismatch, or the
 * push/pop structure did not match the data structure, or there were the
 * wrong number of elements in a nested push/pop structure, or on unpack that
 * the data stream was truncated.
 */
49
inline bool DCPacker::had_pack_error(void) const;

342 15 had_range_error 0 4 485 25 DCPacker::had_range_error 0 1 106 400
/**
 * Returns true if there has been an range validation error since the most
 * recent call to begin(); in particular, this may be called after end() has
 * returned false to determine the nature of the failure.
 *
 * A return value of true indicates a value that was packed or unpacked did
 * not fit within the specified legal range for a parameter, or within the
 * limits of the field size.
 */
50
inline bool DCPacker::had_range_error(void) const;

343 9 had_error 0 4 485 19 DCPacker::had_error 0 1 107 222
/**
 * Returns true if there has been any error (either a pack error or a range
 * error) since the most recent call to begin().  If this returns true, then
 * the matching call to end() will indicate an error (false).
 */
44
inline bool DCPacker::had_error(void) const;

344 22 get_num_unpacked_bytes 0 4 485 32 DCPacker::get_num_unpacked_bytes 0 1 108 290
/**
 * Returns the number of bytes that have been unpacked so far, or after
 * unpack_end(), the total number of bytes that were unpacked at all.  This
 * can be used to validate that all of the bytes in the buffer were actually
 * unpacked (which is not otherwise considered an error).
 */
64
inline std::size_t DCPacker::get_num_unpacked_bytes(void) const;

345 10 get_length 0 4 485 20 DCPacker::get_length 0 1 109 151
/**
 * Returns the current length of the buffer.  This is the number of useful
 * bytes stored in the buffer, not the amount of memory it takes up.
 */
52
inline std::size_t DCPacker::get_length(void) const;

346 10 get_string 0 4 485 20 DCPacker::get_string 0 1 110 160
/**
 * Returns the packed data buffer as a string.  Also see get_data().
 */

/**
 * Copies the packed data into the indicated string.  Also see get_data().
 */
52
inline std::string DCPacker::get_string(void) const;

347 17 get_unpack_length 0 4 485 27 DCPacker::get_unpack_length 0 1 111 210
/**
 * Returns the total number of bytes in the unpack data buffer.  This is the
 * buffer used when unpacking; it is separate from the pack data returned by
 * get_length(), which is filled during packing.
 */
59
inline std::size_t DCPacker::get_unpack_length(void) const;

348 17 get_unpack_string 0 4 485 27 DCPacker::get_unpack_string 0 1 112 223
/**
 * Returns the unpack data buffer, as a string.  This is the buffer used when
 * unpacking; it is separate from the pack data returned by get_string(),
 * which is filled during packing.  Also see get_unpack_data().
 */
59
inline std::string DCPacker::get_unpack_string(void) const;

349 37 get_num_stack_elements_ever_allocated 0 4 485 47 DCPacker::get_num_stack_elements_ever_allocated 0 1 113 221
/**
 * Returns the number of DCPacker::StackElement pointers ever simultaneously
 * allocated; these are now either in active use or have been recycled into
 * the deleted DCPacker::StackElement pool to be used again.
 */
72
static inline int DCPacker::get_num_stack_elements_ever_allocated(void);

350 13 raw_pack_int8 0 4 485 23 DCPacker::raw_pack_int8 0 1 114 67
/**
 * Packs the data into the buffer between packing sessions.
 */
47
inline void DCPacker::raw_pack_int8(int value);

351 14 raw_pack_int16 0 4 485 24 DCPacker::raw_pack_int16 0 1 115 67
/**
 * Packs the data into the buffer between packing sessions.
 */
48
inline void DCPacker::raw_pack_int16(int value);

352 14 raw_pack_int32 0 4 485 24 DCPacker::raw_pack_int32 0 1 116 67
/**
 * Packs the data into the buffer between packing sessions.
 */
48
inline void DCPacker::raw_pack_int32(int value);

353 14 raw_pack_int64 0 4 485 24 DCPacker::raw_pack_int64 0 1 117 67
/**
 * Packs the data into the buffer between packing sessions.
 */
52
inline void DCPacker::raw_pack_int64(int64_t value);

354 14 raw_pack_uint8 0 4 485 24 DCPacker::raw_pack_uint8 0 1 118 67
/**
 * Packs the data into the buffer between packing sessions.
 */
57
inline void DCPacker::raw_pack_uint8(unsigned int value);

355 15 raw_pack_uint16 0 4 485 25 DCPacker::raw_pack_uint16 0 1 119 67
/**
 * Packs the data into the buffer between packing sessions.
 */
58
inline void DCPacker::raw_pack_uint16(unsigned int value);

356 15 raw_pack_uint32 0 4 485 25 DCPacker::raw_pack_uint32 0 1 120 67
/**
 * Packs the data into the buffer between packing sessions.
 */
58
inline void DCPacker::raw_pack_uint32(unsigned int value);

357 15 raw_pack_uint64 0 4 485 25 DCPacker::raw_pack_uint64 0 1 121 67
/**
 * Packs the data into the buffer between packing sessions.
 */
54
inline void DCPacker::raw_pack_uint64(uint64_t value);

358 16 raw_pack_float64 0 4 485 26 DCPacker::raw_pack_float64 0 1 122 67
/**
 * Packs the data into the buffer between packing sessions.
 */
53
inline void DCPacker::raw_pack_float64(double value);

359 15 raw_pack_string 0 4 485 25 DCPacker::raw_pack_string 0 1 123 67
/**
 * Packs the data into the buffer between packing sessions.
 */
64
inline void DCPacker::raw_pack_string(std::string const &value);

360 15 raw_unpack_int8 0 4 485 25 DCPacker::raw_unpack_int8 0 1 124 144
/**
 * Unpacks the data from the buffer between unpacking sessions.
 */

/**
 * Unpacks the data from the buffer between unpacking sessions.
 */
43
inline int DCPacker::raw_unpack_int8(void);

361 16 raw_unpack_int16 0 4 485 26 DCPacker::raw_unpack_int16 0 1 125 144
/**
 * Unpacks the data from the buffer between unpacking sessions.
 */

/**
 * Unpacks the data from the buffer between unpacking sessions.
 */
44
inline int DCPacker::raw_unpack_int16(void);

362 16 raw_unpack_int32 0 4 485 26 DCPacker::raw_unpack_int32 0 1 126 144
/**
 * Unpacks the data from the buffer between unpacking sessions.
 */

/**
 * Unpacks the data from the buffer between unpacking sessions.
 */
44
inline int DCPacker::raw_unpack_int32(void);

363 16 raw_unpack_int64 0 4 485 26 DCPacker::raw_unpack_int64 0 1 127 144
/**
 * Unpacks the data from the buffer between unpacking sessions.
 */

/**
 * Unpacks the data from the buffer between unpacking sessions.
 */
48
inline int64_t DCPacker::raw_unpack_int64(void);

364 16 raw_unpack_uint8 0 4 485 26 DCPacker::raw_unpack_uint8 0 1 128 144
/**
 * Unpacks the data from the buffer between unpacking sessions.
 */

/**
 * Unpacks the data from the buffer between unpacking sessions.
 */
53
inline unsigned int DCPacker::raw_unpack_uint8(void);

365 17 raw_unpack_uint16 0 4 485 27 DCPacker::raw_unpack_uint16 0 1 129 144
/**
 * Unpacks the data from the buffer between unpacking sessions.
 */

/**
 * Unpacks the data from the buffer between unpacking sessions.
 */
54
inline unsigned int DCPacker::raw_unpack_uint16(void);

366 17 raw_unpack_uint32 0 4 485 27 DCPacker::raw_unpack_uint32 0 1 130 144
/**
 * Unpacks the data from the buffer between unpacking sessions.
 */

/**
 * Unpacks the data from the buffer between unpacking sessions.
 */
54
inline unsigned int DCPacker::raw_unpack_uint32(void);

367 17 raw_unpack_uint64 0 4 485 27 DCPacker::raw_unpack_uint64 0 1 131 144
/**
 * Unpacks the data from the buffer between unpacking sessions.
 */

/**
 * Unpacks the data from the buffer between unpacking sessions.
 */
50
inline uint64_t DCPacker::raw_unpack_uint64(void);

368 18 raw_unpack_float64 0 4 485 28 DCPacker::raw_unpack_float64 0 1 132 144
/**
 * Unpacks the data from the buffer between unpacking sessions.
 */

/**
 * Unpacks the data from the buffer between unpacking sessions.
 */
49
inline double DCPacker::raw_unpack_float64(void);

369 17 raw_unpack_string 0 4 485 27 DCPacker::raw_unpack_string 0 1 133 144
/**
 * Unpacks the data from the buffer between unpacking sessions.
 */

/**
 * Unpacks the data from the buffer between unpacking sessions.
 */
53
inline std::string DCPacker::raw_unpack_string(void);

370 19 as_simple_parameter 0 6 486 32 DCParameter::as_simple_parameter 0 2 134 135 22
/**
 *
 */

/**
 *
 */
145
virtual DCSimpleParameter *DCParameter::as_simple_parameter(void);
virtual DCSimpleParameter const *DCParameter::as_simple_parameter(void) const;

371 18 as_array_parameter 0 6 486 31 DCParameter::as_array_parameter 0 2 136 137 22
/**
 *
 */

/**
 *
 */
141
virtual DCArrayParameter *DCParameter::as_array_parameter(void);
virtual DCArrayParameter const *DCParameter::as_array_parameter(void) const;

372 9 make_copy 0 6 486 22 DCParameter::make_copy 0 1 138 0
60
virtual DCParameter *DCParameter::make_copy(void) const = 0;

373 8 is_valid 0 6 486 21 DCParameter::is_valid 0 1 139 0
51
virtual bool DCParameter::is_valid(void) const = 0;

374 11 get_typedef 0 4 486 24 DCParameter::get_typedef 0 1 140 139
/**
 * If this type has been referenced from a typedef, returns the DCTypedef
 * instance, or NULL if the type was declared on-the-fly.
 */
54
DCTypedef const *DCParameter::get_typedef(void) const;

375 16 get_element_type 0 4 487 34 DCArrayParameter::get_element_type 0 1 141 69
/**
 * Returns the type of the individual elements of this array.
 */
60
DCParameter *DCArrayParameter::get_element_type(void) const;

376 14 get_array_size 0 4 487 32 DCArrayParameter::get_array_size 0 1 142 127
/**
 * Returns the fixed number of elements in this array, or -1 if the array may
 * contain a variable number of elements.
 */
49
int DCArrayParameter::get_array_size(void) const;

377 16 get_num_elements 0 4 488 31 DCAtomicField::get_num_elements 0 1 143 75
/**
 * Returns the number of elements (parameters) of the atomic field.
 */
48
int DCAtomicField::get_num_elements(void) const;

378 11 get_element 0 4 488 26 DCAtomicField::get_element 0 1 144 67
/**
 * Returns the parameter object describing the nth element.
 */
53
DCParameter *DCAtomicField::get_element(int n) const;

379 19 get_element_default 0 4 488 34 DCAtomicField::get_element_default 0 1 145 513
// These five methods are deprecated and will be removed soon.

/**
 * Returns the pre-formatted default value associated with the nth element of
 * the field.  This is only valid if has_element_default() returns true, in
 * which case this string represents the bytes that should be assigned to the
 * field as a default value.
 *
 * If the element is an array-type element, the returned value will include
 * the two-byte length preceding the array data.
 *
 * This is deprecated; use get_element() instead.
 */
60
std::string DCAtomicField::get_element_default(int n) const;

380 19 has_element_default 0 4 488 34 DCAtomicField::has_element_default 0 1 146 159
/**
 * Returns true if the nth element of the field has a default value specified,
 * false otherwise.
 *
 * This is deprecated; use get_element() instead.
 */
53
bool DCAtomicField::has_element_default(int n) const;

381 16 get_element_name 0 4 488 31 DCAtomicField::get_element_name 0 1 147 287
/**
 * Returns the name of the nth element of the field.  This name is strictly
 * for documentary purposes; it does not generally affect operation.  If a
 * name is not specified, this will be the empty string.
 *
 * This method is deprecated; use get_element()->get_name() instead.
 */
57
std::string DCAtomicField::get_element_name(int n) const;

382 16 get_element_type 0 4 488 31 DCAtomicField::get_element_type 0 1 148 126
/**
 * Returns the numeric type of the nth element of the field.  This method is
 * deprecated; use get_element() instead.
 */
61
DCSubatomicType DCAtomicField::get_element_type(int n) const;

383 19 get_element_divisor 0 4 488 34 DCAtomicField::get_element_divisor 0 1 149 340
/**
 * Returns the divisor associated with the nth element of the field.  This
 * implements an implicit fixed-point system; floating-point values are to be
 * multiplied by this value before encoding into a packet, and divided by this
 * number after decoding.
 *
 * This method is deprecated; use get_element()->get_divisor() instead.
 */
52
int DCAtomicField::get_element_divisor(int n) const;

384 14 ~DCDeclaration 0 6 489 29 DCDeclaration::~DCDeclaration 0 0 10
/**
 *
 */
44
virtual DCDeclaration::~DCDeclaration(void);

385 8 as_class 0 6 489 23 DCDeclaration::as_class 0 2 150 151 22
/**
 *
 */

/**
 *
 */
107
virtual DCClass *DCDeclaration::as_class(void);
virtual DCClass const *DCDeclaration::as_class(void) const;

386 9 as_switch 0 6 489 24 DCDeclaration::as_switch 0 2 152 153 22
/**
 *
 */

/**
 *
 */
111
virtual DCSwitch *DCDeclaration::as_switch(void);
virtual DCSwitch const *DCDeclaration::as_switch(void) const;

387 6 output 0 6 489 21 DCDeclaration::output 0 1 154 67
/**
 * Write a string representation of this instance to <out>.
 */
55
virtual void DCDeclaration::output(ostream &out) const;

388 5 write 0 4 489 20 DCDeclaration::write 0 1 155 67
/**
 * Write a string representation of this instance to <out>.
 */
64
void DCDeclaration::write(ostream &out, int indent_level) const;

389 11 get_dc_file 0 4 490 20 DCClass::get_dc_file 0 1 156 61
/**
 * Returns the DCFile object that contains the class.
 */
48
inline DCFile *DCClass::get_dc_file(void) const;

390 8 get_name 0 4 490 17 DCClass::get_name 0 1 157 42
/**
 * Returns the name of this class.
 */
56
inline std::string const &DCClass::get_name(void) const;

391 10 get_number 0 4 490 19 DCClass::get_number 0 1 158 130
/**
 * Returns a unique index number associated with this class.  This is defined
 * implicitly when the .dc file(s) are read.
 */
43
inline int DCClass::get_number(void) const;

392 15 get_num_parents 0 4 490 24 DCClass::get_num_parents 0 1 159 71
/**
 * Returns the number of base classes this class inherits from.
 */
41
int DCClass::get_num_parents(void) const;

393 10 get_parent 0 4 490 19 DCClass::get_parent 0 1 160 65
/**
 * Returns the nth parent class this class inherits from.
 */
42
DCClass *DCClass::get_parent(int n) const;

394 15 has_constructor 0 4 490 24 DCClass::has_constructor 0 1 161 113
/**
 * Returns true if this class has a constructor method, false if it just uses
 * the default constructor.
 */
42
bool DCClass::has_constructor(void) const;

395 15 get_constructor 0 4 490 24 DCClass::get_constructor 0 1 162 128
/**
 * Returns the constructor method for this class if it is defined, or NULL if
 * the class uses the default constructor.
 */
46
DCField *DCClass::get_constructor(void) const;

396 14 get_num_fields 0 4 490 23 DCClass::get_num_fields 0 1 163 96
/**
 * Returns the number of fields defined directly in this class, ignoring
 * inheritance.
 */
40
int DCClass::get_num_fields(void) const;

397 9 get_field 0 4 490 18 DCClass::get_field 0 1 164 176
/**
 * Returns the nth field in the class.  This is not necessarily the field with
 * index n; this is the nth field defined in the class directly, ignoring
 * inheritance.
 */
41
DCField *DCClass::get_field(int n) const;

398 17 get_field_by_name 0 4 490 26 DCClass::get_field_by_name 0 1 165 294
/**
 * Returns a pointer to the DCField that shares the indicated name.  If the
 * named field is not found in the current class, the parent classes will be
 * searched, so the value returned may not actually be a field within this
 * class.  Returns NULL if there is no such field defined.
 */
67
DCField *DCClass::get_field_by_name(std::string const &name) const;

399 18 get_field_by_index 0 4 490 27 DCClass::get_field_by_index 0 1 166 302
/**
 * Returns a pointer to the DCField that has the indicated index number.  If
 * the numbered field is not found in the current class, the parent classes
 * will be searched, so the value returned may not actually be a field within
 * this class.  Returns NULL if there is no such field defined.
 */
61
DCField *DCClass::get_field_by_index(int index_number) const;

400 24 get_num_inherited_fields 0 4 490 33 DCClass::get_num_inherited_fields 0 1 167 102
/**
 * Returns the total number of field fields defined in this class and all
 * ancestor classes.
 */
50
int DCClass::get_num_inherited_fields(void) const;

401 19 get_inherited_field 0 4 490 28 DCClass::get_inherited_field 0 1 168 315
/**
 * Returns the nth field field in the class and all of its ancestors.
 *
 * This *used* to be the same thing as get_field_by_index(), back when the
 * fields were numbered sequentially within a class's inheritance hierarchy.
 * Now that fields have a globally unique index number, this is no longer
 * true.
 */
51
DCField *DCClass::get_inherited_field(int n) const;

402 9 is_struct 0 4 490 18 DCClass::is_struct 0 1 169 141
/**
 * Returns true if the class has been identified with the "struct" keyword in
 * the dc file, false if it was declared with "dclass".
 */
43
inline bool DCClass::is_struct(void) const;

403 14 is_bogus_class 0 4 490 23 DCClass::is_bogus_class 0 1 170 253
/**
 * Returns true if the class has been flagged as a bogus class.  This is set
 * for classes that are generated by the parser as placeholder for missing
 * classes, as when reading a partial file; it should not occur in a normal
 * valid dc file.
 */
48
inline bool DCClass::is_bogus_class(void) const;

404 25 inherits_from_bogus_class 0 4 490 34 DCClass::inherits_from_bogus_class 0 1 171 172
/**
 * Returns true if this class, or any class in the inheritance heirarchy for
 * this class, is a "bogus" class--a forward reference to an as-yet-undefined
 * class.
 */
52
bool DCClass::inherits_from_bogus_class(void) const;

405 14 start_generate 0 4 490 23 DCClass::start_generate 0 1 172 255
/**
 * Starts the PStats timer going on the "generate" task, that is, marks the
 * beginning of the process of generating a new object, for the purposes of
 * timing this process.
 *
 * This should balance with a corresponding call to stop_generate().
 */
42
inline void DCClass::start_generate(void);

406 13 stop_generate 0 4 490 22 DCClass::stop_generate 0 1 173 124
/**
 * Stops the PStats timer on the "generate" task.  This should balance with a
 * preceding call to start_generate().
 */
41
inline void DCClass::stop_generate(void);

407 6 output 0 6 490 15 DCClass::output 0 1 174 136
/**
 * Write a string representation of this instance to <out>.
 */

/**
 * Write a string representation of this instance to <out>.
 */
49
virtual void DCClass::output(ostream &out) const;

408 13 has_class_def 0 4 490 22 DCClass::has_class_def 0 1 175 108
/**
 * Returns true if the DCClass object has an associated Python class
 * definition, false otherwise.
 */
40
bool DCClass::has_class_def(void) const;

409 13 set_class_def 0 4 490 22 DCClass::set_class_def 0 1 176 141
/**
 * Sets the class object associated with this DistributedClass.  This object
 * will be used to construct new instances of the class.
 */
49
void DCClass::set_class_def(PyObject *class_def);

410 13 get_class_def 0 4 490 22 DCClass::get_class_def 0 1 177 146
/**
 * Returns the class object that was previously associated with this
 * DistributedClass.  This will return a new reference to the object.
 */
45
PyObject *DCClass::get_class_def(void) const;

411 19 has_owner_class_def 0 4 490 28 DCClass::has_owner_class_def 0 1 178 114
/**
 * Returns true if the DCClass object has an associated Python owner class
 * definition, false otherwise.
 */
46
bool DCClass::has_owner_class_def(void) const;

412 19 set_owner_class_def 0 4 490 28 DCClass::set_owner_class_def 0 1 179 153
/**
 * Sets the owner class object associated with this DistributedClass.  This
 * object will be used to construct new owner instances of the class.
 */
61
void DCClass::set_owner_class_def(PyObject *owner_class_def);

413 19 get_owner_class_def 0 4 490 28 DCClass::get_owner_class_def 0 1 180 152
/**
 * Returns the owner class object that was previously associated with this
 * DistributedClass.  This will return a new reference to the object.
 */
51
PyObject *DCClass::get_owner_class_def(void) const;

414 14 receive_update 0 4 490 23 DCClass::receive_update 0 1 181 133
/**
 * Extracts the update message out of the packer and applies it to the
 * indicated object by calling the appropriate method.
 */
76
void DCClass::receive_update(PyObject *distobj, DatagramIterator &di) const;

415 33 receive_update_broadcast_required 0 4 490 42 DCClass::receive_update_broadcast_required 0 1 182 224
/**
 * Processes a big datagram that includes all of the "required" fields that
 * are sent along with a normal "generate with required" message.  This is all
 * of the atomic fields that are marked "broadcast required".
 */
95
void DCClass::receive_update_broadcast_required(PyObject *distobj, DatagramIterator &di) const;

416 39 receive_update_broadcast_required_owner 0 4 490 48 DCClass::receive_update_broadcast_required_owner 0 1 183 267
/**
 * Processes a big datagram that includes all of the "required" fields that
 * are sent along with a normal "generate with required" message.  This is all
 * of the atomic fields that are marked "broadcast ownrecv". Should be used
 * for 'owner-view' objects.
 */
101
void DCClass::receive_update_broadcast_required_owner(PyObject *distobj, DatagramIterator &di) const;

417 27 receive_update_all_required 0 4 490 36 DCClass::receive_update_all_required 0 1 184 222
/**
 * Processes a big datagram that includes all of the "required" fields that
 * are sent when an avatar is created.  This is all of the atomic fields that
 * are marked "required", whether they are broadcast or not.
 */
89
void DCClass::receive_update_all_required(PyObject *distobj, DatagramIterator &di) const;

418 20 receive_update_other 0 4 490 29 DCClass::receive_update_other 0 1 185 101
/**
 * Processes a datagram that lists some additional fields that are broadcast
 * in one chunk.
 */
82
void DCClass::receive_update_other(PyObject *distobj, DatagramIterator &di) const;

419 13 direct_update 0 4 490 22 DCClass::direct_update 0 2 186 187 148
/**
 * Processes an update for a named field from a packed value blob.
 */

/**
 * Processes an update for a named field from a packed datagram.
 */
214
void DCClass::direct_update(PyObject *distobj, std::string const &field_name, std::string const &value_blob);
void DCClass::direct_update(PyObject *distobj, std::string const &field_name, Datagram const &datagram);

420 19 pack_required_field 0 4 490 28 DCClass::pack_required_field 0 2 188 189 716
/**
 * Looks up the current value of the indicated field by calling the
 * appropriate get*() function, then packs that value into the datagram.  This
 * field is presumably either a required field or a specified optional field,
 * and we are building up a datagram for the generate-with-required message.
 *
 * Returns true on success, false on failure.
 */

/**
 * Looks up the current value of the indicated field by calling the
 * appropriate get*() function, then packs that value into the packer.  This
 * field is presumably either a required field or a specified optional field,
 * and we are building up a datagram for the generate-with-required message.
 *
 * Returns true on success, false on failure.
 */
201
bool DCClass::pack_required_field(Datagram &datagram, PyObject *distobj, DCField const *field) const;
bool DCClass::pack_required_field(DCPacker &packer, PyObject *distobj, DCField const *field) const;

421 20 client_format_update 0 4 490 29 DCClass::client_format_update 0 1 190 139
/**
 * Generates a datagram containing the message necessary to send an update for
 * the indicated distributed object from the client.
 */
109
Datagram DCClass::client_format_update(std::string const &field_name, DOID_TYPE do_id, PyObject *args) const;

422 16 ai_format_update 0 4 490 25 DCClass::ai_format_update 0 1 191 135
/**
 * Generates a datagram containing the message necessary to send an update for
 * the indicated distributed object from the AI.
 */
147
Datagram DCClass::ai_format_update(std::string const &field_name, DOID_TYPE do_id, CHANNEL_TYPE to_id, CHANNEL_TYPE from_id, PyObject *args) const;

423 25 ai_format_update_msg_type 0 4 490 34 DCClass::ai_format_update_msg_type 0 1 192 168
/**
 * Generates a datagram containing the message necessary to send an update,
 * using the indicated msg type for the indicated distributed object from the
 * AI.
 */
170
Datagram DCClass::ai_format_update_msg_type(std::string const &field_name, DOID_TYPE do_id, CHANNEL_TYPE to_id, CHANNEL_TYPE from_id, int msg_type, PyObject *args) const;

424 18 ai_format_generate 0 4 490 27 DCClass::ai_format_generate 0 1 193 304
/**
 * Generates a datagram containing the message necessary to generate a new
 * distributed object from the AI. This requires querying the object for the
 * initial value of its required fields.
 *
 * optional_fields is a list of fieldNames to generate in addition to the
 * normal required fields.
 */
214
Datagram DCClass::ai_format_generate(PyObject *distobj, DOID_TYPE do_id, ZONEID_TYPE parent_id, ZONEID_TYPE zone_id, CHANNEL_TYPE district_channel_id, CHANNEL_TYPE from_channel_id, PyObject *optional_fields) const;

425 26 client_format_generate_CMU 0 4 490 35 DCClass::client_format_generate_CMU 0 1 194 369
/**
 * Generates a datagram containing the message necessary to generate a new
 * distributed object from the client.  This requires querying the object for
 * the initial value of its required fields.
 *
 * optional_fields is a list of fieldNames to generate in addition to the
 * normal required fields.
 *
 * This method is only called by the CMU implementation.
 */
135
Datagram DCClass::client_format_generate_CMU(PyObject *distobj, DOID_TYPE do_id, ZONEID_TYPE zone_id, PyObject *optional_fields) const;

426 28 ai_database_generate_context 0 4 490 37 DCClass::ai_database_generate_context 0 1 195 193
/**
 * Generates a datagram containing the message necessary to create a new
 * database distributed object from the AI.
 *
 * First Pass is to only include required values (with Defaults).
 */
211
Datagram DCClass::ai_database_generate_context(unsigned int context_id, DOID_TYPE parent_id, ZONEID_TYPE zone_id, CHANNEL_TYPE owner_channel, CHANNEL_TYPE database_server_id, CHANNEL_TYPE from_channel_id) const;

427 32 ai_database_generate_context_old 0 4 490 41 DCClass::ai_database_generate_context_old 0 1 196 0
187
Datagram DCClass::ai_database_generate_context_old(unsigned int context_id, DOID_TYPE parent_id, ZONEID_TYPE zone_id, CHANNEL_TYPE database_server_id, CHANNEL_TYPE from_channel_id) const;

428 9 get_class 0 4 491 27 DCClassParameter::get_class 0 1 197 62
/**
 * Returns the class object this parameter represents.
 */
55
DCClass const *DCClassParameter::get_class(void) const;

429 17 ~DCClassParameter 0 4 491 35 DCClassParameter::~DCClassParameter 0 0 0
42
DCClassParameter::~DCClassParameter(void);

430 6 DCFile 0 4 492 14 DCFile::DCFile 0 2 198 199 10
/**
 *
 */
70
DCFile::DCFile(void);
inline DCFile::DCFile(DCFile const &) = default;

431 7 ~DCFile 0 4 492 15 DCFile::~DCFile 0 0 10
/**
 *
 */
22
DCFile::~DCFile(void);

432 5 clear 0 4 492 13 DCFile::clear 0 1 200 106
/**
 * Removes all of the classes defined within the DCFile and prepares it for
 * reading a new file.
 */
25
void DCFile::clear(void);

433 8 read_all 0 4 492 16 DCFile::read_all 0 1 201 146
/**
 * This special method reads all of the .dc files named by the "dc-file"
 * config.prc variable, and loads them into the DCFile namespace.
 */
28
bool DCFile::read_all(void);

434 4 read 0 4 492 12 DCFile::read 0 2 202 203 763
/**
 * Opens and reads the indicated .dc file by name.  The distributed classes
 * defined in the file will be appended to the set of distributed classes
 * already recorded, if any.
 *
 * Returns true if the file is successfully read, false if there was an error
 * (in which case the file might have been partially read).
 */

/**
 * Parses the already-opened input stream for distributed class descriptions.
 * The filename parameter is optional and is only used when reporting errors.
 *
 * The distributed classes defined in the file will be appended to the set of
 * distributed classes already recorded, if any.
 *
 * Returns true if the file is successfully read, false if there was an error
 * (in which case the file might have been partially read).
 */
109
bool DCFile::read(Filename filename);
bool DCFile::read(istream &in, std::string const &filename = string());

435 5 write 0 4 492 13 DCFile::write 0 2 204 205 396
/**
 * Opens the indicated filename for output and writes a parseable description
 * of all the known distributed classes to the file.
 *
 * Returns true if the description is successfully written, false otherwise.
 */

/**
 * Writes a parseable description of all the known distributed classes to the
 * stream.
 *
 * Returns true if the description is successfully written, false otherwise.
 */
108
bool DCFile::write(Filename filename, bool brief) const;
bool DCFile::write(ostream &out, bool brief) const;

436 15 get_num_classes 0 4 492 23 DCFile::get_num_classes 0 1 206 67
/**
 * Returns the number of classes read from the .dc file(s).
 */
40
int DCFile::get_num_classes(void) const;

437 9 get_class 0 4 492 17 DCFile::get_class 0 1 207 59
/**
 * Returns the nth class read from the .dc file(s).
 */
40
DCClass *DCFile::get_class(int n) const;

438 17 get_class_by_name 0 4 492 25 DCFile::get_class_by_name 0 1 208 95
/**
 * Returns the class that has the indicated name, or NULL if there is no such
 * class.
 */
66
DCClass *DCFile::get_class_by_name(std::string const &name) const;

439 18 get_switch_by_name 0 4 492 26 DCFile::get_switch_by_name 0 1 209 97
/**
 * Returns the switch that has the indicated name, or NULL if there is no such
 * switch.
 */
68
DCSwitch *DCFile::get_switch_by_name(std::string const &name) const;

440 18 get_field_by_index 0 4 492 26 DCFile::get_field_by_index 0 1 210 354
/**
 * Returns a pointer to the one DCField that has the indicated index number,
 * of all the DCFields across all classes in the file.
 *
 * This method is only valid if dc-multiple-inheritance is set true in the
 * Config.prc file.  Without this setting, different DCFields may share the
 * same index number, so this global lookup is not possible.
 */
60
DCField *DCFile::get_field_by_index(int index_number) const;

441 17 all_objects_valid 0 4 492 25 DCFile::all_objects_valid 0 1 211 208
/**
 * Returns true if all of the classes read from the DC file were defined and
 * valid, or false if any of them were undefined ("bogus classes").  If this
 * is true, we might have read a partial file.
 */
50
inline bool DCFile::all_objects_valid(void) const;

442 22 get_num_import_modules 0 4 492 30 DCFile::get_num_import_modules 0 1 212 72
/**
 * Returns the number of import lines read from the .dc file(s).
 */
47
int DCFile::get_num_import_modules(void) const;

443 17 get_import_module 0 4 492 25 DCFile::get_import_module 0 1 213 85
/**
 * Returns the module named by the nth import line read from the .dc file(s).
 */
51
std::string DCFile::get_import_module(int n) const;

444 22 get_num_import_symbols 0 4 492 30 DCFile::get_num_import_symbols 0 1 214 217
/**
 * Returns the number of symbols explicitly imported by the nth import line.
 * If this is 0, the line is "import modulename"; if it is more than 0, the
 * line is "from modulename import symbol, symbol ... ".
 */
48
int DCFile::get_num_import_symbols(int n) const;

445 17 get_import_symbol 0 4 492 25 DCFile::get_import_symbol 0 1 215 92
/**
 * Returns the ith symbol named by the nth import line read from the .dc
 * file(s).
 */
58
std::string DCFile::get_import_symbol(int n, int i) const;

446 16 get_num_typedefs 0 4 492 24 DCFile::get_num_typedefs 0 1 216 68
/**
 * Returns the number of typedefs read from the .dc file(s).
 */
41
int DCFile::get_num_typedefs(void) const;

447 11 get_typedef 0 4 492 19 DCFile::get_typedef 0 1 217 61
/**
 * Returns the nth typedef read from the .dc file(s).
 */
44
DCTypedef *DCFile::get_typedef(int n) const;

448 19 get_typedef_by_name 0 4 492 27 DCFile::get_typedef_by_name 0 1 218 104
/**
 * Returns the typedef that has the indicated name, or NULL if there is no
 * such typedef name.
 */
70
DCTypedef *DCFile::get_typedef_by_name(std::string const &name) const;

449 16 get_num_keywords 0 4 492 24 DCFile::get_num_keywords 0 1 219 68
/**
 * Returns the number of keywords read from the .dc file(s).
 */
41
int DCFile::get_num_keywords(void) const;

450 11 get_keyword 0 4 492 19 DCFile::get_keyword 0 1 220 61
/**
 * Returns the nth keyword read from the .dc file(s).
 */
50
DCKeyword const *DCFile::get_keyword(int n) const;

451 19 get_keyword_by_name 0 4 492 27 DCFile::get_keyword_by_name 0 1 221 104
/**
 * Returns the keyword that has the indicated name, or NULL if there is no
 * such keyword name.
 */
76
DCKeyword const *DCFile::get_keyword_by_name(std::string const &name) const;

452 8 get_hash 0 4 492 16 DCFile::get_hash 0 1 222 241
/**
 * Returns a 32-bit hash index associated with this file.  This number is
 * guaranteed to be consistent if the contents of the file have not changed,
 * and it is very likely to be different if the contents of the file do
 * change.
 */
47
unsigned long int DCFile::get_hash(void) const;

453 8 get_name 0 4 493 19 DCKeyword::get_name 0 1 223 44
/**
 * Returns the name of this keyword.
 */
51
std::string const &DCKeyword::get_name(void) const;

454 15 get_num_atomics 0 4 494 33 DCMolecularField::get_num_atomics 0 1 224 81
/**
 * Returns the number of atomic fields that make up this molecular field.
 */
50
int DCMolecularField::get_num_atomics(void) const;

455 10 get_atomic 0 4 494 28 DCMolecularField::get_atomic 0 1 225 178
/**
 * Returns the nth atomic field that makes up this molecular field.  This may
 * or may not be a field of this particular class; it might be defined in a
 * parent class.
 */
57
DCAtomicField *DCMolecularField::get_atomic(int n) const;

456 17 ~DCMolecularField 0 4 494 35 DCMolecularField::~DCMolecularField 0 0 0
42
DCMolecularField::~DCMolecularField(void);

457 8 get_type 0 4 495 27 DCSimpleParameter::get_type 0 1 226 78
/**
 * Returns the particular subatomic type represented by this instance.
 */
56
DCSubatomicType DCSimpleParameter::get_type(void) const;

458 11 has_modulus 0 4 495 30 DCSimpleParameter::has_modulus 0 1 227 75
/**
 * Returns true if there is a modulus associated, false otherwise.,
 */
48
bool DCSimpleParameter::has_modulus(void) const;

459 11 get_modulus 0 4 495 30 DCSimpleParameter::get_modulus 0 1 228 269
/**
 * Returns the modulus associated with this type, if any.  It is an error to
 * call this if has_modulus() returned false.
 *
 * If present, this is the modulus that is used to constrain the numeric value
 * of the field before it is packed (and range-checked).
 */
50
double DCSimpleParameter::get_modulus(void) const;

460 11 get_divisor 0 4 495 30 DCSimpleParameter::get_divisor 0 1 229 292
/**
 * Returns the divisor associated with this type.  This is 1 by default, but
 * if this is other than one it represents the scale to apply when packing and
 * unpacking numeric values (to store fixed-point values in an integer field).
 * It is only meaningful for numeric-type fields.
 */
47
int DCSimpleParameter::get_divisor(void) const;

461 18 ~DCSimpleParameter 0 4 495 37 DCSimpleParameter::~DCSimpleParameter 0 0 0
44
DCSimpleParameter::~DCSimpleParameter(void);

462 8 get_name 0 4 496 18 DCSwitch::get_name 0 1 230 43
/**
 * Returns the name of this switch.
 */
50
std::string const &DCSwitch::get_name(void) const;

463 17 get_key_parameter 0 4 496 27 DCSwitch::get_key_parameter 0 1 231 189
/**
 * Returns the key parameter on which the switch is based.  The value of this
 * parameter in the record determines which one of the several cases within
 * the switch will be used.
 */
49
DCField *DCSwitch::get_key_parameter(void) const;

464 13 get_num_cases 0 4 496 23 DCSwitch::get_num_cases 0 1 232 140
/**
 * Returns the number of different cases within the switch.  The legal values
 * for case_index range from 0 to get_num_cases() - 1.
 */
40
int DCSwitch::get_num_cases(void) const;

465 17 get_case_by_value 0 4 496 27 DCSwitch::get_case_by_value 0 1 233 116
/**
 * Returns the index number of the case with the indicated packed value, or -1
 * if no case has this value.
 */
69
int DCSwitch::get_case_by_value(std::string const &case_value) const;

466 8 get_case 0 4 496 18 DCSwitch::get_case 0 1 234 65
/**
 * Returns the DCPackerInterface that packs the nth case.
 */
51
DCPackerInterface *DCSwitch::get_case(int n) const;

467 16 get_default_case 0 4 496 26 DCSwitch::get_default_case 0 1 235 109
/**
 * Returns the DCPackerInterface that packs the default case, or NULL if there
 * is no default case.
 */
58
DCPackerInterface *DCSwitch::get_default_case(void) const;

468 9 get_value 0 4 496 19 DCSwitch::get_value 0 1 236 71
/**
 * Returns the packed value associated with the indicated case.
 */
54
std::string DCSwitch::get_value(int case_index) const;

469 14 get_num_fields 0 4 496 24 DCSwitch::get_num_fields 0 1 237 62
/**
 * Returns the number of fields in the indicated case.
 */
51
int DCSwitch::get_num_fields(int case_index) const;

470 9 get_field 0 4 496 19 DCSwitch::get_field 0 1 238 55
/**
 * Returns the nth field in the indicated case.
 */
58
DCField *DCSwitch::get_field(int case_index, int n) const;

471 17 get_field_by_name 0 4 496 27 DCSwitch::get_field_by_name 0 1 239 111
/**
 * Returns the field with the given name from the indicated case, or NULL if
 * no field has this name.
 */
84
DCField *DCSwitch::get_field_by_name(int case_index, std::string const &name) const;

472 10 get_switch 0 4 497 29 DCSwitchParameter::get_switch 0 1 240 63
/**
 * Returns the switch object this parameter represents.
 */
58
DCSwitch const *DCSwitchParameter::get_switch(void) const;

473 18 ~DCSwitchParameter 0 4 497 37 DCSwitchParameter::~DCSwitchParameter 0 0 0
44
DCSwitchParameter::~DCSwitchParameter(void);

474 10 get_number 0 4 498 21 DCTypedef::get_number 0 1 241 142
/**
 * Returns a unique index number associated with this typedef definition.
 * This is defined implicitly when the .dc file(s) are read.
 */
38
int DCTypedef::get_number(void) const;

475 8 get_name 0 4 498 19 DCTypedef::get_name 0 1 242 44
/**
 * Returns the name of this typedef.
 */
51
std::string const &DCTypedef::get_name(void) const;

476 15 get_description 0 4 498 26 DCTypedef::get_description 0 1 243 83
/**
 * Returns a brief decription of the typedef, useful for human consumption.
 */
51
std::string DCTypedef::get_description(void) const;

477 16 is_bogus_typedef 0 4 498 27 DCTypedef::is_bogus_typedef 0 1 244 259
/**
 * Returns true if the typedef has been flagged as a bogus typedef.  This is
 * set for typedefs that are generated by the parser as placeholder for
 * missing typedefs, as when reading a partial file; it should not occur in a
 * normal valid dc file.
 */
45
bool DCTypedef::is_bogus_typedef(void) const;

478 19 is_implicit_typedef 0 4 498 30 DCTypedef::is_implicit_typedef 0 1 245 157
/**
 * Returns true if the typedef has been flagged as an implicit typedef,
 * meaning it was created for a DCClass that was referenced inline as a type.
 */
48
bool DCTypedef::is_implicit_typedef(void) const;

245
1 0 0 6 5 501 0 0 83 /**
 * Returns the name of this field, or empty string if the field is unnamed.
 */ 1 4 this 3 499  
2 0 0 6 6 502 0 0 491 /**
 * Returns the index number to be passed to a future call to DCPacker::seek()
 * to seek directly to the named field without having to look up the field
 * name in a table later, or -1 if the named field cannot be found.
 *
 * If the named field is nested within a switch or some similar dynamic
 * structure that reveals different fields based on the contents of the data,
 * this mechanism cannot be used to pre-fetch the field index number--you must
 * seek for the field by name.
 */ 2 4 this 3 499  4 name 1 501  
3 0 0 6 7 504 0 0 10 /**
 *
 */ 1 4 this 3 503  
4 0 0 6 7 505 0 0 10 /**
 *
 */ 1 4 this 3 499  
5 0 0 6 8 507 0 0 10 /**
 *
 */ 1 4 this 3 503  
6 0 0 6 8 508 0 0 10 /**
 *
 */ 1 4 this 3 499  
7 0 0 6 9 510 0 0 10 /**
 *
 */ 1 4 this 3 503  
8 0 0 6 9 511 0 0 10 /**
 *
 */ 1 4 this 3 499  
9 0 0 6 10 513 0 0 189 /**
 * Returns true if the other interface is bitwise the same as this one--that
 * is, a uint32 only matches a uint32, etc.  Names of components, and range
 * limits, are not compared.
 */ 2 4 this 3 499  5 other 1 499  
10 0 0 6 10 513 0 0 362 /**
 * Returns true if this interface is bitwise the same as the interface
 * described with the indicated formatted string, e.g.  "(uint8, uint8,
 * int16)", or false otherwise.
 *
 * If DCFile is not NULL, it specifies the DCFile that was previously loaded,
 * from which some predefined structs and typedefs may be referenced in the
 * description string.
 */ 3 4 this 3 499  11 description 1 501  6 dcfile 1 514  
11 0 0 6 13 513 0 0 85 /**
 * Returns true if this list includes the indicated keyword, false otherwise.
 */ 2 4 this 3 515  7 keyword 1 517  
12 0 0 6 13 513 0 0 85 /**
 * Returns true if this list includes the indicated keyword, false otherwise.
 */ 2 4 this 3 515  4 name 1 501  
13 0 0 6 14 502 0 0 54 /**
 * Returns the number of keywords in the list.
 */ 1 4 this 3 515  
14 0 0 6 15 517 0 0 47 /**
 * Returns the nth keyword in the list.
 */ 2 4 this 3 515  1 n 1 502  
15 0 0 6 16 517 0 0 129 /**
 * Returns the keyword in the list with the indicated name, or NULL if there
 * is no keyword in the list with that name.
 */ 2 4 this 3 515  4 name 1 501  
16 0 0 6 17 513 0 0 147 /**
 * Returns true if this list has the same keywords as the other list, false if
 * some keywords differ.  Order is not considered important.
 */ 2 4 this 3 515  5 other 1 515  
17 0 0 6 24 502 0 0 130 /**
 * Returns a unique index number associated with this field.  This is defined
 * implicitly when the .dc file(s) are read.
 */ 1 4 this 3 505  
18 0 0 6 25 519 0 0 78 /**
 * Returns the DCClass pointer for the class that contains this field.
 */ 1 4 this 3 505  
19 0 0 6 26 504 0 0 10 /**
 *
 */ 1 4 this 3 504  
20 0 0 6 26 505 0 0 10 /**
 *
 */ 1 4 this 3 505  
21 0 0 6 27 520 0 0 143 /**
 * Returns the same field pointer converted to an atomic field pointer, if
 * this is in fact an atomic field; otherwise, returns NULL.
 */ 1 4 this 3 504  
22 0 0 6 27 521 0 0 143 /**
 * Returns the same field pointer converted to an atomic field pointer, if
 * this is in fact an atomic field; otherwise, returns NULL.
 */ 1 4 this 3 505  
23 0 0 6 28 523 0 0 147 /**
 * Returns the same field pointer converted to a molecular field pointer, if
 * this is in fact a molecular field; otherwise, returns NULL.
 */ 1 4 this 3 504  
24 0 0 6 28 524 0 0 147 /**
 * Returns the same field pointer converted to a molecular field pointer, if
 * this is in fact a molecular field; otherwise, returns NULL.
 */ 1 4 this 3 505  
25 0 0 6 29 526 0 0 10 /**
 *
 */ 1 4 this 3 504  
26 0 0 6 29 527 0 0 10 /**
 *
 */ 1 4 this 3 505  
27 0 0 6 30 501 0 0 175 /**
 * Given a blob that represents the packed data for this field, returns a
 * string formatting it for human consumption.  Returns empty string if there
 * is an error.
 */ 3 4 this 3 504  11 packed_data 1 501  16 show_field_names 1 513  
28 0 0 6 31 501 0 0 243 /**
 * Given a human-formatted string (for instance, as returned by format_data(),
 * above) that represents the value of this field, parse the string and return
 * the corresponding packed data.  Returns empty string if there is an error.
 */ 2 4 this 3 504  16 formatted_string 1 501  
29 0 0 6 32 513 0 0 221 /**
 * Verifies that all of the packed values in the field data are within the
 * specified ranges and that there are no extra bytes on the end of the
 * record.  Returns true if all fields are valid, false otherwise.
 */ 2 4 this 3 505  11 packed_data 1 501  
30 0 0 6 33 513 0 0 110 /**
 * Returns true if a default value has been explicitly established for this
 * field, false otherwise.
 */ 1 4 this 3 505  
31 0 0 6 34 501 0 0 218 /**
 * Returns the default value for this field.  If a default value has been
 * explicitly set (e.g.  has_default_value() returns true), returns that
 * value; otherwise, returns an implicit default for the field.
 */ 1 4 this 3 505  
32 0 0 6 35 513 0 0 251 /**
 * Returns true if the field has been flagged as a bogus field.  This is set
 * for fields that are generated by the parser as placeholder for missing
 * fields, as when reading a partial file; it should not occur in a normal
 * valid dc file.
 */ 1 4 this 3 505  
33 0 0 6 36 513 0 0 86 /**
 * Returns true if the "required" flag is set for this field, false otherwise.
 */ 1 4 this 3 505  
34 0 0 6 37 513 0 0 90 /**
 * Returns true if the "broadcast" flag is set for this field, false
 * otherwise.
 */ 1 4 this 3 505  
35 0 0 6 38 513 0 0 81 /**
 * Returns true if the "ram" flag is set for this field, false otherwise.
 */ 1 4 this 3 505  
36 0 0 6 39 513 0 0 80 /**
 * Returns true if the "db" flag is set for this field, false otherwise.
 */ 1 4 this 3 505  
37 0 0 6 40 513 0 0 84 /**
 * Returns true if the "clsend" flag is set for this field, false otherwise.
 */ 1 4 this 3 505  
38 0 0 6 41 513 0 0 84 /**
 * Returns true if the "clrecv" flag is set for this field, false otherwise.
 */ 1 4 this 3 505  
39 0 0 6 42 513 0 0 85 /**
 * Returns true if the "ownsend" flag is set for this field, false otherwise.
 */ 1 4 this 3 505  
40 0 0 6 43 513 0 0 85 /**
 * Returns true if the "ownrecv" flag is set for this field, false otherwise.
 */ 1 4 this 3 505  
41 0 0 6 44 513 0 0 84 /**
 * Returns true if the "airecv" flag is set for this field, false otherwise.
 */ 1 4 this 3 505  
42 0 0 4 45 531 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 505  3 out 1 529  
43 0 0 4 46 531 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 505  3 out 1 529  12 indent_level 1 502  
44 0 0 6 47 513 0 0 200 /**
 * Packs the Python arguments from the indicated tuple into the packer.
 * Returns true on success, false on failure.
 *
 * It is assumed that the packer is currently positioned on this field.
 */ 3 4 this 3 505  6 packer 1 532  8 sequence 1 533  
45 0 0 6 48 533 0 0 220 /**
 * Unpacks the values from the packer, beginning at the current point in the
 * unpack_buffer, into a Python tuple and returns the tuple.
 *
 * It is assumed that the packer is currently positioned on this field.
 */ 2 4 this 3 505  6 packer 1 532  
46 0 0 4 49 531 0 0 135 /**
 * Extracts the update message out of the datagram and applies it to the
 * indicated object by calling the appropriate method.
 */ 3 4 this 3 505  6 packer 1 532  7 distobj 1 533  
47 0 0 7 50 540 0 0 139 /**
 * Generates a datagram containing the message necessary to send an update for
 * the indicated distributed object from the client.
 */ 3 4 this 3 505  5 do_id 1 537  4 args 1 533  
48 0 0 7 51 540 0 0 135 /**
 * Generates a datagram containing the message necessary to send an update for
 * the indicated distributed object from the AI.
 */ 5 4 this 3 505  5 do_id 1 537  5 to_id 1 541  7 from_id 1 541  4 args 1 533  
49 0 0 7 52 540 0 0 155 /**
 * Generates a datagram containing the message necessary to send an update,
 * with the msg type, for the indicated distributed object from the AI.
 */ 6 4 this 3 505  5 do_id 1 537  5 to_id 1 541  7 from_id 1 541  8 msg_type 1 502  4 args 1 533  
50 0 0 6 19 503 0 0 0 1 4 this 3 504  
51 0 0 6 20 504 0 0 0 1 4 this 3 503  
52 0 0 6 21 544 0 0 0 1 4 this 3 504  
53 0 0 6 22 504 0 0 0 1 4 this 3 544  
54 0 0 7 54 545 294 0 10 /**
 *
 */ 0 
55 0 0 7 54 545 294 0 0 1 6 param0 0 546  
56 0 0 4 56 531 0 0 98 /**
 * Empties the contents of the data (without necessarily freeing its allocated
 * memory).
 */ 1 4 this 3 545  
57 0 0 6 57 501 0 0 69 /**
 * Returns the data buffer as a string.  Also see get_data().
 */ 1 4 this 3 546  
58 0 0 6 58 548 0 0 151 /**
 * Returns the current length of the buffer.  This is the number of useful
 * bytes stored in the buffer, not the amount of memory it takes up.
 */ 1 4 this 3 546  
59 0 0 7 60 532 299 0 10 /**
 *
 */ 0 
60 0 0 7 60 532 299 0 0 1 6 param0 0 549  
61 0 0 4 62 531 0 0 190 /**
 * Empties the data in the pack buffer and unpack buffer.  This should be
 * called between calls to begin_pack(), unless you want to concatenate all of
 * the pack results together.
 */ 1 4 this 3 532  
62 0 0 4 63 531 0 0 390 /**
 * Begins a packing session.  The parameter is the DC object that describes
 * the packing format; it may be a DCParameter or DCField.
 *
 * Unless you call clear_data() between sessions, multiple packing sessions
 * will be concatenated together into the same buffer.  If you wish to add
 * bytes to the buffer between packing sessions, use append_data() or
 * get_write_pointer().
 */ 2 4 this 3 532  4 root 1 499  
63 0 0 6 64 513 0 0 138 /**
 * Finishes a packing session.
 *
 * The return value is true on success, or false if there has been some error
 * during packing.
 */ 1 4 this 3 532  
64 0 0 4 65 531 0 0 141 /**
 * Sets up the unpack_data pointer.  You may call this before calling the
 * version of begin_unpack() that takes only one parameter.
 */ 2 4 this 3 532  4 data 1 501  
65 0 0 4 66 531 0 0 375 /**
 * Begins an unpacking session.  You must have previously called
 * set_unpack_data() to specify a buffer to unpack.
 *
 * If there was data left in the buffer after a previous begin_unpack() ..
 * end_unpack() session, the new session will resume from the current point.
 * This method may be used, therefore, to unpack a sequence of objects from
 * the same buffer.
 */ 2 4 this 3 532  4 root 1 499  
66 0 0 6 67 513 0 0 186 /**
 * Finishes the unpacking session.
 *
 * The return value is true on success, or false if there has been some error
 * during unpacking (or if all fields have not been unpacked).
 */ 1 4 this 3 532  
67 0 0 4 68 531 0 0 562 /**
 * Begins a repacking session.  You must have previously called
 * set_unpack_data() to specify a buffer to unpack.
 *
 * Unlike begin_pack() or begin_unpack() you may not concatenate the results
 * of multiple begin_repack() sessions in one buffer.
 *
 * Also, unlike in packing or unpacking modes, you may not walk through the
 * fields from beginning to end, or even pack two consecutive fields at once.
 * Instead, you must call seek() for each field you wish to modify and pack
 * only that one field; then call seek() again to modify another field.
 */ 2 4 this 3 532  4 root 1 499  
68 0 0 6 69 513 0 0 186 /**
 * Finishes the repacking session.
 *
 * The return value is true on success, or false if there has been some error
 * during repacking (or if all fields have not been repacked).
 */ 1 4 this 3 532  
69 0 0 6 70 513 0 0 339 /**
 * Seeks to the field indentified by seek_index, which was returned by an
 * earlier call to DCField::find_seek_index() to get the index of some nested
 * field.  Also see the version of seek() that accepts a field name.
 *
 * Returns true if successful, false if the field is not known (or if the
 * packer is in an invalid mode).
 */ 2 4 this 3 532  10 seek_index 1 502  
70 0 0 6 70 513 0 0 368 /**
 * Sets the current unpack (or repack) position to the named field.  In unpack
 * mode, the next call to unpack_*() or push() will begin to read the named
 * field.  In repack mode, the next call to pack_*() or push() will modify the
 * named field.
 *
 * Returns true if successful, false if the field is not known (or if the
 * packer is in an invalid mode).
 */ 2 4 this 3 532  10 field_name 1 501  
71 0 0 6 71 513 0 0 254 /**
 * Returns true if the current field has any nested fields (and thus expects a
 * push() .. pop() interface), or false otherwise.  If this returns true,
 * get_num_nested_fields() may be called to determine how many nested fields
 * are expected.
 */ 1 4 this 3 549  
72 0 0 6 72 502 0 0 517 /**
 * Returns the number of nested fields associated with the current field, if
 * has_nested_fields() returned true.
 *
 * The return value may be -1 to indicate that a variable number of nested
 * fields are accepted by this field type (e.g.  a variable-length array).
 *
 * Note that this method is unreliable to determine how many fields you must
 * traverse before you can call pop(), since particularly in the presence of a
 * DCSwitch, it may change during traversal.  Use more_nested_fields()
 * instead.
 */ 1 4 this 3 549  
73 0 0 6 73 513 0 0 141 /**
 * Returns true if there are more nested fields to pack or unpack in the
 * current push sequence, false if it is time to call pop().
 */ 1 4 this 3 549  
74 0 0 6 74 499 0 0 175 /**
 * Returns the field that we left in our last call to push(): the owner of the
 * current level of fields.  This may be NULL at the beginning of the pack
 * operation.
 */ 1 4 this 3 549  
75 0 0 6 75 499 0 0 197 /**
 * Returns the field that will be referenced by the next call to pack_*() or
 * unpack_*().  This will be NULL if we have unpacked (or packed) all fields,
 * or if it is time to call pop().
 */ 1 4 this 3 549  
76 0 0 6 76 508 0 0 428 /**
 * Returns a pointer to the last DCSwitch instance that we have passed by and
 * selected one case of during the pack/unpack process.  Each time we
 * encounter a new DCSwitch and select a case, this will change state.
 *
 * This may be used to detect when a DCSwitch has been selected.  At the
 * moment this changes state, get_current_parent() will contain the particular
 * SwitchCase that was selected by the switch.
 */ 1 4 this 3 549  
77 0 0 6 77 480 0 0 438 /**
 * Returns the type of value expected by the current field.  See the
 * enumerated type definition at the top of DCPackerInterface.h.  If this
 * returns one of PT_double, PT_int, PT_int64, or PT_string, then you should
 * call the corresponding pack_double(), pack_int() function (or
 * unpack_double(), unpack_int(), etc.) to transfer data.  Otherwise, you
 * should call push() and begin packing or unpacking the nested fields.
 */ 1 4 this 3 549  
78 0 0 6 78 501 0 0 154 /**
 * Returns the name of the current field, if it has a name, or the empty
 * string if the field does not have a name or there is no current field.
 */ 1 4 this 3 549  
79 0 0 4 79 531 0 0 315 /**
 * Marks the beginning of a nested series of fields.
 *
 * This must be called before filling the elements of an array or the
 * individual fields in a structure field.  It must also be balanced by a
 * matching pop().
 *
 * It is necessary to use push() / pop() only if has_nested_fields() returns
 * true.
 */ 1 4 this 3 532  
80 0 0 4 80 531 0 0 234 /**
 * Marks the end of a nested series of fields.
 *
 * This must be called to match a previous push() only after all the expected
 * number of nested fields have been packed.  It is an error to call it too
 * early, or too late.
 */ 1 4 this 3 532  
81 0 0 4 81 531 0 0 71 /**
 * Packs the indicated numeric or string value into the stream.
 */ 2 4 this 3 532  5 value 1 551  
82 0 0 4 82 531 0 0 71 /**
 * Packs the indicated numeric or string value into the stream.
 */ 2 4 this 3 532  5 value 1 502  
83 0 0 4 83 531 0 0 71 /**
 * Packs the indicated numeric or string value into the stream.
 */ 2 4 this 3 532  5 value 1 539  
84 0 0 4 84 531 0 0 71 /**
 * Packs the indicated numeric or string value into the stream.
 */ 2 4 this 3 532  5 value 1 552  
85 0 0 4 85 531 0 0 71 /**
 * Packs the indicated numeric or string value into the stream.
 */ 2 4 this 3 532  5 value 1 542  
86 0 0 4 86 531 0 0 71 /**
 * Packs the indicated numeric or string value into the stream.
 */ 2 4 this 3 532  5 value 1 501  
87 0 0 4 87 531 0 0 155 /**
 * Adds the indicated string value into the stream, representing a single pre-
 * packed field element, or a whole group of field elements at once.
 */ 2 4 this 3 532  5 value 1 501  
88 0 0 4 88 531 0 0 158 /**
 * Adds the default value for the current element into the stream.  If no
 * default has been set for the current element, creates a sensible default.
 */ 1 4 this 3 532  
89 0 0 6 89 551 0 0 71 /**
 * Unpacks the current numeric or string value from the stream.
 */ 1 4 this 3 532  
90 0 0 6 90 502 0 0 71 /**
 * Unpacks the current numeric or string value from the stream.
 */ 1 4 this 3 532  
91 0 0 6 91 539 0 0 71 /**
 * Unpacks the current numeric or string value from the stream.
 */ 1 4 this 3 532  
92 0 0 6 92 552 0 0 71 /**
 * Unpacks the current numeric or string value from the stream.
 */ 1 4 this 3 532  
93 0 0 6 93 542 0 0 71 /**
 * Unpacks the current numeric or string value from the stream.
 */ 1 4 this 3 532  
94 0 0 6 94 501 0 0 71 /**
 * Unpacks the current numeric or string value from the stream.
 */ 1 4 this 3 532  
95 0 0 6 95 501 0 0 127 /**
 * Returns the literal string that represents the packed value of the current
 * field, and advances the field pointer.
 */ 1 4 this 3 532  
96 0 0 4 96 531 0 0 219 /**
 * Internally unpacks the current numeric or string value and validates it
 * against the type range limits, but does not return the value.  If the
 * current field contains nested fields, validates all of them.
 */ 1 4 this 3 532  
97 0 0 4 97 531 0 0 155 /**
 * Skips the current field without unpacking it and advances to the next
 * field.  If the current field contains nested fields, skips all of them.
 */ 1 4 this 3 532  
98 0 0 4 98 531 0 0 259 /**
 * Packs the Python object of whatever type into the packer.  Each numeric
 * object and string object maps to the corresponding pack_value() call; a
 * tuple or sequence maps to a push() followed by all of the tuple's contents
 * followed by a pop().
 */ 2 4 this 3 532  6 object 1 533  
99 0 0 6 99 533 0 0 238 /**
 * Unpacks a Python object of the appropriate type from the stream for the
 * current field.  This may be an integer or a string for a simple field
 * object; if the current field represents a list of fields it will be a
 * tuple.
 */ 1 4 this 3 532  
100 0 0 6 100 513 0 0 171 /**
 * Parses an object's value according to the DC file syntax (e.g.  as a
 * default value string) and packs it.  Returns true on success, false on a
 * parse error.
 */ 2 4 this 3 532  2 in 1 554  
101 0 0 6 100 513 0 0 171 /**
 * Parses an object's value according to the DC file syntax (e.g.  as a
 * default value string) and packs it.  Returns true on success, false on a
 * parse error.
 */ 2 4 this 3 532  16 formatted_object 1 501  
102 0 0 6 101 501 0 0 163 /**
 * Unpacks an object and formats its value into a syntax suitable for parsing
 * in the dc file (e.g.  as a default value), or as an input to parse_object.
 */ 2 4 this 3 532  16 show_field_names 1 513  
103 0 0 4 101 531 0 0 163 /**
 * Unpacks an object and formats its value into a syntax suitable for parsing
 * in the dc file (e.g.  as a default value), or as an input to parse_object.
 */ 3 4 this 3 532  3 out 1 529  16 show_field_names 1 513  
104 0 0 6 102 513 0 0 149 /**
 * Returns true if there has been an parse error since the most recent call to
 * begin(); this can only happen if you call parse_and_pack().
 */ 1 4 this 3 549  
105 0 0 6 103 513 0 0 471 /**
 * Returns true if there has been an packing error since the most recent call
 * to begin(); in particular, this may be called after end() has returned
 * false to determine the nature of the failure.
 *
 * A return value of true indicates there was a push/pop mismatch, or the
 * push/pop structure did not match the data structure, or there were the
 * wrong number of elements in a nested push/pop structure, or on unpack that
 * the data stream was truncated.
 */ 1 4 this 3 549  
106 0 0 6 104 513 0 0 400 /**
 * Returns true if there has been an range validation error since the most
 * recent call to begin(); in particular, this may be called after end() has
 * returned false to determine the nature of the failure.
 *
 * A return value of true indicates a value that was packed or unpacked did
 * not fit within the specified legal range for a parameter, or within the
 * limits of the field size.
 */ 1 4 this 3 549  
107 0 0 6 105 513 0 0 222 /**
 * Returns true if there has been any error (either a pack error or a range
 * error) since the most recent call to begin().  If this returns true, then
 * the matching call to end() will indicate an error (false).
 */ 1 4 this 3 549  
108 0 0 6 106 548 0 0 290 /**
 * Returns the number of bytes that have been unpacked so far, or after
 * unpack_end(), the total number of bytes that were unpacked at all.  This
 * can be used to validate that all of the bytes in the buffer were actually
 * unpacked (which is not otherwise considered an error).
 */ 1 4 this 3 549  
109 0 0 6 107 548 0 0 151 /**
 * Returns the current length of the buffer.  This is the number of useful
 * bytes stored in the buffer, not the amount of memory it takes up.
 */ 1 4 this 3 549  
110 0 0 6 108 501 0 0 76 /**
 * Returns the packed data buffer as a string.  Also see get_data().
 */ 1 4 this 3 549  
111 0 0 6 109 548 0 0 210 /**
 * Returns the total number of bytes in the unpack data buffer.  This is the
 * buffer used when unpacking; it is separate from the pack data returned by
 * get_length(), which is filled during packing.
 */ 1 4 this 3 549  
112 0 0 6 110 501 0 0 223 /**
 * Returns the unpack data buffer, as a string.  This is the buffer used when
 * unpacking; it is separate from the pack data returned by get_string(),
 * which is filled during packing.  Also see get_unpack_data().
 */ 1 4 this 3 549  
113 0 0 6 111 502 0 0 221 /**
 * Returns the number of DCPacker::StackElement pointers ever simultaneously
 * allocated; these are now either in active use or have been recycled into
 * the deleted DCPacker::StackElement pool to be used again.
 */ 0 
114 0 0 4 112 531 0 0 67 /**
 * Packs the data into the buffer between packing sessions.
 */ 2 4 this 3 532  5 value 1 502  
115 0 0 4 113 531 0 0 67 /**
 * Packs the data into the buffer between packing sessions.
 */ 2 4 this 3 532  5 value 1 502  
116 0 0 4 114 531 0 0 67 /**
 * Packs the data into the buffer between packing sessions.
 */ 2 4 this 3 532  5 value 1 502  
117 0 0 4 115 531 0 0 67 /**
 * Packs the data into the buffer between packing sessions.
 */ 2 4 this 3 532  5 value 1 552  
118 0 0 4 116 531 0 0 67 /**
 * Packs the data into the buffer between packing sessions.
 */ 2 4 this 3 532  5 value 1 539  
119 0 0 4 117 531 0 0 67 /**
 * Packs the data into the buffer between packing sessions.
 */ 2 4 this 3 532  5 value 1 539  
120 0 0 4 118 531 0 0 67 /**
 * Packs the data into the buffer between packing sessions.
 */ 2 4 this 3 532  5 value 1 539  
121 0 0 4 119 531 0 0 67 /**
 * Packs the data into the buffer between packing sessions.
 */ 2 4 this 3 532  5 value 1 542  
122 0 0 4 120 531 0 0 67 /**
 * Packs the data into the buffer between packing sessions.
 */ 2 4 this 3 532  5 value 1 551  
123 0 0 4 121 531 0 0 67 /**
 * Packs the data into the buffer between packing sessions.
 */ 2 4 this 3 532  5 value 1 501  
124 0 0 6 122 502 0 0 71 /**
 * Unpacks the data from the buffer between unpacking sessions.
 */ 1 4 this 3 532  
125 0 0 6 123 502 0 0 71 /**
 * Unpacks the data from the buffer between unpacking sessions.
 */ 1 4 this 3 532  
126 0 0 6 124 502 0 0 71 /**
 * Unpacks the data from the buffer between unpacking sessions.
 */ 1 4 this 3 532  
127 0 0 6 125 552 0 0 71 /**
 * Unpacks the data from the buffer between unpacking sessions.
 */ 1 4 this 3 532  
128 0 0 6 126 539 0 0 71 /**
 * Unpacks the data from the buffer between unpacking sessions.
 */ 1 4 this 3 532  
129 0 0 6 127 539 0 0 71 /**
 * Unpacks the data from the buffer between unpacking sessions.
 */ 1 4 this 3 532  
130 0 0 6 128 539 0 0 71 /**
 * Unpacks the data from the buffer between unpacking sessions.
 */ 1 4 this 3 532  
131 0 0 6 129 542 0 0 71 /**
 * Unpacks the data from the buffer between unpacking sessions.
 */ 1 4 this 3 532  
132 0 0 6 130 551 0 0 71 /**
 * Unpacks the data from the buffer between unpacking sessions.
 */ 1 4 this 3 532  
133 0 0 6 131 501 0 0 71 /**
 * Unpacks the data from the buffer between unpacking sessions.
 */ 1 4 this 3 532  
134 0 0 6 133 556 0 0 10 /**
 *
 */ 1 4 this 3 526  
135 0 0 6 133 557 0 0 10 /**
 *
 */ 1 4 this 3 527  
136 0 0 6 134 559 0 0 10 /**
 *
 */ 1 4 this 3 526  
137 0 0 6 134 560 0 0 10 /**
 *
 */ 1 4 this 3 527  
138 0 0 6 135 526 0 0 0 1 4 this 3 527  
139 0 0 6 136 513 0 0 0 1 4 this 3 527  
140 0 0 6 137 562 0 0 139 /**
 * If this type has been referenced from a typedef, returns the DCTypedef
 * instance, or NULL if the type was declared on-the-fly.
 */ 1 4 this 3 527  
141 0 0 6 139 526 0 0 69 /**
 * Returns the type of the individual elements of this array.
 */ 1 4 this 3 560  
142 0 0 6 140 502 0 0 127 /**
 * Returns the fixed number of elements in this array, or -1 if the array may
 * contain a variable number of elements.
 */ 1 4 this 3 560  
143 0 0 6 142 502 0 0 75 /**
 * Returns the number of elements (parameters) of the atomic field.
 */ 1 4 this 3 521  
144 0 0 6 143 526 0 0 67 /**
 * Returns the parameter object describing the nth element.
 */ 2 4 this 3 521  1 n 1 502  
145 0 0 6 144 501 0 0 449 /**
 * Returns the pre-formatted default value associated with the nth element of
 * the field.  This is only valid if has_element_default() returns true, in
 * which case this string represents the bytes that should be assigned to the
 * field as a default value.
 *
 * If the element is an array-type element, the returned value will include
 * the two-byte length preceding the array data.
 *
 * This is deprecated; use get_element() instead.
 */ 2 4 this 3 521  1 n 1 502  
146 0 0 6 145 513 0 0 159 /**
 * Returns true if the nth element of the field has a default value specified,
 * false otherwise.
 *
 * This is deprecated; use get_element() instead.
 */ 2 4 this 3 521  1 n 1 502  
147 0 0 6 146 501 0 0 287 /**
 * Returns the name of the nth element of the field.  This name is strictly
 * for documentary purposes; it does not generally affect operation.  If a
 * name is not specified, this will be the empty string.
 *
 * This method is deprecated; use get_element()->get_name() instead.
 */ 2 4 this 3 521  1 n 1 502  
148 0 0 6 147 479 0 0 126 /**
 * Returns the numeric type of the nth element of the field.  This method is
 * deprecated; use get_element() instead.
 */ 2 4 this 3 521  1 n 1 502  
149 0 0 6 148 502 0 0 340 /**
 * Returns the divisor associated with the nth element of the field.  This
 * implements an implicit fixed-point system; floating-point values are to be
 * multiplied by this value before encoding into a packet, and divided by this
 * number after decoding.
 *
 * This method is deprecated; use get_element()->get_divisor() instead.
 */ 2 4 this 3 521  1 n 1 502  
150 0 0 6 151 519 0 0 10 /**
 *
 */ 1 4 this 3 564  
151 0 0 6 151 567 0 0 10 /**
 *
 */ 1 4 this 3 565  
152 0 0 6 152 569 0 0 10 /**
 *
 */ 1 4 this 3 564  
153 0 0 6 152 570 0 0 10 /**
 *
 */ 1 4 this 3 565  
154 0 0 4 153 531 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 565  3 out 1 529  
155 0 0 4 154 531 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 565  3 out 1 529  12 indent_level 1 502  
156 0 0 6 156 514 0 0 61 /**
 * Returns the DCFile object that contains the class.
 */ 1 4 this 3 567  
157 0 0 6 157 501 0 0 42 /**
 * Returns the name of this class.
 */ 1 4 this 3 567  
158 0 0 6 158 502 0 0 130 /**
 * Returns a unique index number associated with this class.  This is defined
 * implicitly when the .dc file(s) are read.
 */ 1 4 this 3 567  
159 0 0 6 159 502 0 0 71 /**
 * Returns the number of base classes this class inherits from.
 */ 1 4 this 3 567  
160 0 0 6 160 519 0 0 65 /**
 * Returns the nth parent class this class inherits from.
 */ 2 4 this 3 567  1 n 1 502  
161 0 0 6 161 513 0 0 113 /**
 * Returns true if this class has a constructor method, false if it just uses
 * the default constructor.
 */ 1 4 this 3 567  
162 0 0 6 162 504 0 0 128 /**
 * Returns the constructor method for this class if it is defined, or NULL if
 * the class uses the default constructor.
 */ 1 4 this 3 567  
163 0 0 6 163 502 0 0 96 /**
 * Returns the number of fields defined directly in this class, ignoring
 * inheritance.
 */ 1 4 this 3 567  
164 0 0 6 164 504 0 0 176 /**
 * Returns the nth field in the class.  This is not necessarily the field with
 * index n; this is the nth field defined in the class directly, ignoring
 * inheritance.
 */ 2 4 this 3 567  1 n 1 502  
165 0 0 6 165 504 0 0 294 /**
 * Returns a pointer to the DCField that shares the indicated name.  If the
 * named field is not found in the current class, the parent classes will be
 * searched, so the value returned may not actually be a field within this
 * class.  Returns NULL if there is no such field defined.
 */ 2 4 this 3 567  4 name 1 501  
166 0 0 6 166 504 0 0 302 /**
 * Returns a pointer to the DCField that has the indicated index number.  If
 * the numbered field is not found in the current class, the parent classes
 * will be searched, so the value returned may not actually be a field within
 * this class.  Returns NULL if there is no such field defined.
 */ 2 4 this 3 567  12 index_number 1 502  
167 0 0 6 167 502 0 0 102 /**
 * Returns the total number of field fields defined in this class and all
 * ancestor classes.
 */ 1 4 this 3 567  
168 0 0 6 168 504 0 0 315 /**
 * Returns the nth field field in the class and all of its ancestors.
 *
 * This *used* to be the same thing as get_field_by_index(), back when the
 * fields were numbered sequentially within a class's inheritance hierarchy.
 * Now that fields have a globally unique index number, this is no longer
 * true.
 */ 2 4 this 3 567  1 n 1 502  
169 0 0 6 169 513 0 0 141 /**
 * Returns true if the class has been identified with the "struct" keyword in
 * the dc file, false if it was declared with "dclass".
 */ 1 4 this 3 567  
170 0 0 6 170 513 0 0 253 /**
 * Returns true if the class has been flagged as a bogus class.  This is set
 * for classes that are generated by the parser as placeholder for missing
 * classes, as when reading a partial file; it should not occur in a normal
 * valid dc file.
 */ 1 4 this 3 567  
171 0 0 6 171 513 0 0 172 /**
 * Returns true if this class, or any class in the inheritance heirarchy for
 * this class, is a "bogus" class--a forward reference to an as-yet-undefined
 * class.
 */ 1 4 this 3 567  
172 0 0 4 172 531 0 0 255 /**
 * Starts the PStats timer going on the "generate" task, that is, marks the
 * beginning of the process of generating a new object, for the purposes of
 * timing this process.
 *
 * This should balance with a corresponding call to stop_generate().
 */ 1 4 this 3 519  
173 0 0 4 173 531 0 0 124 /**
 * Stops the PStats timer on the "generate" task.  This should balance with a
 * preceding call to start_generate().
 */ 1 4 this 3 519  
174 0 0 4 174 531 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 567  3 out 1 529  
175 0 0 6 175 513 0 0 108 /**
 * Returns true if the DCClass object has an associated Python class
 * definition, false otherwise.
 */ 1 4 this 3 567  
176 0 0 4 176 531 0 0 141 /**
 * Sets the class object associated with this DistributedClass.  This object
 * will be used to construct new instances of the class.
 */ 2 4 this 3 519  9 class_def 1 533  
177 0 0 6 177 533 0 0 146 /**
 * Returns the class object that was previously associated with this
 * DistributedClass.  This will return a new reference to the object.
 */ 1 4 this 3 567  
178 0 0 6 178 513 0 0 114 /**
 * Returns true if the DCClass object has an associated Python owner class
 * definition, false otherwise.
 */ 1 4 this 3 567  
179 0 0 4 179 531 0 0 153 /**
 * Sets the owner class object associated with this DistributedClass.  This
 * object will be used to construct new owner instances of the class.
 */ 2 4 this 3 519  15 owner_class_def 1 533  
180 0 0 6 180 533 0 0 152 /**
 * Returns the owner class object that was previously associated with this
 * DistributedClass.  This will return a new reference to the object.
 */ 1 4 this 3 567  
181 0 0 4 181 531 0 0 133 /**
 * Extracts the update message out of the packer and applies it to the
 * indicated object by calling the appropriate method.
 */ 3 4 this 3 567  7 distobj 1 533  2 di 1 572  
182 0 0 4 182 531 0 0 224 /**
 * Processes a big datagram that includes all of the "required" fields that
 * are sent along with a normal "generate with required" message.  This is all
 * of the atomic fields that are marked "broadcast required".
 */ 3 4 this 3 567  7 distobj 1 533  2 di 1 572  
183 0 0 4 183 531 0 0 267 /**
 * Processes a big datagram that includes all of the "required" fields that
 * are sent along with a normal "generate with required" message.  This is all
 * of the atomic fields that are marked "broadcast ownrecv". Should be used
 * for 'owner-view' objects.
 */ 3 4 this 3 567  7 distobj 1 533  2 di 1 572  
184 0 0 4 184 531 0 0 222 /**
 * Processes a big datagram that includes all of the "required" fields that
 * are sent when an avatar is created.  This is all of the atomic fields that
 * are marked "required", whether they are broadcast or not.
 */ 3 4 this 3 567  7 distobj 1 533  2 di 1 572  
185 0 0 4 185 531 0 0 101 /**
 * Processes a datagram that lists some additional fields that are broadcast
 * in one chunk.
 */ 3 4 this 3 567  7 distobj 1 533  2 di 1 572  
186 0 0 4 186 531 0 0 72 /**
 * Processes an update for a named field from a packed datagram.
 */ 4 4 this 3 519  7 distobj 1 533  10 field_name 1 501  8 datagram 1 574  
187 0 0 4 186 531 0 0 74 /**
 * Processes an update for a named field from a packed value blob.
 */ 4 4 this 3 519  7 distobj 1 533  10 field_name 1 501  10 value_blob 1 501  
188 0 0 6 187 513 0 0 356 /**
 * Looks up the current value of the indicated field by calling the
 * appropriate get*() function, then packs that value into the packer.  This
 * field is presumably either a required field or a specified optional field,
 * and we are building up a datagram for the generate-with-required message.
 *
 * Returns true on success, false on failure.
 */ 4 4 this 3 567  6 packer 1 532  7 distobj 1 533  5 field 1 505  
189 0 0 6 187 513 0 0 358 /**
 * Looks up the current value of the indicated field by calling the
 * appropriate get*() function, then packs that value into the datagram.  This
 * field is presumably either a required field or a specified optional field,
 * and we are building up a datagram for the generate-with-required message.
 *
 * Returns true on success, false on failure.
 */ 4 4 this 3 567  8 datagram 1 540  7 distobj 1 533  5 field 1 505  
190 0 0 7 188 540 0 0 139 /**
 * Generates a datagram containing the message necessary to send an update for
 * the indicated distributed object from the client.
 */ 4 4 this 3 567  10 field_name 1 501  5 do_id 1 537  4 args 1 533  
191 0 0 7 189 540 0 0 135 /**
 * Generates a datagram containing the message necessary to send an update for
 * the indicated distributed object from the AI.
 */ 6 4 this 3 567  10 field_name 1 501  5 do_id 1 537  5 to_id 1 541  7 from_id 1 541  4 args 1 533  
192 0 0 7 190 540 0 0 168 /**
 * Generates a datagram containing the message necessary to send an update,
 * using the indicated msg type for the indicated distributed object from the
 * AI.
 */ 7 4 this 3 567  10 field_name 1 501  5 do_id 1 537  5 to_id 1 541  7 from_id 1 541  8 msg_type 1 502  4 args 1 533  
193 0 0 7 191 540 0 0 0 8 4 this 3 567  7 distobj 1 533  5 do_id 1 537  9 parent_id 1 576  7 zone_id 1 576  19 district_channel_id 1 541  15 from_channel_id 1 541  15 optional_fields 1 533  
194 0 0 7 192 540 0 0 369 /**
 * Generates a datagram containing the message necessary to generate a new
 * distributed object from the client.  This requires querying the object for
 * the initial value of its required fields.
 *
 * optional_fields is a list of fieldNames to generate in addition to the
 * normal required fields.
 *
 * This method is only called by the CMU implementation.
 */ 5 4 this 3 567  7 distobj 1 533  5 do_id 1 537  7 zone_id 1 576  15 optional_fields 1 533  
195 0 0 7 193 540 0 0 193 /**
 * Generates a datagram containing the message necessary to create a new
 * database distributed object from the AI.
 *
 * First Pass is to only include required values (with Defaults).
 */ 7 4 this 3 567  10 context_id 1 539  9 parent_id 1 537  7 zone_id 1 576  13 owner_channel 1 541  18 database_server_id 1 541  15 from_channel_id 1 541  
196 0 0 7 194 540 0 0 0 6 4 this 3 567  10 context_id 1 539  9 parent_id 1 537  7 zone_id 1 576  18 database_server_id 1 541  15 from_channel_id 1 541  
197 0 0 6 196 567 0 0 62 /**
 * Returns the class object this parameter represents.
 */ 1 4 this 3 511  
198 0 0 7 199 514 431 0 10 /**
 *
 */ 0 
199 0 0 7 199 514 431 0 0 1 6 param0 0 577  
200 0 0 4 201 531 0 0 106 /**
 * Removes all of the classes defined within the DCFile and prepares it for
 * reading a new file.
 */ 1 4 this 3 514  
201 0 0 6 202 513 0 0 146 /**
 * This special method reads all of the .dc files named by the "dc-file"
 * config.prc variable, and loads them into the DCFile namespace.
 */ 1 4 this 3 514  
202 0 0 6 203 513 0 0 327 /**
 * Opens and reads the indicated .dc file by name.  The distributed classes
 * defined in the file will be appended to the set of distributed classes
 * already recorded, if any.
 *
 * Returns true if the file is successfully read, false if there was an error
 * (in which case the file might have been partially read).
 */ 2 4 this 3 514  8 filename 1 579  
203 0 0 6 203 513 0 0 434 /**
 * Parses the already-opened input stream for distributed class descriptions.
 * The filename parameter is optional and is only used when reporting errors.
 *
 * The distributed classes defined in the file will be appended to the set of
 * distributed classes already recorded, if any.
 *
 * Returns true if the file is successfully read, false if there was an error
 * (in which case the file might have been partially read).
 */ 3 4 this 3 514  2 in 1 554  8 filename 1 501  
204 0 0 6 204 513 0 0 218 /**
 * Opens the indicated filename for output and writes a parseable description
 * of all the known distributed classes to the file.
 *
 * Returns true if the description is successfully written, false otherwise.
 */ 3 4 this 3 577  8 filename 1 579  5 brief 1 513  
205 0 0 6 204 513 0 0 176 /**
 * Writes a parseable description of all the known distributed classes to the
 * stream.
 *
 * Returns true if the description is successfully written, false otherwise.
 */ 3 4 this 3 577  3 out 1 529  5 brief 1 513  
206 0 0 6 205 502 0 0 67 /**
 * Returns the number of classes read from the .dc file(s).
 */ 1 4 this 3 577  
207 0 0 6 206 519 0 0 59 /**
 * Returns the nth class read from the .dc file(s).
 */ 2 4 this 3 577  1 n 1 502  
208 0 0 6 207 519 0 0 95 /**
 * Returns the class that has the indicated name, or NULL if there is no such
 * class.
 */ 2 4 this 3 577  4 name 1 501  
209 0 0 6 208 569 0 0 97 /**
 * Returns the switch that has the indicated name, or NULL if there is no such
 * switch.
 */ 2 4 this 3 577  4 name 1 501  
210 0 0 6 209 504 0 0 354 /**
 * Returns a pointer to the one DCField that has the indicated index number,
 * of all the DCFields across all classes in the file.
 *
 * This method is only valid if dc-multiple-inheritance is set true in the
 * Config.prc file.  Without this setting, different DCFields may share the
 * same index number, so this global lookup is not possible.
 */ 2 4 this 3 577  12 index_number 1 502  
211 0 0 6 210 513 0 0 208 /**
 * Returns true if all of the classes read from the DC file were defined and
 * valid, or false if any of them were undefined ("bogus classes").  If this
 * is true, we might have read a partial file.
 */ 1 4 this 3 577  
212 0 0 6 211 502 0 0 72 /**
 * Returns the number of import lines read from the .dc file(s).
 */ 1 4 this 3 577  
213 0 0 6 212 501 0 0 85 /**
 * Returns the module named by the nth import line read from the .dc file(s).
 */ 2 4 this 3 577  1 n 1 502  
214 0 0 6 213 502 0 0 217 /**
 * Returns the number of symbols explicitly imported by the nth import line.
 * If this is 0, the line is "import modulename"; if it is more than 0, the
 * line is "from modulename import symbol, symbol ... ".
 */ 2 4 this 3 577  1 n 1 502  
215 0 0 6 214 501 0 0 92 /**
 * Returns the ith symbol named by the nth import line read from the .dc
 * file(s).
 */ 3 4 this 3 577  1 n 1 502  1 i 1 502  
216 0 0 6 215 502 0 0 68 /**
 * Returns the number of typedefs read from the .dc file(s).
 */ 1 4 this 3 577  
217 0 0 6 216 581 0 0 61 /**
 * Returns the nth typedef read from the .dc file(s).
 */ 2 4 this 3 577  1 n 1 502  
218 0 0 6 217 581 0 0 104 /**
 * Returns the typedef that has the indicated name, or NULL if there is no
 * such typedef name.
 */ 2 4 this 3 577  4 name 1 501  
219 0 0 6 218 502 0 0 68 /**
 * Returns the number of keywords read from the .dc file(s).
 */ 1 4 this 3 577  
220 0 0 6 219 517 0 0 61 /**
 * Returns the nth keyword read from the .dc file(s).
 */ 2 4 this 3 577  1 n 1 502  
221 0 0 6 220 517 0 0 104 /**
 * Returns the keyword that has the indicated name, or NULL if there is no
 * such keyword name.
 */ 2 4 this 3 577  4 name 1 501  
222 0 0 6 221 582 0 0 241 /**
 * Returns a 32-bit hash index associated with this file.  This number is
 * guaranteed to be consistent if the contents of the file have not changed,
 * and it is very likely to be different if the contents of the file do
 * change.
 */ 1 4 this 3 577  
223 0 0 6 223 501 0 0 44 /**
 * Returns the name of this keyword.
 */ 1 4 this 3 517  
224 0 0 6 225 502 0 0 81 /**
 * Returns the number of atomic fields that make up this molecular field.
 */ 1 4 this 3 524  
225 0 0 6 226 520 0 0 178 /**
 * Returns the nth atomic field that makes up this molecular field.  This may
 * or may not be a field of this particular class; it might be defined in a
 * parent class.
 */ 2 4 this 3 524  1 n 1 502  
226 0 0 6 229 479 0 0 78 /**
 * Returns the particular subatomic type represented by this instance.
 */ 1 4 this 3 557  
227 0 0 6 230 513 0 0 75 /**
 * Returns true if there is a modulus associated, false otherwise.,
 */ 1 4 this 3 557  
228 0 0 6 231 551 0 0 269 /**
 * Returns the modulus associated with this type, if any.  It is an error to
 * call this if has_modulus() returned false.
 *
 * If present, this is the modulus that is used to constrain the numeric value
 * of the field before it is packed (and range-checked).
 */ 1 4 this 3 557  
229 0 0 6 232 502 0 0 292 /**
 * Returns the divisor associated with this type.  This is 1 by default, but
 * if this is other than one it represents the scale to apply when packing and
 * unpacking numeric values (to store fixed-point values in an integer field).
 * It is only meaningful for numeric-type fields.
 */ 1 4 this 3 557  
230 0 0 6 235 501 0 0 43 /**
 * Returns the name of this switch.
 */ 1 4 this 3 570  
231 0 0 6 236 504 0 0 189 /**
 * Returns the key parameter on which the switch is based.  The value of this
 * parameter in the record determines which one of the several cases within
 * the switch will be used.
 */ 1 4 this 3 570  
232 0 0 6 237 502 0 0 140 /**
 * Returns the number of different cases within the switch.  The legal values
 * for case_index range from 0 to get_num_cases() - 1.
 */ 1 4 this 3 570  
233 0 0 6 238 502 0 0 116 /**
 * Returns the index number of the case with the indicated packed value, or -1
 * if no case has this value.
 */ 2 4 this 3 570  10 case_value 1 501  
234 0 0 6 239 503 0 0 65 /**
 * Returns the DCPackerInterface that packs the nth case.
 */ 2 4 this 3 570  1 n 1 502  
235 0 0 6 240 503 0 0 109 /**
 * Returns the DCPackerInterface that packs the default case, or NULL if there
 * is no default case.
 */ 1 4 this 3 570  
236 0 0 6 241 501 0 0 71 /**
 * Returns the packed value associated with the indicated case.
 */ 2 4 this 3 570  10 case_index 1 502  
237 0 0 6 242 502 0 0 62 /**
 * Returns the number of fields in the indicated case.
 */ 2 4 this 3 570  10 case_index 1 502  
238 0 0 6 243 504 0 0 55 /**
 * Returns the nth field in the indicated case.
 */ 3 4 this 3 570  10 case_index 1 502  1 n 1 502  
239 0 0 6 244 504 0 0 111 /**
 * Returns the field with the given name from the indicated case, or NULL if
 * no field has this name.
 */ 3 4 this 3 570  10 case_index 1 502  4 name 1 501  
240 0 0 6 246 570 0 0 63 /**
 * Returns the switch object this parameter represents.
 */ 1 4 this 3 508  
241 0 0 6 249 502 0 0 142 /**
 * Returns a unique index number associated with this typedef definition.
 * This is defined implicitly when the .dc file(s) are read.
 */ 1 4 this 3 562  
242 0 0 6 250 501 0 0 44 /**
 * Returns the name of this typedef.
 */ 1 4 this 3 562  
243 0 0 6 251 501 0 0 83 /**
 * Returns a brief decription of the typedef, useful for human consumption.
 */ 1 4 this 3 562  
244 0 0 6 252 513 0 0 259 /**
 * Returns true if the typedef has been flagged as a bogus typedef.  This is
 * set for typedefs that are generated by the parser as placeholder for
 * missing typedefs, as when reading a partial file; it should not occur in a
 * normal valid dc file.
 */ 1 4 this 3 562  
245 0 0 6 253 513 0 0 157 /**
 * Returns true if the typedef has been flagged as an implicit typedef,
 * meaning it was created for a DCClass that was referenced inline as a type.
 */ 1 4 this 3 562  
104
479 15 DCSubatomicType 0 532481 15 DCSubatomicType 15 DCSubatomicType 0 0 0 0 0 0 0 0 0 0 21 7 ST_int8 7 ST_int8 0
0 8 ST_int16 8 ST_int16 0
1 8 ST_int32 8 ST_int32 0
2 8 ST_int64 8 ST_int64 0
3 8 ST_uint8 8 ST_uint8 0
4 9 ST_uint16 9 ST_uint16 0
5 9 ST_uint32 9 ST_uint32 0
6 9 ST_uint64 9 ST_uint64 0
7 10 ST_float64 10 ST_float64 0
8 9 ST_string 9 ST_string 27
// a human-printable string
9 7 ST_blob 7 ST_blob 50
// any variable length message, stored as a string
10 9 ST_blob32 9 ST_blob32 49
// a blob with a 32-bit length, up to 4.2 GB long
11 13 ST_int16array 13 ST_int16array 0
12 13 ST_int32array 13 ST_int32array 0
13 14 ST_uint16array 14 ST_uint16array 0
14 14 ST_uint32array 14 ST_uint32array 0
15 12 ST_int8array 12 ST_int8array 0
16 13 ST_uint8array 13 ST_uint8array 0
17 19 ST_uint32uint8array 19 ST_uint32uint8array 121
// A special-purpose array: a list of alternating uint32 and uint8 values.
// In Python, this becomes a list of 2-tuples.
18 7 ST_char 7 ST_char 73
// Equivalent to uint8, except that it suggests a pack_type of PT_string.
19 10 ST_invalid 10 ST_invalid 0
20 0 188
/**
 * This defines the numeric type of each element of a DCAtomicField; that is,
 * the particular values that will get added to the message when the atomic
 * field method is called.
 */

480 10 DCPackType 0 532481 10 DCPackType 10 DCPackType 0 0 0 0 0 0 0 0 0 0 12 10 PT_invalid 10 PT_invalid 59
// This one should never be returned in a normal situation.
0 9 PT_double 9 PT_double 236
// These PackTypes are all fundamental types, and should be packed (or
// unpacked) with the corresponding call to pack_double(), pack_int(), etc.
// PT_blob is the same as PT_string, but implies that the string contains
// binary data.
1 6 PT_int 6 PT_int 0
2 7 PT_uint 7 PT_uint 0
3 8 PT_int64 8 PT_int64 0
4 9 PT_uint64 9 PT_uint64 0
5 9 PT_string 9 PT_string 0
6 7 PT_blob 7 PT_blob 0
7 8 PT_array 8 PT_array 192
// The remaining PackTypes imply a need to call push() and pop(). They are
// all variants on the same thing: a list of nested fields, but the PackType
// provides a bit of a semantic context.
8 8 PT_field 8 PT_field 0
9 8 PT_class 8 PT_class 0
10 9 PT_switch 9 PT_switch 0
11 0 137
// This enumerated type is returned by get_pack_type() and represents the best
// choice for a subsequent call to pack_*() or unpack_*().

481 17 DCPackerInterface 0 26625 17 DCPackerInterface 17 DCPackerInterface 0 0 0 0 246 0 6 247 248 249 250 251 252 0 0 0 0 0 257
/**
 * This defines the internal interface for packing values into a DCField.  The
 * various different DC objects inherit from this.
 *
 * Normally these methods are called only by the DCPacker object; the user
 * wouldn't normally call these directly.
 */

482 13 DCKeywordList 0 26625 13 DCKeywordList 13 DCKeywordList 0 0 0 0 253 0 5 254 255 256 257 258 0 0 0 0 0 95
/**
 * This is a list of keywords (see DCKeyword) that may be set on a particular
 * field.
 */

483 7 DCField 0 26625 7 DCField 7 DCField 0 0 0 0 263 0 29 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 0 0 2 3 481 259 260 3 482 261 262 0 0 77
/**
 * A single field of a Distributed Class, either atomic or molecular.
 */

484 10 DCPackData 0 26625 10 DCPackData 10 DCPackData 0 0 0 1 293 294 0 3 295 296 297 0 0 0 0 0 73
/**
 * This is a block of data that receives the results of DCPacker.
 */

485 8 DCPacker 0 26625 8 DCPacker 8 DCPacker 0 0 0 1 298 299 0 70 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 0 0 0 0 0 253
/**
 * This class can be used for packing a series of numeric and string data into
 * a binary stream, according to the DC specification.
 *
 * See also direct/src/doc/dcPacker.txt for a more complete description and
 * examples of using this class.
 */

486 11 DCParameter 0 75777 11 DCParameter 11 DCParameter 0 0 0 0 263 0 5 370 371 372 373 374 0 0 1 0 483 0 0 0 0 314
/**
 * Represents the type specification for a single parameter within a field
 * specification.  This may be a simple type, or it may be a class or an array
 * reference.
 *
 * This may also be a typedef reference to another type, which has the same
 * properties as the referenced type, but a different name.
 */

487 16 DCArrayParameter 0 75777 16 DCArrayParameter 16 DCArrayParameter 0 0 0 0 263 0 2 375 376 0 0 1 0 486 0 0 0 0 200
/**
 * This represents an array of some other kind of object, meaning this
 * parameter type accepts an arbitrary (or possibly fixed) number of nested
 * fields, all of which are of the same type.
 */

488 13 DCAtomicField 0 75777 13 DCAtomicField 13 DCAtomicField 0 0 0 0 263 0 7 377 378 379 380 381 382 383 0 0 1 0 483 0 0 0 0 195
/**
 * A single atomic field of a Distributed Class, as read from a .dc file.
 * This defines an interface to the Distributed Class, and is always
 * implemented as a remote procedure method.
 */

489 13 DCDeclaration 0 26625 13 DCDeclaration 13 DCDeclaration 0 0 0 0 384 0 4 385 386 387 388 0 0 0 0 0 369
/**
 * This is a common interface for a declaration in a DC file.  Currently, this
 * is either a class or a typedef declaration (import declarations are still
 * collected together at the top, and don't inherit from this object).  Its
 * only purpose is so that classes and typedefs can be stored in one list
 * together so they can be ordered correctly on output.
 */

490 7 DCClass 0 75777 7 DCClass 7 DCClass 0 0 0 0 384 0 39 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 0 0 1 0 489 0 0 0 0 80
/**
 * Defines a particular DistributedClass as read from an input .dc file.
 */

491 16 DCClassParameter 0 141313 16 DCClassParameter 16 DCClassParameter 0 0 0 0 429 0 1 428 0 0 1 0 486 0 0 0 0 157
/**
 * This represents a class (or struct) object used as a parameter itself.
 * This means that all the fields of the class get packed into the message.
 */

492 6 DCFile 0 26625 6 DCFile 6 DCFile 0 0 0 1 430 431 0 21 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 0 0 0 0 0 101
/**
 * Represents the complete list of Distributed Class descriptions as read from
 * a .dc file.
 */

493 9 DCKeyword 0 75777 9 DCKeyword 9 DCKeyword 0 0 0 0 384 0 1 453 0 0 1 0 489 0 0 0 0 187
/**
 * This represents a single keyword declaration in the dc file.  It is used to
 * define a communication property associated with a field, for instance
 * "broadcast" or "airecv".
 */

494 16 DCMolecularField 0 141313 16 DCMolecularField 16 DCMolecularField 0 0 0 0 456 0 2 454 455 0 0 1 0 483 0 0 0 0 196
/**
 * A single molecular field of a Distributed Class, as read from a .dc file.
 * This represents a combination of two or more related atomic fields, that
 * will often be treated as a unit.
 */

495 17 DCSimpleParameter 0 141313 17 DCSimpleParameter 17 DCSimpleParameter 0 0 0 0 461 0 4 457 458 459 460 0 0 1 0 486 0 0 0 0 282
/**
 * This is the most fundamental kind of parameter type: a single number or
 * string, one of the DCSubatomicType elements.  It may also optionally have a
 * divisor, which is meaningful only for the numeric type elements (and
 * represents a fixed-point numeric convention).
 */

496 8 DCSwitch 0 75777 8 DCSwitch 8 DCSwitch 0 0 0 0 384 0 10 462 463 464 465 466 467 468 469 470 471 0 0 1 0 489 0 0 0 0 177
/**
 * This represents a switch statement, which can appear inside a class body
 * and represents two or more alternative unpacking schemes based on the first
 * field read.
 */

497 17 DCSwitchParameter 0 141313 17 DCSwitchParameter 17 DCSwitchParameter 0 0 0 0 473 0 1 472 0 0 1 0 486 0 0 0 0 140
/**
 * This represents a switch object used as a parameter itself, which packs the
 * appropriate fields of the switch into the message.
 */

498 9 DCTypedef 0 75777 9 DCTypedef 9 DCTypedef 0 0 0 0 384 0 5 474 475 476 477 478 0 0 1 0 489 0 0 0 0 142
/**
 * This represents a single typedef declaration in the dc file.  It assigns a
 * particular type to a new name, just like a C typedef.
 */

499 25 DCPackerInterface const * 0 8576 25 DCPackerInterface const * 25 DCPackerInterface const * 0 0 500 0 0 0 0 0 0 0 0 0 0

500 23 DCPackerInterface const 0 8832 23 DCPackerInterface const 23 DCPackerInterface const 0 0 481 0 0 0 0 0 0 0 0 0 0

501 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

502 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

503 19 DCPackerInterface * 0 8576 19 DCPackerInterface * 19 DCPackerInterface * 0 0 481 0 0 0 0 0 0 0 0 0 0

504 9 DCField * 0 8576 9 DCField * 9 DCField * 0 0 483 0 0 0 0 0 0 0 0 0 0

505 15 DCField const * 0 8576 15 DCField const * 15 DCField const * 0 0 506 0 0 0 0 0 0 0 0 0 0

506 13 DCField const 0 8832 13 DCField const 13 DCField const 0 0 483 0 0 0 0 0 0 0 0 0 0

507 19 DCSwitchParameter * 0 8576 19 DCSwitchParameter * 19 DCSwitchParameter * 0 0 497 0 0 0 0 0 0 0 0 0 0

508 25 DCSwitchParameter const * 0 8576 25 DCSwitchParameter const * 25 DCSwitchParameter const * 0 0 509 0 0 0 0 0 0 0 0 0 0

509 23 DCSwitchParameter const 0 8832 23 DCSwitchParameter const 23 DCSwitchParameter const 0 0 497 0 0 0 0 0 0 0 0 0 0

510 18 DCClassParameter * 0 8576 18 DCClassParameter * 18 DCClassParameter * 0 0 491 0 0 0 0 0 0 0 0 0 0

511 24 DCClassParameter const * 0 8576 24 DCClassParameter const * 24 DCClassParameter const * 0 0 512 0 0 0 0 0 0 0 0 0 0

512 22 DCClassParameter const 0 8832 22 DCClassParameter const 22 DCClassParameter const 0 0 491 0 0 0 0 0 0 0 0 0 0

513 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

514 8 DCFile * 0 8576 8 DCFile * 8 DCFile * 0 0 492 0 0 0 0 0 0 0 0 0 0

515 21 DCKeywordList const * 0 8576 21 DCKeywordList const * 21 DCKeywordList const * 0 0 516 0 0 0 0 0 0 0 0 0 0

516 19 DCKeywordList const 0 8832 19 DCKeywordList const 19 DCKeywordList const 0 0 482 0 0 0 0 0 0 0 0 0 0

517 17 DCKeyword const * 0 8576 17 DCKeyword const * 17 DCKeyword const * 0 0 518 0 0 0 0 0 0 0 0 0 0

518 15 DCKeyword const 0 8832 15 DCKeyword const 15 DCKeyword const 0 0 493 0 0 0 0 0 0 0 0 0 0

519 9 DCClass * 0 8576 9 DCClass * 9 DCClass * 0 0 490 0 0 0 0 0 0 0 0 0 0

520 15 DCAtomicField * 0 8576 15 DCAtomicField * 15 DCAtomicField * 0 0 488 0 0 0 0 0 0 0 0 0 0

521 21 DCAtomicField const * 0 8576 21 DCAtomicField const * 21 DCAtomicField const * 0 0 522 0 0 0 0 0 0 0 0 0 0

522 19 DCAtomicField const 0 8832 19 DCAtomicField const 19 DCAtomicField const 0 0 488 0 0 0 0 0 0 0 0 0 0

523 18 DCMolecularField * 0 8576 18 DCMolecularField * 18 DCMolecularField * 0 0 494 0 0 0 0 0 0 0 0 0 0

524 24 DCMolecularField const * 0 8576 24 DCMolecularField const * 24 DCMolecularField const * 0 0 525 0 0 0 0 0 0 0 0 0 0

525 22 DCMolecularField const 0 8832 22 DCMolecularField const 22 DCMolecularField const 0 0 494 0 0 0 0 0 0 0 0 0 0

526 13 DCParameter * 0 8576 13 DCParameter * 13 DCParameter * 0 0 486 0 0 0 0 0 0 0 0 0 0

527 19 DCParameter const * 0 8576 19 DCParameter const * 19 DCParameter const * 0 0 528 0 0 0 0 0 0 0 0 0 0

528 17 DCParameter const 0 8832 17 DCParameter const 17 DCParameter const 0 0 486 0 0 0 0 0 0 0 0 0 0

529 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 530 0 0 0 0 0 0 0 0 0 0

530 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

531 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

532 10 DCPacker * 0 8576 10 DCPacker * 10 DCPacker * 0 0 485 0 0 0 0 0 0 0 0 0 0

533 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 534 0 0 0 0 0 0 0 0 0 0

534 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 535 0 0 0 0 0 0 0 0 0 0

535 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

536 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

537 9 DOID_TYPE 0 2105344 9 DOID_TYPE 9 DOID_TYPE 0 0 538 0 0 0 0 0 0 0 0 0 0

538 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 539 0 0 0 0 0 0 0 0 0 0

539 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

540 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 536 0 0 0 0 0 0 0 0 0 0

541 12 CHANNEL_TYPE 0 2105344 12 CHANNEL_TYPE 12 CHANNEL_TYPE 0 0 542 0 0 0 0 0 0 0 0 0 0

542 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 543 0 0 0 0 0 0 0 0 0 0

543 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

544 15 DCKeywordList * 0 8576 15 DCKeywordList * 15 DCKeywordList * 0 0 482 0 0 0 0 0 0 0 0 0 0

545 12 DCPackData * 0 8576 12 DCPackData * 12 DCPackData * 0 0 484 0 0 0 0 0 0 0 0 0 0

546 18 DCPackData const * 0 8576 18 DCPackData const * 18 DCPackData const * 0 0 547 0 0 0 0 0 0 0 0 0 0

547 16 DCPackData const 0 8832 16 DCPackData const 16 DCPackData const 0 0 484 0 0 0 0 0 0 0 0 0 0

548 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 543 0 0 0 0 0 0 0 0 0 0

549 16 DCPacker const * 0 8576 16 DCPacker const * 16 DCPacker const * 0 0 550 0 0 0 0 0 0 0 0 0 0

550 14 DCPacker const 0 8832 14 DCPacker const 14 DCPacker const 0 0 485 0 0 0 0 0 0 0 0 0 0

551 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

552 7 int64_t 0 2105344 7 int64_t 7 int64_t 0 0 553 0 0 0 0 0 0 0 0 0 0

553 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

554 9 istream * 0 8576 9 istream * 9 istream * 0 0 555 0 0 0 0 0 0 0 0 0 0

555 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

556 19 DCSimpleParameter * 0 8576 19 DCSimpleParameter * 19 DCSimpleParameter * 0 0 495 0 0 0 0 0 0 0 0 0 0

557 25 DCSimpleParameter const * 0 8576 25 DCSimpleParameter const * 25 DCSimpleParameter const * 0 0 558 0 0 0 0 0 0 0 0 0 0

558 23 DCSimpleParameter const 0 8832 23 DCSimpleParameter const 23 DCSimpleParameter const 0 0 495 0 0 0 0 0 0 0 0 0 0

559 18 DCArrayParameter * 0 8576 18 DCArrayParameter * 18 DCArrayParameter * 0 0 487 0 0 0 0 0 0 0 0 0 0

560 24 DCArrayParameter const * 0 8576 24 DCArrayParameter const * 24 DCArrayParameter const * 0 0 561 0 0 0 0 0 0 0 0 0 0

561 22 DCArrayParameter const 0 8832 22 DCArrayParameter const 22 DCArrayParameter const 0 0 487 0 0 0 0 0 0 0 0 0 0

562 17 DCTypedef const * 0 8576 17 DCTypedef const * 17 DCTypedef const * 0 0 563 0 0 0 0 0 0 0 0 0 0

563 15 DCTypedef const 0 8832 15 DCTypedef const 15 DCTypedef const 0 0 498 0 0 0 0 0 0 0 0 0 0

564 15 DCDeclaration * 0 8576 15 DCDeclaration * 15 DCDeclaration * 0 0 489 0 0 0 0 0 0 0 0 0 0

565 21 DCDeclaration const * 0 8576 21 DCDeclaration const * 21 DCDeclaration const * 0 0 566 0 0 0 0 0 0 0 0 0 0

566 19 DCDeclaration const 0 8832 19 DCDeclaration const 19 DCDeclaration const 0 0 489 0 0 0 0 0 0 0 0 0 0

567 15 DCClass const * 0 8576 15 DCClass const * 15 DCClass const * 0 0 568 0 0 0 0 0 0 0 0 0 0

568 13 DCClass const 0 8832 13 DCClass const 13 DCClass const 0 0 490 0 0 0 0 0 0 0 0 0 0

569 10 DCSwitch * 0 8576 10 DCSwitch * 10 DCSwitch * 0 0 496 0 0 0 0 0 0 0 0 0 0

570 16 DCSwitch const * 0 8576 16 DCSwitch const * 16 DCSwitch const * 0 0 571 0 0 0 0 0 0 0 0 0 0

571 14 DCSwitch const 0 8832 14 DCSwitch const 14 DCSwitch const 0 0 496 0 0 0 0 0 0 0 0 0 0

572 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 573 0 0 0 0 0 0 0 0 0 0

573 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 215
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 */

574 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 575 0 0 0 0 0 0 0 0 0 0

575 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 536 0 0 0 0 0 0 0 0 0 0

576 11 ZONEID_TYPE 0 2105344 11 ZONEID_TYPE 11 ZONEID_TYPE 0 0 538 0 0 0 0 0 0 0 0 0 0

577 14 DCFile const * 0 8576 14 DCFile const * 14 DCFile const * 0 0 578 0 0 0 0 0 0 0 0 0 0

578 12 DCFile const 0 8832 12 DCFile const 12 DCFile const 0 0 492 0 0 0 0 0 0 0 0 0 0

579 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 580 0 0 0 0 0 0 0 0 0 0

580 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

581 11 DCTypedef * 0 8576 11 DCTypedef * 11 DCTypedef * 0 0 498 0 0 0 0 0 0 0 0 0 0

582 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

0
0
0
