1508344839
3 2
13 libp3mathutil 4 LL_p 12 panda3d.core 
656
696 5 clear 0 4 1354 59 PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear 0 1 12 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear(void);

697 6 output 0 4 1354 60 PointerToBase< ReferenceCountedVector< LMatrix3d > >::output 0 1 13 0
86
void PointerToBase< ReferenceCountedVector< LMatrix3d > >::output(ostream &out) const;

698 19 ~PointerToArrayBase 0 4 1353 52 PointerToArrayBase< LMatrix3d >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3d >::~PointerToArrayBase(void);

699 19 ConstPointerToArray 0 4 1352 53 ConstPointerToArray< LMatrix3d >::ConstPointerToArray 0 2 1 2 0
210
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PointerToArray< LMatrix3d > const &copy);
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(ConstPointerToArray< LMatrix3d > const &copy);

700 4 size 0 4 1352 38 ConstPointerToArray< LMatrix3d >::size 0 1 3 0
81
inline unsigned long long int ConstPointerToArray< LMatrix3d >::size(void) const;

701 11 get_element 0 4 1352 45 ConstPointerToArray< LMatrix3d >::get_element 0 1 4 0
102
inline LMatrix3d const &ConstPointerToArray< LMatrix3d >::get_element(unsigned long long int n) const;

702 11 __getitem__ 0 4 1352 45 ConstPointerToArray< LMatrix3d >::__getitem__ 0 1 5 0
95
LMatrix3d const &ConstPointerToArray< LMatrix3d >::__getitem__(unsigned long long int n) const;

703 8 get_data 0 4 1352 42 ConstPointerToArray< LMatrix3d >::get_data 0 1 6 0
65
PyObject *ConstPointerToArray< LMatrix3d >::get_data(void) const;

704 11 get_subdata 0 4 1352 45 ConstPointerToArray< LMatrix3d >::get_subdata 0 1 7 0
118
PyObject *ConstPointerToArray< LMatrix3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

705 13 get_ref_count 0 4 1352 47 ConstPointerToArray< LMatrix3d >::get_ref_count 0 1 8 0
71
inline int ConstPointerToArray< LMatrix3d >::get_ref_count(void) const;

706 18 get_node_ref_count 0 4 1352 52 ConstPointerToArray< LMatrix3d >::get_node_ref_count 0 1 9 0
76
inline int ConstPointerToArray< LMatrix3d >::get_node_ref_count(void) const;

707 13 __getbuffer__ 0 4 1352 47 ConstPointerToArray< LMatrix3d >::__getbuffer__ 0 1 10 0
102
int ConstPointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

708 17 __releasebuffer__ 0 4 1352 51 ConstPointerToArray< LMatrix3d >::__releasebuffer__ 0 1 11 0
96
void ConstPointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

709 20 ~ConstPointerToArray 0 4 1352 54 ConstPointerToArray< LMatrix3d >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3d >::~ConstPointerToArray(void);

710 5 clear 0 4 1358 59 PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear 0 1 25 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear(void);

711 6 output 0 4 1358 60 PointerToBase< ReferenceCountedVector< LMatrix3f > >::output 0 1 26 0
86
void PointerToBase< ReferenceCountedVector< LMatrix3f > >::output(ostream &out) const;

712 19 ~PointerToArrayBase 0 4 1357 52 PointerToArrayBase< LMatrix3f >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3f >::~PointerToArrayBase(void);

713 19 ConstPointerToArray 0 4 1356 53 ConstPointerToArray< LMatrix3f >::ConstPointerToArray 0 2 14 15 0
210
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PointerToArray< LMatrix3f > const &copy);
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(ConstPointerToArray< LMatrix3f > const &copy);

714 4 size 0 4 1356 38 ConstPointerToArray< LMatrix3f >::size 0 1 16 0
81
inline unsigned long long int ConstPointerToArray< LMatrix3f >::size(void) const;

715 11 get_element 0 4 1356 45 ConstPointerToArray< LMatrix3f >::get_element 0 1 17 0
102
inline LMatrix3f const &ConstPointerToArray< LMatrix3f >::get_element(unsigned long long int n) const;

716 11 __getitem__ 0 4 1356 45 ConstPointerToArray< LMatrix3f >::__getitem__ 0 1 18 0
95
LMatrix3f const &ConstPointerToArray< LMatrix3f >::__getitem__(unsigned long long int n) const;

717 8 get_data 0 4 1356 42 ConstPointerToArray< LMatrix3f >::get_data 0 1 19 0
65
PyObject *ConstPointerToArray< LMatrix3f >::get_data(void) const;

718 11 get_subdata 0 4 1356 45 ConstPointerToArray< LMatrix3f >::get_subdata 0 1 20 0
118
PyObject *ConstPointerToArray< LMatrix3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

719 13 get_ref_count 0 4 1356 47 ConstPointerToArray< LMatrix3f >::get_ref_count 0 1 21 0
71
inline int ConstPointerToArray< LMatrix3f >::get_ref_count(void) const;

720 18 get_node_ref_count 0 4 1356 52 ConstPointerToArray< LMatrix3f >::get_node_ref_count 0 1 22 0
76
inline int ConstPointerToArray< LMatrix3f >::get_node_ref_count(void) const;

721 13 __getbuffer__ 0 4 1356 47 ConstPointerToArray< LMatrix3f >::__getbuffer__ 0 1 23 0
102
int ConstPointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

722 17 __releasebuffer__ 0 4 1356 51 ConstPointerToArray< LMatrix3f >::__releasebuffer__ 0 1 24 0
96
void ConstPointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

723 20 ~ConstPointerToArray 0 4 1356 54 ConstPointerToArray< LMatrix3f >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3f >::~ConstPointerToArray(void);

724 5 clear 0 4 1361 60 PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear 0 1 38 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear(void);

725 6 output 0 4 1361 61 PointerToBase< ReferenceCountedVector< LVecBase2d > >::output 0 1 39 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2d > >::output(ostream &out) const;

726 19 ~PointerToArrayBase 0 4 1360 53 PointerToArrayBase< LVecBase2d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2d >::~PointerToArrayBase(void);

727 19 ConstPointerToArray 0 4 1359 54 ConstPointerToArray< LVecBase2d >::ConstPointerToArray 0 2 27 28 0
214
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PointerToArray< LVecBase2d > const &copy);
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(ConstPointerToArray< LVecBase2d > const &copy);

728 4 size 0 4 1359 39 ConstPointerToArray< LVecBase2d >::size 0 1 29 0
82
inline unsigned long long int ConstPointerToArray< LVecBase2d >::size(void) const;

729 11 get_element 0 4 1359 46 ConstPointerToArray< LVecBase2d >::get_element 0 1 30 0
104
inline LVecBase2d const &ConstPointerToArray< LVecBase2d >::get_element(unsigned long long int n) const;

730 11 __getitem__ 0 4 1359 46 ConstPointerToArray< LVecBase2d >::__getitem__ 0 1 31 0
97
LVecBase2d const &ConstPointerToArray< LVecBase2d >::__getitem__(unsigned long long int n) const;

731 8 get_data 0 4 1359 43 ConstPointerToArray< LVecBase2d >::get_data 0 1 32 0
66
PyObject *ConstPointerToArray< LVecBase2d >::get_data(void) const;

732 11 get_subdata 0 4 1359 46 ConstPointerToArray< LVecBase2d >::get_subdata 0 1 33 0
119
PyObject *ConstPointerToArray< LVecBase2d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

733 13 get_ref_count 0 4 1359 48 ConstPointerToArray< LVecBase2d >::get_ref_count 0 1 34 0
72
inline int ConstPointerToArray< LVecBase2d >::get_ref_count(void) const;

734 18 get_node_ref_count 0 4 1359 53 ConstPointerToArray< LVecBase2d >::get_node_ref_count 0 1 35 0
77
inline int ConstPointerToArray< LVecBase2d >::get_node_ref_count(void) const;

735 13 __getbuffer__ 0 4 1359 48 ConstPointerToArray< LVecBase2d >::__getbuffer__ 0 1 36 0
103
int ConstPointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

736 17 __releasebuffer__ 0 4 1359 52 ConstPointerToArray< LVecBase2d >::__releasebuffer__ 0 1 37 0
97
void ConstPointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

737 20 ~ConstPointerToArray 0 4 1359 55 ConstPointerToArray< LVecBase2d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2d >::~ConstPointerToArray(void);

738 5 clear 0 4 1364 60 PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear 0 1 51 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear(void);

739 6 output 0 4 1364 61 PointerToBase< ReferenceCountedVector< LVecBase2f > >::output 0 1 52 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2f > >::output(ostream &out) const;

740 19 ~PointerToArrayBase 0 4 1363 53 PointerToArrayBase< LVecBase2f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2f >::~PointerToArrayBase(void);

741 19 ConstPointerToArray 0 4 1362 54 ConstPointerToArray< LVecBase2f >::ConstPointerToArray 0 2 40 41 0
214
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PointerToArray< LVecBase2f > const &copy);
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(ConstPointerToArray< LVecBase2f > const &copy);

742 4 size 0 4 1362 39 ConstPointerToArray< LVecBase2f >::size 0 1 42 0
82
inline unsigned long long int ConstPointerToArray< LVecBase2f >::size(void) const;

743 11 get_element 0 4 1362 46 ConstPointerToArray< LVecBase2f >::get_element 0 1 43 0
104
inline LVecBase2f const &ConstPointerToArray< LVecBase2f >::get_element(unsigned long long int n) const;

744 11 __getitem__ 0 4 1362 46 ConstPointerToArray< LVecBase2f >::__getitem__ 0 1 44 0
97
LVecBase2f const &ConstPointerToArray< LVecBase2f >::__getitem__(unsigned long long int n) const;

745 8 get_data 0 4 1362 43 ConstPointerToArray< LVecBase2f >::get_data 0 1 45 0
66
PyObject *ConstPointerToArray< LVecBase2f >::get_data(void) const;

746 11 get_subdata 0 4 1362 46 ConstPointerToArray< LVecBase2f >::get_subdata 0 1 46 0
119
PyObject *ConstPointerToArray< LVecBase2f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

747 13 get_ref_count 0 4 1362 48 ConstPointerToArray< LVecBase2f >::get_ref_count 0 1 47 0
72
inline int ConstPointerToArray< LVecBase2f >::get_ref_count(void) const;

748 18 get_node_ref_count 0 4 1362 53 ConstPointerToArray< LVecBase2f >::get_node_ref_count 0 1 48 0
77
inline int ConstPointerToArray< LVecBase2f >::get_node_ref_count(void) const;

749 13 __getbuffer__ 0 4 1362 48 ConstPointerToArray< LVecBase2f >::__getbuffer__ 0 1 49 0
103
int ConstPointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

750 17 __releasebuffer__ 0 4 1362 52 ConstPointerToArray< LVecBase2f >::__releasebuffer__ 0 1 50 0
97
void ConstPointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

751 20 ~ConstPointerToArray 0 4 1362 55 ConstPointerToArray< LVecBase2f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2f >::~ConstPointerToArray(void);

752 5 clear 0 4 1367 60 PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear 0 1 64 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear(void);

753 6 output 0 4 1367 61 PointerToBase< ReferenceCountedVector< LVecBase2i > >::output 0 1 65 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2i > >::output(ostream &out) const;

754 19 ~PointerToArrayBase 0 4 1366 53 PointerToArrayBase< LVecBase2i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2i >::~PointerToArrayBase(void);

755 19 ConstPointerToArray 0 4 1365 54 ConstPointerToArray< LVecBase2i >::ConstPointerToArray 0 2 53 54 0
214
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(PointerToArray< LVecBase2i > const &copy);
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(ConstPointerToArray< LVecBase2i > const &copy);

756 4 size 0 4 1365 39 ConstPointerToArray< LVecBase2i >::size 0 1 55 0
82
inline unsigned long long int ConstPointerToArray< LVecBase2i >::size(void) const;

757 11 get_element 0 4 1365 46 ConstPointerToArray< LVecBase2i >::get_element 0 1 56 0
104
inline LVecBase2i const &ConstPointerToArray< LVecBase2i >::get_element(unsigned long long int n) const;

758 11 __getitem__ 0 4 1365 46 ConstPointerToArray< LVecBase2i >::__getitem__ 0 1 57 0
97
LVecBase2i const &ConstPointerToArray< LVecBase2i >::__getitem__(unsigned long long int n) const;

759 8 get_data 0 4 1365 43 ConstPointerToArray< LVecBase2i >::get_data 0 1 58 0
66
PyObject *ConstPointerToArray< LVecBase2i >::get_data(void) const;

760 11 get_subdata 0 4 1365 46 ConstPointerToArray< LVecBase2i >::get_subdata 0 1 59 0
119
PyObject *ConstPointerToArray< LVecBase2i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

761 13 get_ref_count 0 4 1365 48 ConstPointerToArray< LVecBase2i >::get_ref_count 0 1 60 0
72
inline int ConstPointerToArray< LVecBase2i >::get_ref_count(void) const;

762 18 get_node_ref_count 0 4 1365 53 ConstPointerToArray< LVecBase2i >::get_node_ref_count 0 1 61 0
77
inline int ConstPointerToArray< LVecBase2i >::get_node_ref_count(void) const;

763 13 __getbuffer__ 0 4 1365 48 ConstPointerToArray< LVecBase2i >::__getbuffer__ 0 1 62 0
103
int ConstPointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

764 17 __releasebuffer__ 0 4 1365 52 ConstPointerToArray< LVecBase2i >::__releasebuffer__ 0 1 63 0
97
void ConstPointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

765 20 ~ConstPointerToArray 0 4 1365 55 ConstPointerToArray< LVecBase2i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2i >::~ConstPointerToArray(void);

766 5 clear 0 4 1370 60 PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear 0 1 77 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear(void);

767 6 output 0 4 1370 61 PointerToBase< ReferenceCountedVector< LVecBase3d > >::output 0 1 78 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3d > >::output(ostream &out) const;

768 19 ~PointerToArrayBase 0 4 1369 53 PointerToArrayBase< LVecBase3d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3d >::~PointerToArrayBase(void);

769 19 ConstPointerToArray 0 4 1368 54 ConstPointerToArray< LVecBase3d >::ConstPointerToArray 0 2 66 67 0
214
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PointerToArray< LVecBase3d > const &copy);
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(ConstPointerToArray< LVecBase3d > const &copy);

770 4 size 0 4 1368 39 ConstPointerToArray< LVecBase3d >::size 0 1 68 0
82
inline unsigned long long int ConstPointerToArray< LVecBase3d >::size(void) const;

771 11 get_element 0 4 1368 46 ConstPointerToArray< LVecBase3d >::get_element 0 1 69 0
104
inline LVecBase3d const &ConstPointerToArray< LVecBase3d >::get_element(unsigned long long int n) const;

772 11 __getitem__ 0 4 1368 46 ConstPointerToArray< LVecBase3d >::__getitem__ 0 1 70 0
97
LVecBase3d const &ConstPointerToArray< LVecBase3d >::__getitem__(unsigned long long int n) const;

773 8 get_data 0 4 1368 43 ConstPointerToArray< LVecBase3d >::get_data 0 1 71 0
66
PyObject *ConstPointerToArray< LVecBase3d >::get_data(void) const;

774 11 get_subdata 0 4 1368 46 ConstPointerToArray< LVecBase3d >::get_subdata 0 1 72 0
119
PyObject *ConstPointerToArray< LVecBase3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

775 13 get_ref_count 0 4 1368 48 ConstPointerToArray< LVecBase3d >::get_ref_count 0 1 73 0
72
inline int ConstPointerToArray< LVecBase3d >::get_ref_count(void) const;

776 18 get_node_ref_count 0 4 1368 53 ConstPointerToArray< LVecBase3d >::get_node_ref_count 0 1 74 0
77
inline int ConstPointerToArray< LVecBase3d >::get_node_ref_count(void) const;

777 13 __getbuffer__ 0 4 1368 48 ConstPointerToArray< LVecBase3d >::__getbuffer__ 0 1 75 0
103
int ConstPointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

778 17 __releasebuffer__ 0 4 1368 52 ConstPointerToArray< LVecBase3d >::__releasebuffer__ 0 1 76 0
97
void ConstPointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

779 20 ~ConstPointerToArray 0 4 1368 55 ConstPointerToArray< LVecBase3d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3d >::~ConstPointerToArray(void);

780 5 clear 0 4 1373 60 PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear 0 1 90 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear(void);

781 6 output 0 4 1373 61 PointerToBase< ReferenceCountedVector< LVecBase3f > >::output 0 1 91 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3f > >::output(ostream &out) const;

782 19 ~PointerToArrayBase 0 4 1372 53 PointerToArrayBase< LVecBase3f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3f >::~PointerToArrayBase(void);

783 19 ConstPointerToArray 0 4 1371 54 ConstPointerToArray< LVecBase3f >::ConstPointerToArray 0 2 79 80 0
214
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PointerToArray< LVecBase3f > const &copy);
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(ConstPointerToArray< LVecBase3f > const &copy);

784 4 size 0 4 1371 39 ConstPointerToArray< LVecBase3f >::size 0 1 81 0
82
inline unsigned long long int ConstPointerToArray< LVecBase3f >::size(void) const;

785 11 get_element 0 4 1371 46 ConstPointerToArray< LVecBase3f >::get_element 0 1 82 0
104
inline LVecBase3f const &ConstPointerToArray< LVecBase3f >::get_element(unsigned long long int n) const;

786 11 __getitem__ 0 4 1371 46 ConstPointerToArray< LVecBase3f >::__getitem__ 0 1 83 0
97
LVecBase3f const &ConstPointerToArray< LVecBase3f >::__getitem__(unsigned long long int n) const;

787 8 get_data 0 4 1371 43 ConstPointerToArray< LVecBase3f >::get_data 0 1 84 0
66
PyObject *ConstPointerToArray< LVecBase3f >::get_data(void) const;

788 11 get_subdata 0 4 1371 46 ConstPointerToArray< LVecBase3f >::get_subdata 0 1 85 0
119
PyObject *ConstPointerToArray< LVecBase3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

789 13 get_ref_count 0 4 1371 48 ConstPointerToArray< LVecBase3f >::get_ref_count 0 1 86 0
72
inline int ConstPointerToArray< LVecBase3f >::get_ref_count(void) const;

790 18 get_node_ref_count 0 4 1371 53 ConstPointerToArray< LVecBase3f >::get_node_ref_count 0 1 87 0
77
inline int ConstPointerToArray< LVecBase3f >::get_node_ref_count(void) const;

791 13 __getbuffer__ 0 4 1371 48 ConstPointerToArray< LVecBase3f >::__getbuffer__ 0 1 88 0
103
int ConstPointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

792 17 __releasebuffer__ 0 4 1371 52 ConstPointerToArray< LVecBase3f >::__releasebuffer__ 0 1 89 0
97
void ConstPointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

793 20 ~ConstPointerToArray 0 4 1371 55 ConstPointerToArray< LVecBase3f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3f >::~ConstPointerToArray(void);

794 5 clear 0 4 1376 60 PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear 0 1 103 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear(void);

795 6 output 0 4 1376 61 PointerToBase< ReferenceCountedVector< LVecBase3i > >::output 0 1 104 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3i > >::output(ostream &out) const;

796 19 ~PointerToArrayBase 0 4 1375 53 PointerToArrayBase< LVecBase3i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3i >::~PointerToArrayBase(void);

797 19 ConstPointerToArray 0 4 1374 54 ConstPointerToArray< LVecBase3i >::ConstPointerToArray 0 2 92 93 0
214
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(PointerToArray< LVecBase3i > const &copy);
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(ConstPointerToArray< LVecBase3i > const &copy);

798 4 size 0 4 1374 39 ConstPointerToArray< LVecBase3i >::size 0 1 94 0
82
inline unsigned long long int ConstPointerToArray< LVecBase3i >::size(void) const;

799 11 get_element 0 4 1374 46 ConstPointerToArray< LVecBase3i >::get_element 0 1 95 0
104
inline LVecBase3i const &ConstPointerToArray< LVecBase3i >::get_element(unsigned long long int n) const;

800 11 __getitem__ 0 4 1374 46 ConstPointerToArray< LVecBase3i >::__getitem__ 0 1 96 0
97
LVecBase3i const &ConstPointerToArray< LVecBase3i >::__getitem__(unsigned long long int n) const;

801 8 get_data 0 4 1374 43 ConstPointerToArray< LVecBase3i >::get_data 0 1 97 0
66
PyObject *ConstPointerToArray< LVecBase3i >::get_data(void) const;

802 11 get_subdata 0 4 1374 46 ConstPointerToArray< LVecBase3i >::get_subdata 0 1 98 0
119
PyObject *ConstPointerToArray< LVecBase3i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

803 13 get_ref_count 0 4 1374 48 ConstPointerToArray< LVecBase3i >::get_ref_count 0 1 99 0
72
inline int ConstPointerToArray< LVecBase3i >::get_ref_count(void) const;

804 18 get_node_ref_count 0 4 1374 53 ConstPointerToArray< LVecBase3i >::get_node_ref_count 0 1 100 0
77
inline int ConstPointerToArray< LVecBase3i >::get_node_ref_count(void) const;

805 13 __getbuffer__ 0 4 1374 48 ConstPointerToArray< LVecBase3i >::__getbuffer__ 0 1 101 0
103
int ConstPointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

806 17 __releasebuffer__ 0 4 1374 52 ConstPointerToArray< LVecBase3i >::__releasebuffer__ 0 1 102 0
97
void ConstPointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

807 20 ~ConstPointerToArray 0 4 1374 55 ConstPointerToArray< LVecBase3i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3i >::~ConstPointerToArray(void);

808 5 clear 0 4 1379 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear 0 1 116 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear(void);

809 6 output 0 4 1379 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output 0 1 117 0
95
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output(ostream &out) const;

810 19 ~PointerToArrayBase 0 4 1378 61 PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase(void);

811 19 ConstPointerToArray 0 4 1377 62 ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray 0 2 105 106 0
246
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4d > const &copy);

812 4 size 0 4 1377 47 ConstPointerToArray< UnalignedLMatrix4d >::size 0 1 107 0
90
inline unsigned long long int ConstPointerToArray< UnalignedLMatrix4d >::size(void) const;

813 11 get_element 0 4 1377 54 ConstPointerToArray< UnalignedLMatrix4d >::get_element 0 1 108 0
120
inline UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::get_element(unsigned long long int n) const;

814 11 __getitem__ 0 4 1377 54 ConstPointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 109 0
113
UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long long int n) const;

815 8 get_data 0 4 1377 51 ConstPointerToArray< UnalignedLMatrix4d >::get_data 0 1 110 0
74
PyObject *ConstPointerToArray< UnalignedLMatrix4d >::get_data(void) const;

816 11 get_subdata 0 4 1377 54 ConstPointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 111 0
127
PyObject *ConstPointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

817 13 get_ref_count 0 4 1377 56 ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 112 0
80
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

818 18 get_node_ref_count 0 4 1377 61 ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 113 0
85
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

819 13 __getbuffer__ 0 4 1377 56 ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 114 0
111
int ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

820 17 __releasebuffer__ 0 4 1377 60 ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 115 0
105
void ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

821 20 ~ConstPointerToArray 0 4 1377 63 ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray(void);

822 5 clear 0 4 1382 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear 0 1 129 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear(void);

823 6 output 0 4 1382 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output 0 1 130 0
95
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output(ostream &out) const;

824 19 ~PointerToArrayBase 0 4 1381 61 PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase(void);

825 19 ConstPointerToArray 0 4 1380 62 ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray 0 2 118 119 0
246
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4f > const &copy);

826 4 size 0 4 1380 47 ConstPointerToArray< UnalignedLMatrix4f >::size 0 1 120 0
90
inline unsigned long long int ConstPointerToArray< UnalignedLMatrix4f >::size(void) const;

827 11 get_element 0 4 1380 54 ConstPointerToArray< UnalignedLMatrix4f >::get_element 0 1 121 0
120
inline UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::get_element(unsigned long long int n) const;

828 11 __getitem__ 0 4 1380 54 ConstPointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 122 0
113
UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long long int n) const;

829 8 get_data 0 4 1380 51 ConstPointerToArray< UnalignedLMatrix4f >::get_data 0 1 123 0
74
PyObject *ConstPointerToArray< UnalignedLMatrix4f >::get_data(void) const;

830 11 get_subdata 0 4 1380 54 ConstPointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 124 0
127
PyObject *ConstPointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

831 13 get_ref_count 0 4 1380 56 ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 125 0
80
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

832 18 get_node_ref_count 0 4 1380 61 ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 126 0
85
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

833 13 __getbuffer__ 0 4 1380 56 ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 127 0
111
int ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

834 17 __releasebuffer__ 0 4 1380 60 ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 128 0
105
void ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

835 20 ~ConstPointerToArray 0 4 1380 63 ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray(void);

836 5 clear 0 4 1385 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear 0 1 142 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear(void);

837 6 output 0 4 1385 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output 0 1 143 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output(ostream &out) const;

838 19 ~PointerToArrayBase 0 4 1384 62 PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase(void);

839 19 ConstPointerToArray 0 4 1383 63 ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray 0 2 131 132 0
250
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4d > const &copy);

840 4 size 0 4 1383 48 ConstPointerToArray< UnalignedLVecBase4d >::size 0 1 133 0
91
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4d >::size(void) const;

841 11 get_element 0 4 1383 55 ConstPointerToArray< UnalignedLVecBase4d >::get_element 0 1 134 0
122
inline UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::get_element(unsigned long long int n) const;

842 11 __getitem__ 0 4 1383 55 ConstPointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 135 0
115
UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long long int n) const;

843 8 get_data 0 4 1383 52 ConstPointerToArray< UnalignedLVecBase4d >::get_data 0 1 136 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4d >::get_data(void) const;

844 11 get_subdata 0 4 1383 55 ConstPointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 137 0
128
PyObject *ConstPointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

845 13 get_ref_count 0 4 1383 57 ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 138 0
81
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

846 18 get_node_ref_count 0 4 1383 62 ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 139 0
86
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

847 13 __getbuffer__ 0 4 1383 57 ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 140 0
112
int ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

848 17 __releasebuffer__ 0 4 1383 61 ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 141 0
106
void ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

849 20 ~ConstPointerToArray 0 4 1383 64 ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray(void);

850 5 clear 0 4 1388 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear 0 1 155 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear(void);

851 6 output 0 4 1388 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output 0 1 156 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output(ostream &out) const;

852 19 ~PointerToArrayBase 0 4 1387 62 PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase(void);

853 19 ConstPointerToArray 0 4 1386 63 ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray 0 2 144 145 0
250
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4f > const &copy);

854 4 size 0 4 1386 48 ConstPointerToArray< UnalignedLVecBase4f >::size 0 1 146 0
91
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4f >::size(void) const;

855 11 get_element 0 4 1386 55 ConstPointerToArray< UnalignedLVecBase4f >::get_element 0 1 147 0
122
inline UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::get_element(unsigned long long int n) const;

856 11 __getitem__ 0 4 1386 55 ConstPointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 148 0
115
UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long long int n) const;

857 8 get_data 0 4 1386 52 ConstPointerToArray< UnalignedLVecBase4f >::get_data 0 1 149 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4f >::get_data(void) const;

858 11 get_subdata 0 4 1386 55 ConstPointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 150 0
128
PyObject *ConstPointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

859 13 get_ref_count 0 4 1386 57 ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 151 0
81
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

860 18 get_node_ref_count 0 4 1386 62 ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 152 0
86
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

861 13 __getbuffer__ 0 4 1386 57 ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 153 0
112
int ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

862 17 __releasebuffer__ 0 4 1386 61 ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 154 0
106
void ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

863 20 ~ConstPointerToArray 0 4 1386 64 ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray(void);

864 5 clear 0 4 1391 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear 0 1 168 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear(void);

865 6 output 0 4 1391 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output 0 1 169 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output(ostream &out) const;

866 19 ~PointerToArrayBase 0 4 1390 62 PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase(void);

867 19 ConstPointerToArray 0 4 1389 63 ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray 0 2 157 158 0
250
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4i > const &copy);

868 4 size 0 4 1389 48 ConstPointerToArray< UnalignedLVecBase4i >::size 0 1 159 0
91
inline unsigned long long int ConstPointerToArray< UnalignedLVecBase4i >::size(void) const;

869 11 get_element 0 4 1389 55 ConstPointerToArray< UnalignedLVecBase4i >::get_element 0 1 160 0
122
inline UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::get_element(unsigned long long int n) const;

870 11 __getitem__ 0 4 1389 55 ConstPointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 161 0
115
UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long long int n) const;

871 8 get_data 0 4 1389 52 ConstPointerToArray< UnalignedLVecBase4i >::get_data 0 1 162 0
75
PyObject *ConstPointerToArray< UnalignedLVecBase4i >::get_data(void) const;

872 11 get_subdata 0 4 1389 55 ConstPointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 163 0
128
PyObject *ConstPointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

873 13 get_ref_count 0 4 1389 57 ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 164 0
81
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

874 18 get_node_ref_count 0 4 1389 62 ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 165 0
86
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

875 13 __getbuffer__ 0 4 1389 57 ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 166 0
112
int ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

876 17 __releasebuffer__ 0 4 1389 61 ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 167 0
106
void ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

877 20 ~ConstPointerToArray 0 4 1389 64 ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray(void);

878 14 PointerToArray 0 4 1392 43 PointerToArray< LMatrix3d >::PointerToArray 0 3 170 171 172 0
294
inline PointerToArray< LMatrix3d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LMatrix3d const *)(0))));
inline PointerToArray< LMatrix3d >::PointerToArray(PointerToArray< LMatrix3d > const &copy);
PointerToArray< LMatrix3d >::PointerToArray(PyObject *self, PyObject *source);

879 11 empty_array 0 4 1392 40 PointerToArray< LMatrix3d >::empty_array 0 1 173 0
180
static inline PointerToArray< LMatrix3d > PointerToArray< LMatrix3d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LMatrix3d const *)(0))));

880 4 size 0 4 1392 33 PointerToArray< LMatrix3d >::size 0 1 174 0
76
inline unsigned long long int PointerToArray< LMatrix3d >::size(void) const;

881 9 push_back 0 4 1392 38 PointerToArray< LMatrix3d >::push_back 0 1 175 0
71
inline void PointerToArray< LMatrix3d >::push_back(LMatrix3d const &x);

882 8 pop_back 0 4 1392 37 PointerToArray< LMatrix3d >::pop_back 0 1 176 0
56
inline void PointerToArray< LMatrix3d >::pop_back(void);

883 11 get_element 0 4 1392 40 PointerToArray< LMatrix3d >::get_element 0 1 177 0
97
inline LMatrix3d const &PointerToArray< LMatrix3d >::get_element(unsigned long long int n) const;

884 11 set_element 0 4 1392 40 PointerToArray< LMatrix3d >::set_element 0 1 178 0
103
inline void PointerToArray< LMatrix3d >::set_element(unsigned long long int n, LMatrix3d const &value);

885 11 __getitem__ 0 4 1392 40 PointerToArray< LMatrix3d >::__getitem__ 0 1 179 0
90
LMatrix3d const &PointerToArray< LMatrix3d >::__getitem__(unsigned long long int n) const;

886 11 __setitem__ 0 4 1392 40 PointerToArray< LMatrix3d >::__setitem__ 0 1 180 0
96
void PointerToArray< LMatrix3d >::__setitem__(unsigned long long int n, LMatrix3d const &value);

887 8 get_data 0 4 1392 37 PointerToArray< LMatrix3d >::get_data 0 1 181 0
60
PyObject *PointerToArray< LMatrix3d >::get_data(void) const;

888 8 set_data 0 4 1392 37 PointerToArray< LMatrix3d >::set_data 0 1 182 0
59
void PointerToArray< LMatrix3d >::set_data(PyObject *data);

889 11 get_subdata 0 4 1392 40 PointerToArray< LMatrix3d >::get_subdata 0 1 183 0
113
PyObject *PointerToArray< LMatrix3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

890 11 set_subdata 0 4 1392 40 PointerToArray< LMatrix3d >::set_subdata 0 1 184 0
148
inline void PointerToArray< LMatrix3d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

891 13 get_ref_count 0 4 1392 42 PointerToArray< LMatrix3d >::get_ref_count 0 1 185 0
66
inline int PointerToArray< LMatrix3d >::get_ref_count(void) const;

892 18 get_node_ref_count 0 4 1392 47 PointerToArray< LMatrix3d >::get_node_ref_count 0 1 186 0
71
inline int PointerToArray< LMatrix3d >::get_node_ref_count(void) const;

893 13 __getbuffer__ 0 4 1392 42 PointerToArray< LMatrix3d >::__getbuffer__ 0 1 187 0
91
int PointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

894 17 __releasebuffer__ 0 4 1392 46 PointerToArray< LMatrix3d >::__releasebuffer__ 0 1 188 0
91
void PointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

895 15 ~PointerToArray 0 4 1392 44 PointerToArray< LMatrix3d >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3d >::~PointerToArray(void);

896 14 PointerToArray 0 4 1393 43 PointerToArray< LMatrix3f >::PointerToArray 0 3 189 190 191 0
294
inline PointerToArray< LMatrix3f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LMatrix3f const *)(0))));
inline PointerToArray< LMatrix3f >::PointerToArray(PointerToArray< LMatrix3f > const &copy);
PointerToArray< LMatrix3f >::PointerToArray(PyObject *self, PyObject *source);

897 11 empty_array 0 4 1393 40 PointerToArray< LMatrix3f >::empty_array 0 1 192 0
180
static inline PointerToArray< LMatrix3f > PointerToArray< LMatrix3f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LMatrix3f const *)(0))));

898 4 size 0 4 1393 33 PointerToArray< LMatrix3f >::size 0 1 193 0
76
inline unsigned long long int PointerToArray< LMatrix3f >::size(void) const;

899 9 push_back 0 4 1393 38 PointerToArray< LMatrix3f >::push_back 0 1 194 0
71
inline void PointerToArray< LMatrix3f >::push_back(LMatrix3f const &x);

900 8 pop_back 0 4 1393 37 PointerToArray< LMatrix3f >::pop_back 0 1 195 0
56
inline void PointerToArray< LMatrix3f >::pop_back(void);

901 11 get_element 0 4 1393 40 PointerToArray< LMatrix3f >::get_element 0 1 196 0
97
inline LMatrix3f const &PointerToArray< LMatrix3f >::get_element(unsigned long long int n) const;

902 11 set_element 0 4 1393 40 PointerToArray< LMatrix3f >::set_element 0 1 197 0
103
inline void PointerToArray< LMatrix3f >::set_element(unsigned long long int n, LMatrix3f const &value);

903 11 __getitem__ 0 4 1393 40 PointerToArray< LMatrix3f >::__getitem__ 0 1 198 0
90
LMatrix3f const &PointerToArray< LMatrix3f >::__getitem__(unsigned long long int n) const;

904 11 __setitem__ 0 4 1393 40 PointerToArray< LMatrix3f >::__setitem__ 0 1 199 0
96
void PointerToArray< LMatrix3f >::__setitem__(unsigned long long int n, LMatrix3f const &value);

905 8 get_data 0 4 1393 37 PointerToArray< LMatrix3f >::get_data 0 1 200 0
60
PyObject *PointerToArray< LMatrix3f >::get_data(void) const;

906 8 set_data 0 4 1393 37 PointerToArray< LMatrix3f >::set_data 0 1 201 0
59
void PointerToArray< LMatrix3f >::set_data(PyObject *data);

907 11 get_subdata 0 4 1393 40 PointerToArray< LMatrix3f >::get_subdata 0 1 202 0
113
PyObject *PointerToArray< LMatrix3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

908 11 set_subdata 0 4 1393 40 PointerToArray< LMatrix3f >::set_subdata 0 1 203 0
148
inline void PointerToArray< LMatrix3f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

909 13 get_ref_count 0 4 1393 42 PointerToArray< LMatrix3f >::get_ref_count 0 1 204 0
66
inline int PointerToArray< LMatrix3f >::get_ref_count(void) const;

910 18 get_node_ref_count 0 4 1393 47 PointerToArray< LMatrix3f >::get_node_ref_count 0 1 205 0
71
inline int PointerToArray< LMatrix3f >::get_node_ref_count(void) const;

911 13 __getbuffer__ 0 4 1393 42 PointerToArray< LMatrix3f >::__getbuffer__ 0 1 206 0
91
int PointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

912 17 __releasebuffer__ 0 4 1393 46 PointerToArray< LMatrix3f >::__releasebuffer__ 0 1 207 0
91
void PointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

913 15 ~PointerToArray 0 4 1393 44 PointerToArray< LMatrix3f >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3f >::~PointerToArray(void);

914 14 PointerToArray 0 4 1394 44 PointerToArray< LVecBase2d >::PointerToArray 0 3 208 209 210 0
299
inline PointerToArray< LVecBase2d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2d const *)(0))));
inline PointerToArray< LVecBase2d >::PointerToArray(PointerToArray< LVecBase2d > const &copy);
PointerToArray< LVecBase2d >::PointerToArray(PyObject *self, PyObject *source);

915 11 empty_array 0 4 1394 41 PointerToArray< LVecBase2d >::empty_array 0 1 211 0
183
static inline PointerToArray< LVecBase2d > PointerToArray< LVecBase2d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2d const *)(0))));

916 4 size 0 4 1394 34 PointerToArray< LVecBase2d >::size 0 1 212 0
77
inline unsigned long long int PointerToArray< LVecBase2d >::size(void) const;

917 9 push_back 0 4 1394 39 PointerToArray< LVecBase2d >::push_back 0 1 213 0
73
inline void PointerToArray< LVecBase2d >::push_back(LVecBase2d const &x);

918 8 pop_back 0 4 1394 38 PointerToArray< LVecBase2d >::pop_back 0 1 214 0
57
inline void PointerToArray< LVecBase2d >::pop_back(void);

919 11 get_element 0 4 1394 41 PointerToArray< LVecBase2d >::get_element 0 1 215 0
99
inline LVecBase2d const &PointerToArray< LVecBase2d >::get_element(unsigned long long int n) const;

920 11 set_element 0 4 1394 41 PointerToArray< LVecBase2d >::set_element 0 1 216 0
105
inline void PointerToArray< LVecBase2d >::set_element(unsigned long long int n, LVecBase2d const &value);

921 11 __getitem__ 0 4 1394 41 PointerToArray< LVecBase2d >::__getitem__ 0 1 217 0
92
LVecBase2d const &PointerToArray< LVecBase2d >::__getitem__(unsigned long long int n) const;

922 11 __setitem__ 0 4 1394 41 PointerToArray< LVecBase2d >::__setitem__ 0 1 218 0
98
void PointerToArray< LVecBase2d >::__setitem__(unsigned long long int n, LVecBase2d const &value);

923 8 get_data 0 4 1394 38 PointerToArray< LVecBase2d >::get_data 0 1 219 0
61
PyObject *PointerToArray< LVecBase2d >::get_data(void) const;

924 8 set_data 0 4 1394 38 PointerToArray< LVecBase2d >::set_data 0 1 220 0
60
void PointerToArray< LVecBase2d >::set_data(PyObject *data);

925 11 get_subdata 0 4 1394 41 PointerToArray< LVecBase2d >::get_subdata 0 1 221 0
114
PyObject *PointerToArray< LVecBase2d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

926 11 set_subdata 0 4 1394 41 PointerToArray< LVecBase2d >::set_subdata 0 1 222 0
149
inline void PointerToArray< LVecBase2d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

927 13 get_ref_count 0 4 1394 43 PointerToArray< LVecBase2d >::get_ref_count 0 1 223 0
67
inline int PointerToArray< LVecBase2d >::get_ref_count(void) const;

928 18 get_node_ref_count 0 4 1394 48 PointerToArray< LVecBase2d >::get_node_ref_count 0 1 224 0
72
inline int PointerToArray< LVecBase2d >::get_node_ref_count(void) const;

929 13 __getbuffer__ 0 4 1394 43 PointerToArray< LVecBase2d >::__getbuffer__ 0 1 225 0
92
int PointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

930 17 __releasebuffer__ 0 4 1394 47 PointerToArray< LVecBase2d >::__releasebuffer__ 0 1 226 0
92
void PointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

931 15 ~PointerToArray 0 4 1394 45 PointerToArray< LVecBase2d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2d >::~PointerToArray(void);

932 14 PointerToArray 0 4 1395 44 PointerToArray< LVecBase2f >::PointerToArray 0 3 227 228 229 0
299
inline PointerToArray< LVecBase2f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2f const *)(0))));
inline PointerToArray< LVecBase2f >::PointerToArray(PointerToArray< LVecBase2f > const &copy);
PointerToArray< LVecBase2f >::PointerToArray(PyObject *self, PyObject *source);

933 11 empty_array 0 4 1395 41 PointerToArray< LVecBase2f >::empty_array 0 1 230 0
183
static inline PointerToArray< LVecBase2f > PointerToArray< LVecBase2f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2f const *)(0))));

934 4 size 0 4 1395 34 PointerToArray< LVecBase2f >::size 0 1 231 0
77
inline unsigned long long int PointerToArray< LVecBase2f >::size(void) const;

935 9 push_back 0 4 1395 39 PointerToArray< LVecBase2f >::push_back 0 1 232 0
73
inline void PointerToArray< LVecBase2f >::push_back(LVecBase2f const &x);

936 8 pop_back 0 4 1395 38 PointerToArray< LVecBase2f >::pop_back 0 1 233 0
57
inline void PointerToArray< LVecBase2f >::pop_back(void);

937 11 get_element 0 4 1395 41 PointerToArray< LVecBase2f >::get_element 0 1 234 0
99
inline LVecBase2f const &PointerToArray< LVecBase2f >::get_element(unsigned long long int n) const;

938 11 set_element 0 4 1395 41 PointerToArray< LVecBase2f >::set_element 0 1 235 0
105
inline void PointerToArray< LVecBase2f >::set_element(unsigned long long int n, LVecBase2f const &value);

939 11 __getitem__ 0 4 1395 41 PointerToArray< LVecBase2f >::__getitem__ 0 1 236 0
92
LVecBase2f const &PointerToArray< LVecBase2f >::__getitem__(unsigned long long int n) const;

940 11 __setitem__ 0 4 1395 41 PointerToArray< LVecBase2f >::__setitem__ 0 1 237 0
98
void PointerToArray< LVecBase2f >::__setitem__(unsigned long long int n, LVecBase2f const &value);

941 8 get_data 0 4 1395 38 PointerToArray< LVecBase2f >::get_data 0 1 238 0
61
PyObject *PointerToArray< LVecBase2f >::get_data(void) const;

942 8 set_data 0 4 1395 38 PointerToArray< LVecBase2f >::set_data 0 1 239 0
60
void PointerToArray< LVecBase2f >::set_data(PyObject *data);

943 11 get_subdata 0 4 1395 41 PointerToArray< LVecBase2f >::get_subdata 0 1 240 0
114
PyObject *PointerToArray< LVecBase2f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

944 11 set_subdata 0 4 1395 41 PointerToArray< LVecBase2f >::set_subdata 0 1 241 0
149
inline void PointerToArray< LVecBase2f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

945 13 get_ref_count 0 4 1395 43 PointerToArray< LVecBase2f >::get_ref_count 0 1 242 0
67
inline int PointerToArray< LVecBase2f >::get_ref_count(void) const;

946 18 get_node_ref_count 0 4 1395 48 PointerToArray< LVecBase2f >::get_node_ref_count 0 1 243 0
72
inline int PointerToArray< LVecBase2f >::get_node_ref_count(void) const;

947 13 __getbuffer__ 0 4 1395 43 PointerToArray< LVecBase2f >::__getbuffer__ 0 1 244 0
92
int PointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

948 17 __releasebuffer__ 0 4 1395 47 PointerToArray< LVecBase2f >::__releasebuffer__ 0 1 245 0
92
void PointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

949 15 ~PointerToArray 0 4 1395 45 PointerToArray< LVecBase2f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2f >::~PointerToArray(void);

950 14 PointerToArray 0 4 1396 44 PointerToArray< LVecBase2i >::PointerToArray 0 3 246 247 248 0
299
inline PointerToArray< LVecBase2i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase2i const *)(0))));
inline PointerToArray< LVecBase2i >::PointerToArray(PointerToArray< LVecBase2i > const &copy);
PointerToArray< LVecBase2i >::PointerToArray(PyObject *self, PyObject *source);

951 11 empty_array 0 4 1396 41 PointerToArray< LVecBase2i >::empty_array 0 1 249 0
183
static inline PointerToArray< LVecBase2i > PointerToArray< LVecBase2i >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase2i const *)(0))));

952 4 size 0 4 1396 34 PointerToArray< LVecBase2i >::size 0 1 250 0
77
inline unsigned long long int PointerToArray< LVecBase2i >::size(void) const;

953 9 push_back 0 4 1396 39 PointerToArray< LVecBase2i >::push_back 0 1 251 0
73
inline void PointerToArray< LVecBase2i >::push_back(LVecBase2i const &x);

954 8 pop_back 0 4 1396 38 PointerToArray< LVecBase2i >::pop_back 0 1 252 0
57
inline void PointerToArray< LVecBase2i >::pop_back(void);

955 11 get_element 0 4 1396 41 PointerToArray< LVecBase2i >::get_element 0 1 253 0
99
inline LVecBase2i const &PointerToArray< LVecBase2i >::get_element(unsigned long long int n) const;

956 11 set_element 0 4 1396 41 PointerToArray< LVecBase2i >::set_element 0 1 254 0
105
inline void PointerToArray< LVecBase2i >::set_element(unsigned long long int n, LVecBase2i const &value);

957 11 __getitem__ 0 4 1396 41 PointerToArray< LVecBase2i >::__getitem__ 0 1 255 0
92
LVecBase2i const &PointerToArray< LVecBase2i >::__getitem__(unsigned long long int n) const;

958 11 __setitem__ 0 4 1396 41 PointerToArray< LVecBase2i >::__setitem__ 0 1 256 0
98
void PointerToArray< LVecBase2i >::__setitem__(unsigned long long int n, LVecBase2i const &value);

959 8 get_data 0 4 1396 38 PointerToArray< LVecBase2i >::get_data 0 1 257 0
61
PyObject *PointerToArray< LVecBase2i >::get_data(void) const;

960 8 set_data 0 4 1396 38 PointerToArray< LVecBase2i >::set_data 0 1 258 0
60
void PointerToArray< LVecBase2i >::set_data(PyObject *data);

961 11 get_subdata 0 4 1396 41 PointerToArray< LVecBase2i >::get_subdata 0 1 259 0
114
PyObject *PointerToArray< LVecBase2i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

962 11 set_subdata 0 4 1396 41 PointerToArray< LVecBase2i >::set_subdata 0 1 260 0
149
inline void PointerToArray< LVecBase2i >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

963 13 get_ref_count 0 4 1396 43 PointerToArray< LVecBase2i >::get_ref_count 0 1 261 0
67
inline int PointerToArray< LVecBase2i >::get_ref_count(void) const;

964 18 get_node_ref_count 0 4 1396 48 PointerToArray< LVecBase2i >::get_node_ref_count 0 1 262 0
72
inline int PointerToArray< LVecBase2i >::get_node_ref_count(void) const;

965 13 __getbuffer__ 0 4 1396 43 PointerToArray< LVecBase2i >::__getbuffer__ 0 1 263 0
92
int PointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

966 17 __releasebuffer__ 0 4 1396 47 PointerToArray< LVecBase2i >::__releasebuffer__ 0 1 264 0
92
void PointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

967 15 ~PointerToArray 0 4 1396 45 PointerToArray< LVecBase2i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2i >::~PointerToArray(void);

968 14 PointerToArray 0 4 1397 44 PointerToArray< LVecBase3d >::PointerToArray 0 3 265 266 267 0
299
inline PointerToArray< LVecBase3d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3d const *)(0))));
inline PointerToArray< LVecBase3d >::PointerToArray(PointerToArray< LVecBase3d > const &copy);
PointerToArray< LVecBase3d >::PointerToArray(PyObject *self, PyObject *source);

969 11 empty_array 0 4 1397 41 PointerToArray< LVecBase3d >::empty_array 0 1 268 0
183
static inline PointerToArray< LVecBase3d > PointerToArray< LVecBase3d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3d const *)(0))));

970 4 size 0 4 1397 34 PointerToArray< LVecBase3d >::size 0 1 269 0
77
inline unsigned long long int PointerToArray< LVecBase3d >::size(void) const;

971 9 push_back 0 4 1397 39 PointerToArray< LVecBase3d >::push_back 0 1 270 0
73
inline void PointerToArray< LVecBase3d >::push_back(LVecBase3d const &x);

972 8 pop_back 0 4 1397 38 PointerToArray< LVecBase3d >::pop_back 0 1 271 0
57
inline void PointerToArray< LVecBase3d >::pop_back(void);

973 11 get_element 0 4 1397 41 PointerToArray< LVecBase3d >::get_element 0 1 272 0
99
inline LVecBase3d const &PointerToArray< LVecBase3d >::get_element(unsigned long long int n) const;

974 11 set_element 0 4 1397 41 PointerToArray< LVecBase3d >::set_element 0 1 273 0
105
inline void PointerToArray< LVecBase3d >::set_element(unsigned long long int n, LVecBase3d const &value);

975 11 __getitem__ 0 4 1397 41 PointerToArray< LVecBase3d >::__getitem__ 0 1 274 0
92
LVecBase3d const &PointerToArray< LVecBase3d >::__getitem__(unsigned long long int n) const;

976 11 __setitem__ 0 4 1397 41 PointerToArray< LVecBase3d >::__setitem__ 0 1 275 0
98
void PointerToArray< LVecBase3d >::__setitem__(unsigned long long int n, LVecBase3d const &value);

977 8 get_data 0 4 1397 38 PointerToArray< LVecBase3d >::get_data 0 1 276 0
61
PyObject *PointerToArray< LVecBase3d >::get_data(void) const;

978 8 set_data 0 4 1397 38 PointerToArray< LVecBase3d >::set_data 0 1 277 0
60
void PointerToArray< LVecBase3d >::set_data(PyObject *data);

979 11 get_subdata 0 4 1397 41 PointerToArray< LVecBase3d >::get_subdata 0 1 278 0
114
PyObject *PointerToArray< LVecBase3d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

980 11 set_subdata 0 4 1397 41 PointerToArray< LVecBase3d >::set_subdata 0 1 279 0
149
inline void PointerToArray< LVecBase3d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

981 13 get_ref_count 0 4 1397 43 PointerToArray< LVecBase3d >::get_ref_count 0 1 280 0
67
inline int PointerToArray< LVecBase3d >::get_ref_count(void) const;

982 18 get_node_ref_count 0 4 1397 48 PointerToArray< LVecBase3d >::get_node_ref_count 0 1 281 0
72
inline int PointerToArray< LVecBase3d >::get_node_ref_count(void) const;

983 13 __getbuffer__ 0 4 1397 43 PointerToArray< LVecBase3d >::__getbuffer__ 0 1 282 0
92
int PointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

984 17 __releasebuffer__ 0 4 1397 47 PointerToArray< LVecBase3d >::__releasebuffer__ 0 1 283 0
92
void PointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

985 15 ~PointerToArray 0 4 1397 45 PointerToArray< LVecBase3d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3d >::~PointerToArray(void);

986 14 PointerToArray 0 4 1398 44 PointerToArray< LVecBase3f >::PointerToArray 0 3 284 285 286 0
299
inline PointerToArray< LVecBase3f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3f const *)(0))));
inline PointerToArray< LVecBase3f >::PointerToArray(PointerToArray< LVecBase3f > const &copy);
PointerToArray< LVecBase3f >::PointerToArray(PyObject *self, PyObject *source);

987 11 empty_array 0 4 1398 41 PointerToArray< LVecBase3f >::empty_array 0 1 287 0
183
static inline PointerToArray< LVecBase3f > PointerToArray< LVecBase3f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3f const *)(0))));

988 4 size 0 4 1398 34 PointerToArray< LVecBase3f >::size 0 1 288 0
77
inline unsigned long long int PointerToArray< LVecBase3f >::size(void) const;

989 9 push_back 0 4 1398 39 PointerToArray< LVecBase3f >::push_back 0 1 289 0
73
inline void PointerToArray< LVecBase3f >::push_back(LVecBase3f const &x);

990 8 pop_back 0 4 1398 38 PointerToArray< LVecBase3f >::pop_back 0 1 290 0
57
inline void PointerToArray< LVecBase3f >::pop_back(void);

991 11 get_element 0 4 1398 41 PointerToArray< LVecBase3f >::get_element 0 1 291 0
99
inline LVecBase3f const &PointerToArray< LVecBase3f >::get_element(unsigned long long int n) const;

992 11 set_element 0 4 1398 41 PointerToArray< LVecBase3f >::set_element 0 1 292 0
105
inline void PointerToArray< LVecBase3f >::set_element(unsigned long long int n, LVecBase3f const &value);

993 11 __getitem__ 0 4 1398 41 PointerToArray< LVecBase3f >::__getitem__ 0 1 293 0
92
LVecBase3f const &PointerToArray< LVecBase3f >::__getitem__(unsigned long long int n) const;

994 11 __setitem__ 0 4 1398 41 PointerToArray< LVecBase3f >::__setitem__ 0 1 294 0
98
void PointerToArray< LVecBase3f >::__setitem__(unsigned long long int n, LVecBase3f const &value);

995 8 get_data 0 4 1398 38 PointerToArray< LVecBase3f >::get_data 0 1 295 0
61
PyObject *PointerToArray< LVecBase3f >::get_data(void) const;

996 8 set_data 0 4 1398 38 PointerToArray< LVecBase3f >::set_data 0 1 296 0
60
void PointerToArray< LVecBase3f >::set_data(PyObject *data);

997 11 get_subdata 0 4 1398 41 PointerToArray< LVecBase3f >::get_subdata 0 1 297 0
114
PyObject *PointerToArray< LVecBase3f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

998 11 set_subdata 0 4 1398 41 PointerToArray< LVecBase3f >::set_subdata 0 1 298 0
149
inline void PointerToArray< LVecBase3f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

999 13 get_ref_count 0 4 1398 43 PointerToArray< LVecBase3f >::get_ref_count 0 1 299 0
67
inline int PointerToArray< LVecBase3f >::get_ref_count(void) const;

1000 18 get_node_ref_count 0 4 1398 48 PointerToArray< LVecBase3f >::get_node_ref_count 0 1 300 0
72
inline int PointerToArray< LVecBase3f >::get_node_ref_count(void) const;

1001 13 __getbuffer__ 0 4 1398 43 PointerToArray< LVecBase3f >::__getbuffer__ 0 1 301 0
92
int PointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1002 17 __releasebuffer__ 0 4 1398 47 PointerToArray< LVecBase3f >::__releasebuffer__ 0 1 302 0
92
void PointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1003 15 ~PointerToArray 0 4 1398 45 PointerToArray< LVecBase3f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3f >::~PointerToArray(void);

1004 14 PointerToArray 0 4 1399 44 PointerToArray< LVecBase3i >::PointerToArray 0 3 303 304 305 0
299
inline PointerToArray< LVecBase3i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((LVecBase3i const *)(0))));
inline PointerToArray< LVecBase3i >::PointerToArray(PointerToArray< LVecBase3i > const &copy);
PointerToArray< LVecBase3i >::PointerToArray(PyObject *self, PyObject *source);

1005 11 empty_array 0 4 1399 41 PointerToArray< LVecBase3i >::empty_array 0 1 306 0
183
static inline PointerToArray< LVecBase3i > PointerToArray< LVecBase3i >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((LVecBase3i const *)(0))));

1006 4 size 0 4 1399 34 PointerToArray< LVecBase3i >::size 0 1 307 0
77
inline unsigned long long int PointerToArray< LVecBase3i >::size(void) const;

1007 9 push_back 0 4 1399 39 PointerToArray< LVecBase3i >::push_back 0 1 308 0
73
inline void PointerToArray< LVecBase3i >::push_back(LVecBase3i const &x);

1008 8 pop_back 0 4 1399 38 PointerToArray< LVecBase3i >::pop_back 0 1 309 0
57
inline void PointerToArray< LVecBase3i >::pop_back(void);

1009 11 get_element 0 4 1399 41 PointerToArray< LVecBase3i >::get_element 0 1 310 0
99
inline LVecBase3i const &PointerToArray< LVecBase3i >::get_element(unsigned long long int n) const;

1010 11 set_element 0 4 1399 41 PointerToArray< LVecBase3i >::set_element 0 1 311 0
105
inline void PointerToArray< LVecBase3i >::set_element(unsigned long long int n, LVecBase3i const &value);

1011 11 __getitem__ 0 4 1399 41 PointerToArray< LVecBase3i >::__getitem__ 0 1 312 0
92
LVecBase3i const &PointerToArray< LVecBase3i >::__getitem__(unsigned long long int n) const;

1012 11 __setitem__ 0 4 1399 41 PointerToArray< LVecBase3i >::__setitem__ 0 1 313 0
98
void PointerToArray< LVecBase3i >::__setitem__(unsigned long long int n, LVecBase3i const &value);

1013 8 get_data 0 4 1399 38 PointerToArray< LVecBase3i >::get_data 0 1 314 0
61
PyObject *PointerToArray< LVecBase3i >::get_data(void) const;

1014 8 set_data 0 4 1399 38 PointerToArray< LVecBase3i >::set_data 0 1 315 0
60
void PointerToArray< LVecBase3i >::set_data(PyObject *data);

1015 11 get_subdata 0 4 1399 41 PointerToArray< LVecBase3i >::get_subdata 0 1 316 0
114
PyObject *PointerToArray< LVecBase3i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1016 11 set_subdata 0 4 1399 41 PointerToArray< LVecBase3i >::set_subdata 0 1 317 0
149
inline void PointerToArray< LVecBase3i >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1017 13 get_ref_count 0 4 1399 43 PointerToArray< LVecBase3i >::get_ref_count 0 1 318 0
67
inline int PointerToArray< LVecBase3i >::get_ref_count(void) const;

1018 18 get_node_ref_count 0 4 1399 48 PointerToArray< LVecBase3i >::get_node_ref_count 0 1 319 0
72
inline int PointerToArray< LVecBase3i >::get_node_ref_count(void) const;

1019 13 __getbuffer__ 0 4 1399 43 PointerToArray< LVecBase3i >::__getbuffer__ 0 1 320 0
92
int PointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1020 17 __releasebuffer__ 0 4 1399 47 PointerToArray< LVecBase3i >::__releasebuffer__ 0 1 321 0
92
void PointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1021 15 ~PointerToArray 0 4 1399 45 PointerToArray< LVecBase3i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3i >::~PointerToArray(void);

1022 14 PointerToArray 0 4 1400 52 PointerToArray< UnalignedLMatrix4d >::PointerToArray 0 3 322 323 324 0
339
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4d const *)(0))));
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
PointerToArray< UnalignedLMatrix4d >::PointerToArray(PyObject *self, PyObject *source);

1023 11 empty_array 0 4 1400 49 PointerToArray< UnalignedLMatrix4d >::empty_array 0 1 325 0
207
static inline PointerToArray< UnalignedLMatrix4d > PointerToArray< UnalignedLMatrix4d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4d const *)(0))));

1024 4 size 0 4 1400 42 PointerToArray< UnalignedLMatrix4d >::size 0 1 326 0
85
inline unsigned long long int PointerToArray< UnalignedLMatrix4d >::size(void) const;

1025 9 push_back 0 4 1400 47 PointerToArray< UnalignedLMatrix4d >::push_back 0 1 327 0
89
inline void PointerToArray< UnalignedLMatrix4d >::push_back(UnalignedLMatrix4d const &x);

1026 8 pop_back 0 4 1400 46 PointerToArray< UnalignedLMatrix4d >::pop_back 0 1 328 0
65
inline void PointerToArray< UnalignedLMatrix4d >::pop_back(void);

1027 11 get_element 0 4 1400 49 PointerToArray< UnalignedLMatrix4d >::get_element 0 1 329 0
115
inline UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::get_element(unsigned long long int n) const;

1028 11 set_element 0 4 1400 49 PointerToArray< UnalignedLMatrix4d >::set_element 0 1 330 0
121
inline void PointerToArray< UnalignedLMatrix4d >::set_element(unsigned long long int n, UnalignedLMatrix4d const &value);

1029 11 __getitem__ 0 4 1400 49 PointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 331 0
108
UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long long int n) const;

1030 11 __setitem__ 0 4 1400 49 PointerToArray< UnalignedLMatrix4d >::__setitem__ 0 1 332 0
114
void PointerToArray< UnalignedLMatrix4d >::__setitem__(unsigned long long int n, UnalignedLMatrix4d const &value);

1031 8 get_data 0 4 1400 46 PointerToArray< UnalignedLMatrix4d >::get_data 0 1 333 0
69
PyObject *PointerToArray< UnalignedLMatrix4d >::get_data(void) const;

1032 8 set_data 0 4 1400 46 PointerToArray< UnalignedLMatrix4d >::set_data 0 1 334 0
68
void PointerToArray< UnalignedLMatrix4d >::set_data(PyObject *data);

1033 11 get_subdata 0 4 1400 49 PointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 335 0
122
PyObject *PointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1034 11 set_subdata 0 4 1400 49 PointerToArray< UnalignedLMatrix4d >::set_subdata 0 1 336 0
157
inline void PointerToArray< UnalignedLMatrix4d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1035 13 get_ref_count 0 4 1400 51 PointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 337 0
75
inline int PointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

1036 18 get_node_ref_count 0 4 1400 56 PointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 338 0
80
inline int PointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

1037 13 __getbuffer__ 0 4 1400 51 PointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 339 0
100
int PointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1038 17 __releasebuffer__ 0 4 1400 55 PointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 340 0
100
void PointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1039 15 ~PointerToArray 0 4 1400 53 PointerToArray< UnalignedLMatrix4d >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4d >::~PointerToArray(void);

1040 14 PointerToArray 0 4 1401 52 PointerToArray< UnalignedLMatrix4f >::PointerToArray 0 3 341 342 343 0
339
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4f const *)(0))));
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
PointerToArray< UnalignedLMatrix4f >::PointerToArray(PyObject *self, PyObject *source);

1041 11 empty_array 0 4 1401 49 PointerToArray< UnalignedLMatrix4f >::empty_array 0 1 344 0
207
static inline PointerToArray< UnalignedLMatrix4f > PointerToArray< UnalignedLMatrix4f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLMatrix4f const *)(0))));

1042 4 size 0 4 1401 42 PointerToArray< UnalignedLMatrix4f >::size 0 1 345 0
85
inline unsigned long long int PointerToArray< UnalignedLMatrix4f >::size(void) const;

1043 9 push_back 0 4 1401 47 PointerToArray< UnalignedLMatrix4f >::push_back 0 1 346 0
89
inline void PointerToArray< UnalignedLMatrix4f >::push_back(UnalignedLMatrix4f const &x);

1044 8 pop_back 0 4 1401 46 PointerToArray< UnalignedLMatrix4f >::pop_back 0 1 347 0
65
inline void PointerToArray< UnalignedLMatrix4f >::pop_back(void);

1045 11 get_element 0 4 1401 49 PointerToArray< UnalignedLMatrix4f >::get_element 0 1 348 0
115
inline UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::get_element(unsigned long long int n) const;

1046 11 set_element 0 4 1401 49 PointerToArray< UnalignedLMatrix4f >::set_element 0 1 349 0
121
inline void PointerToArray< UnalignedLMatrix4f >::set_element(unsigned long long int n, UnalignedLMatrix4f const &value);

1047 11 __getitem__ 0 4 1401 49 PointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 350 0
108
UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long long int n) const;

1048 11 __setitem__ 0 4 1401 49 PointerToArray< UnalignedLMatrix4f >::__setitem__ 0 1 351 0
114
void PointerToArray< UnalignedLMatrix4f >::__setitem__(unsigned long long int n, UnalignedLMatrix4f const &value);

1049 8 get_data 0 4 1401 46 PointerToArray< UnalignedLMatrix4f >::get_data 0 1 352 0
69
PyObject *PointerToArray< UnalignedLMatrix4f >::get_data(void) const;

1050 8 set_data 0 4 1401 46 PointerToArray< UnalignedLMatrix4f >::set_data 0 1 353 0
68
void PointerToArray< UnalignedLMatrix4f >::set_data(PyObject *data);

1051 11 get_subdata 0 4 1401 49 PointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 354 0
122
PyObject *PointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1052 11 set_subdata 0 4 1401 49 PointerToArray< UnalignedLMatrix4f >::set_subdata 0 1 355 0
157
inline void PointerToArray< UnalignedLMatrix4f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1053 13 get_ref_count 0 4 1401 51 PointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 356 0
75
inline int PointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

1054 18 get_node_ref_count 0 4 1401 56 PointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 357 0
80
inline int PointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

1055 13 __getbuffer__ 0 4 1401 51 PointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 358 0
100
int PointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1056 17 __releasebuffer__ 0 4 1401 55 PointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 359 0
100
void PointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1057 15 ~PointerToArray 0 4 1401 53 PointerToArray< UnalignedLMatrix4f >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4f >::~PointerToArray(void);

1058 14 PointerToArray 0 4 1402 53 PointerToArray< UnalignedLVecBase4d >::PointerToArray 0 3 360 361 362 0
344
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4d const *)(0))));
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
PointerToArray< UnalignedLVecBase4d >::PointerToArray(PyObject *self, PyObject *source);

1059 11 empty_array 0 4 1402 50 PointerToArray< UnalignedLVecBase4d >::empty_array 0 1 363 0
210
static inline PointerToArray< UnalignedLVecBase4d > PointerToArray< UnalignedLVecBase4d >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4d const *)(0))));

1060 4 size 0 4 1402 43 PointerToArray< UnalignedLVecBase4d >::size 0 1 364 0
86
inline unsigned long long int PointerToArray< UnalignedLVecBase4d >::size(void) const;

1061 9 push_back 0 4 1402 48 PointerToArray< UnalignedLVecBase4d >::push_back 0 1 365 0
91
inline void PointerToArray< UnalignedLVecBase4d >::push_back(UnalignedLVecBase4d const &x);

1062 8 pop_back 0 4 1402 47 PointerToArray< UnalignedLVecBase4d >::pop_back 0 1 366 0
66
inline void PointerToArray< UnalignedLVecBase4d >::pop_back(void);

1063 11 get_element 0 4 1402 50 PointerToArray< UnalignedLVecBase4d >::get_element 0 1 367 0
117
inline UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::get_element(unsigned long long int n) const;

1064 11 set_element 0 4 1402 50 PointerToArray< UnalignedLVecBase4d >::set_element 0 1 368 0
123
inline void PointerToArray< UnalignedLVecBase4d >::set_element(unsigned long long int n, UnalignedLVecBase4d const &value);

1065 11 __getitem__ 0 4 1402 50 PointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 369 0
110
UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long long int n) const;

1066 11 __setitem__ 0 4 1402 50 PointerToArray< UnalignedLVecBase4d >::__setitem__ 0 1 370 0
116
void PointerToArray< UnalignedLVecBase4d >::__setitem__(unsigned long long int n, UnalignedLVecBase4d const &value);

1067 8 get_data 0 4 1402 47 PointerToArray< UnalignedLVecBase4d >::get_data 0 1 371 0
70
PyObject *PointerToArray< UnalignedLVecBase4d >::get_data(void) const;

1068 8 set_data 0 4 1402 47 PointerToArray< UnalignedLVecBase4d >::set_data 0 1 372 0
69
void PointerToArray< UnalignedLVecBase4d >::set_data(PyObject *data);

1069 11 get_subdata 0 4 1402 50 PointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 373 0
123
PyObject *PointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1070 11 set_subdata 0 4 1402 50 PointerToArray< UnalignedLVecBase4d >::set_subdata 0 1 374 0
158
inline void PointerToArray< UnalignedLVecBase4d >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1071 13 get_ref_count 0 4 1402 52 PointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 375 0
76
inline int PointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

1072 18 get_node_ref_count 0 4 1402 57 PointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 376 0
81
inline int PointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

1073 13 __getbuffer__ 0 4 1402 52 PointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 377 0
101
int PointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1074 17 __releasebuffer__ 0 4 1402 56 PointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 378 0
101
void PointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1075 15 ~PointerToArray 0 4 1402 54 PointerToArray< UnalignedLVecBase4d >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4d >::~PointerToArray(void);

1076 14 PointerToArray 0 4 1403 53 PointerToArray< UnalignedLVecBase4f >::PointerToArray 0 3 379 380 381 0
344
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4f const *)(0))));
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
PointerToArray< UnalignedLVecBase4f >::PointerToArray(PyObject *self, PyObject *source);

1077 11 empty_array 0 4 1403 50 PointerToArray< UnalignedLVecBase4f >::empty_array 0 1 382 0
210
static inline PointerToArray< UnalignedLVecBase4f > PointerToArray< UnalignedLVecBase4f >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4f const *)(0))));

1078 4 size 0 4 1403 43 PointerToArray< UnalignedLVecBase4f >::size 0 1 383 0
86
inline unsigned long long int PointerToArray< UnalignedLVecBase4f >::size(void) const;

1079 9 push_back 0 4 1403 48 PointerToArray< UnalignedLVecBase4f >::push_back 0 1 384 0
91
inline void PointerToArray< UnalignedLVecBase4f >::push_back(UnalignedLVecBase4f const &x);

1080 8 pop_back 0 4 1403 47 PointerToArray< UnalignedLVecBase4f >::pop_back 0 1 385 0
66
inline void PointerToArray< UnalignedLVecBase4f >::pop_back(void);

1081 11 get_element 0 4 1403 50 PointerToArray< UnalignedLVecBase4f >::get_element 0 1 386 0
117
inline UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::get_element(unsigned long long int n) const;

1082 11 set_element 0 4 1403 50 PointerToArray< UnalignedLVecBase4f >::set_element 0 1 387 0
123
inline void PointerToArray< UnalignedLVecBase4f >::set_element(unsigned long long int n, UnalignedLVecBase4f const &value);

1083 11 __getitem__ 0 4 1403 50 PointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 388 0
110
UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long long int n) const;

1084 11 __setitem__ 0 4 1403 50 PointerToArray< UnalignedLVecBase4f >::__setitem__ 0 1 389 0
116
void PointerToArray< UnalignedLVecBase4f >::__setitem__(unsigned long long int n, UnalignedLVecBase4f const &value);

1085 8 get_data 0 4 1403 47 PointerToArray< UnalignedLVecBase4f >::get_data 0 1 390 0
70
PyObject *PointerToArray< UnalignedLVecBase4f >::get_data(void) const;

1086 8 set_data 0 4 1403 47 PointerToArray< UnalignedLVecBase4f >::set_data 0 1 391 0
69
void PointerToArray< UnalignedLVecBase4f >::set_data(PyObject *data);

1087 11 get_subdata 0 4 1403 50 PointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 392 0
123
PyObject *PointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1088 11 set_subdata 0 4 1403 50 PointerToArray< UnalignedLVecBase4f >::set_subdata 0 1 393 0
158
inline void PointerToArray< UnalignedLVecBase4f >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1089 13 get_ref_count 0 4 1403 52 PointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 394 0
76
inline int PointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

1090 18 get_node_ref_count 0 4 1403 57 PointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 395 0
81
inline int PointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

1091 13 __getbuffer__ 0 4 1403 52 PointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 396 0
101
int PointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1092 17 __releasebuffer__ 0 4 1403 56 PointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 397 0
101
void PointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1093 15 ~PointerToArray 0 4 1403 54 PointerToArray< UnalignedLVecBase4f >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4f >::~PointerToArray(void);

1094 14 PointerToArray 0 4 1404 53 PointerToArray< UnalignedLVecBase4i >::PointerToArray 0 3 398 399 400 0
344
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4i const *)(0))));
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
PointerToArray< UnalignedLVecBase4i >::PointerToArray(PyObject *self, PyObject *source);

1095 11 empty_array 0 4 1404 50 PointerToArray< UnalignedLVecBase4i >::empty_array 0 1 401 0
210
static inline PointerToArray< UnalignedLVecBase4i > PointerToArray< UnalignedLVecBase4i >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((UnalignedLVecBase4i const *)(0))));

1096 4 size 0 4 1404 43 PointerToArray< UnalignedLVecBase4i >::size 0 1 402 0
86
inline unsigned long long int PointerToArray< UnalignedLVecBase4i >::size(void) const;

1097 9 push_back 0 4 1404 48 PointerToArray< UnalignedLVecBase4i >::push_back 0 1 403 0
91
inline void PointerToArray< UnalignedLVecBase4i >::push_back(UnalignedLVecBase4i const &x);

1098 8 pop_back 0 4 1404 47 PointerToArray< UnalignedLVecBase4i >::pop_back 0 1 404 0
66
inline void PointerToArray< UnalignedLVecBase4i >::pop_back(void);

1099 11 get_element 0 4 1404 50 PointerToArray< UnalignedLVecBase4i >::get_element 0 1 405 0
117
inline UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::get_element(unsigned long long int n) const;

1100 11 set_element 0 4 1404 50 PointerToArray< UnalignedLVecBase4i >::set_element 0 1 406 0
123
inline void PointerToArray< UnalignedLVecBase4i >::set_element(unsigned long long int n, UnalignedLVecBase4i const &value);

1101 11 __getitem__ 0 4 1404 50 PointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 407 0
110
UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long long int n) const;

1102 11 __setitem__ 0 4 1404 50 PointerToArray< UnalignedLVecBase4i >::__setitem__ 0 1 408 0
116
void PointerToArray< UnalignedLVecBase4i >::__setitem__(unsigned long long int n, UnalignedLVecBase4i const &value);

1103 8 get_data 0 4 1404 47 PointerToArray< UnalignedLVecBase4i >::get_data 0 1 409 0
70
PyObject *PointerToArray< UnalignedLVecBase4i >::get_data(void) const;

1104 8 set_data 0 4 1404 47 PointerToArray< UnalignedLVecBase4i >::set_data 0 1 410 0
69
void PointerToArray< UnalignedLVecBase4i >::set_data(PyObject *data);

1105 11 get_subdata 0 4 1404 50 PointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 411 0
123
PyObject *PointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long long int n, unsigned long long int count) const;

1106 11 set_subdata 0 4 1404 50 PointerToArray< UnalignedLVecBase4i >::set_subdata 0 1 412 0
158
inline void PointerToArray< UnalignedLVecBase4i >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

1107 13 get_ref_count 0 4 1404 52 PointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 413 0
76
inline int PointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

1108 18 get_node_ref_count 0 4 1404 57 PointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 414 0
81
inline int PointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

1109 13 __getbuffer__ 0 4 1404 52 PointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 415 0
101
int PointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1110 17 __releasebuffer__ 0 4 1404 56 PointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 416 0
101
void PointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1111 15 ~PointerToArray 0 4 1404 54 PointerToArray< UnalignedLVecBase4i >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4i >::~PointerToArray(void);

1112 9 make_copy 0 6 1405 25 BoundingVolume::make_copy 0 1 417 0
66
virtual BoundingVolume *BoundingVolume::make_copy(void) const = 0;

1113 8 is_empty 0 4 1405 24 BoundingVolume::is_empty 0 1 418 253
/**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */
49
inline bool BoundingVolume::is_empty(void) const;

1114 11 is_infinite 0 4 1405 27 BoundingVolume::is_infinite 0 1 419 536
/**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */
52
inline bool BoundingVolume::is_infinite(void) const;

1115 12 set_infinite 0 4 1405 28 BoundingVolume::set_infinite 0 1 420 135
/**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */
47
inline void BoundingVolume::set_infinite(void);

1116 9 extend_by 0 4 1405 25 BoundingVolume::extend_by 0 1 421 72
/**
 * Increases the size of the volume to include the given volume.
 */
65
inline bool BoundingVolume::extend_by(BoundingVolume const *vol);

1117 8 contains 0 4 1405 24 BoundingVolume::contains 0 1 422 128
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */
69
inline int BoundingVolume::contains(BoundingVolume const *vol) const;

1118 6 output 0 6 1405 22 BoundingVolume::output 0 1 423 0
60
virtual void BoundingVolume::output(ostream &out) const = 0;

1119 5 write 0 6 1405 21 BoundingVolume::write 0 1 424 10
/**
 *
 */
77
virtual void BoundingVolume::write(ostream &out, int indent_level = 0) const;

1120 14 get_class_type 0 4 1405 30 BoundingVolume::get_class_type 0 1 425 0
55
static TypeHandle BoundingVolume::get_class_type(void);

1121 15 ~BoundingVolume 0 4 1405 31 BoundingVolume::~BoundingVolume 0 0 0
38
BoundingVolume::~BoundingVolume(void);

1122 9 extend_by 0 4 1409 34 GeometricBoundingVolume::extend_by 0 2 426 427 145
/**
 * Increases the size of the volume to include the given volume.
 */

/**
 * Increases the size of the volume to include the given point.
 */
153
inline bool GeometricBoundingVolume::extend_by(GeometricBoundingVolume const *vol);
inline bool GeometricBoundingVolume::extend_by(LPoint3 const &point);

1123 8 contains 0 4 1409 33 GeometricBoundingVolume::contains 0 3 428 429 430 393
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */
249
inline int GeometricBoundingVolume::contains(GeometricBoundingVolume const *vol) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &point) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &a, LPoint3 const &b) const;

1124 17 get_approx_center 0 6 1409 42 GeometricBoundingVolume::get_approx_center 0 1 431 0
75
virtual LPoint3 GeometricBoundingVolume::get_approx_center(void) const = 0;

1125 5 xform 0 6 1409 30 GeometricBoundingVolume::xform 0 1 432 0
69
virtual void GeometricBoundingVolume::xform(LMatrix4 const &mat) = 0;

1126 14 get_class_type 0 4 1409 39 GeometricBoundingVolume::get_class_type 0 1 433 0
64
static TypeHandle GeometricBoundingVolume::get_class_type(void);

1127 24 ~GeometricBoundingVolume 0 4 1409 49 GeometricBoundingVolume::~GeometricBoundingVolume 0 0 0
56
GeometricBoundingVolume::~GeometricBoundingVolume(void);

1128 7 get_min 0 6 1410 29 FiniteBoundingVolume::get_min 0 1 434 0
62
virtual LPoint3 FiniteBoundingVolume::get_min(void) const = 0;

1129 7 get_max 0 6 1410 29 FiniteBoundingVolume::get_max 0 1 435 0
62
virtual LPoint3 FiniteBoundingVolume::get_max(void) const = 0;

1130 10 get_volume 0 6 1410 32 FiniteBoundingVolume::get_volume 0 1 436 10
/**
 *
 */
65
virtual PN_stdfloat FiniteBoundingVolume::get_volume(void) const;

1131 14 get_class_type 0 4 1410 36 FiniteBoundingVolume::get_class_type 0 1 437 0
61
static TypeHandle FiniteBoundingVolume::get_class_type(void);

1132 21 ~FiniteBoundingVolume 0 4 1410 43 FiniteBoundingVolume::~FiniteBoundingVolume 0 0 0
50
FiniteBoundingVolume::~FiniteBoundingVolume(void);

1133 10 LParabolaf 0 4 1411 22 LParabolaf::LParabolaf 0 3 438 439 440 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolaf::LParabolaf(void);
inline LParabolaf::LParabolaf(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);
inline LParabolaf::LParabolaf(LParabolaf const &copy);

1134 10 operator = 0 4 1411 22 LParabolaf::operator = 0 1 441 0
59
inline void LParabolaf::operator =(LParabolaf const &copy);

1135 11 ~LParabolaf 0 4 1411 23 LParabolaf::~LParabolaf 0 0 10
/**
 *
 */
37
inline LParabolaf::~LParabolaf(void);

1136 5 xform 0 4 1411 17 LParabolaf::xform 0 1 442 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolaf::xform(LMatrix4f const &mat);

1137 5 get_a 0 4 1411 17 LParabolaf::get_a 0 1 443 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3f const &LParabolaf::get_a(void) const;

1138 5 get_b 0 4 1411 17 LParabolaf::get_b 0 1 444 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3f const &LParabolaf::get_b(void) const;

1139 5 get_c 0 4 1411 17 LParabolaf::get_c 0 1 445 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3f const &LParabolaf::get_c(void) const;

1140 10 calc_point 0 4 1411 22 LParabolaf::calc_point 0 1 446 56
/**
 * Computes the point on the parabola at time t.
 */
54
inline LPoint3f LParabolaf::calc_point(float t) const;

1141 6 output 0 4 1411 18 LParabolaf::output 0 1 447 10
/**
 *
 */
44
void LParabolaf::output(ostream &out) const;

1142 5 write 0 4 1411 17 LParabolaf::write 0 1 448 10
/**
 *
 */
65
void LParabolaf::write(ostream &out, int indent_level = 0) const;

1143 20 write_datagram_fixed 0 4 1411 32 LParabolaf::write_datagram_fixed 0 1 449 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolaf::write_datagram_fixed(Datagram &destination) const;

1144 19 read_datagram_fixed 0 4 1411 31 LParabolaf::read_datagram_fixed 0 1 450 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolaf::read_datagram_fixed(DatagramIterator &source);

1145 14 write_datagram 0 4 1411 26 LParabolaf::write_datagram 0 1 451 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolaf::write_datagram(Datagram &destination) const;

1146 13 read_datagram 0 4 1411 25 LParabolaf::read_datagram 0 1 452 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolaf::read_datagram(DatagramIterator &source);

1147 10 LParabolad 0 4 1412 22 LParabolad::LParabolad 0 3 453 454 455 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolad::LParabolad(void);
inline LParabolad::LParabolad(LVecBase3d const &a, LVecBase3d const &b, LVecBase3d const &c);
inline LParabolad::LParabolad(LParabolad const &copy);

1148 10 operator = 0 4 1412 22 LParabolad::operator = 0 1 456 0
59
inline void LParabolad::operator =(LParabolad const &copy);

1149 11 ~LParabolad 0 4 1412 23 LParabolad::~LParabolad 0 0 10
/**
 *
 */
37
inline LParabolad::~LParabolad(void);

1150 5 xform 0 4 1412 17 LParabolad::xform 0 1 457 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolad::xform(LMatrix4d const &mat);

1151 5 get_a 0 4 1412 17 LParabolad::get_a 0 1 458 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3d const &LParabolad::get_a(void) const;

1152 5 get_b 0 4 1412 17 LParabolad::get_b 0 1 459 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3d const &LParabolad::get_b(void) const;

1153 5 get_c 0 4 1412 17 LParabolad::get_c 0 1 460 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3d const &LParabolad::get_c(void) const;

1154 10 calc_point 0 4 1412 22 LParabolad::calc_point 0 1 461 56
/**
 * Computes the point on the parabola at time t.
 */
55
inline LPoint3d LParabolad::calc_point(double t) const;

1155 6 output 0 4 1412 18 LParabolad::output 0 1 462 10
/**
 *
 */
44
void LParabolad::output(ostream &out) const;

1156 5 write 0 4 1412 17 LParabolad::write 0 1 463 10
/**
 *
 */
65
void LParabolad::write(ostream &out, int indent_level = 0) const;

1157 20 write_datagram_fixed 0 4 1412 32 LParabolad::write_datagram_fixed 0 1 464 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolad::write_datagram_fixed(Datagram &destination) const;

1158 19 read_datagram_fixed 0 4 1412 31 LParabolad::read_datagram_fixed 0 1 465 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolad::read_datagram_fixed(DatagramIterator &source);

1159 14 write_datagram 0 4 1412 26 LParabolad::write_datagram 0 1 466 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolad::write_datagram(Datagram &destination) const;

1160 13 read_datagram 0 4 1412 25 LParabolad::read_datagram 0 1 467 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolad::read_datagram(DatagramIterator &source);

1161 7 LPlanef 0 4 1414 16 LPlanef::LPlanef 0 6 468 469 470 471 472 473 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
347
inline LPlanef::LPlanef(void);
inline LPlanef::LPlanef(LVecBase4f const &copy);
inline LPlanef::LPlanef(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c);
inline LPlanef::LPlanef(LVector3f const &normal, LPoint3f const &point);
inline LPlanef::LPlanef(float a, float b, float c, float d);
inline LPlanef::LPlanef(LPlanef const &) = default;

1162 10 operator * 0 4 1414 19 LPlanef::operator * 0 2 474 475 0
127
inline LPlanef LPlanef::operator *(LMatrix3f const &mat) const;
inline LPlanef LPlanef::operator *(LMatrix4f const &mat) const;

1163 11 operator *= 0 4 1414 20 LPlanef::operator *= 0 1 476 0
55
inline void LPlanef::operator *=(LMatrix4f const &mat);

1164 5 xform 0 4 1414 14 LPlanef::xform 0 1 477 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlanef::xform(LMatrix4f const &mat);

1165 10 operator - 0 68 1414 19 LPlanef::operator - 0 1 478 0
47
inline LPlanef LPlanef::operator -(void) const;

1166 18 get_reflection_mat 0 4 1414 27 LPlanef::get_reflection_mat 0 1 479 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4f LPlanef::get_reflection_mat(void) const;

1167 10 get_normal 0 4 1414 19 LPlanef::get_normal 0 1 480 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3f LPlanef::get_normal(void) const;

1168 9 get_point 0 4 1414 18 LPlanef::get_point 0 1 481 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3f LPlanef::get_point(void) const;

1169 13 dist_to_plane 0 4 1414 22 LPlanef::dist_to_plane 0 1 482 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
65
inline float LPlanef::dist_to_plane(LPoint3f const &point) const;

1170 7 project 0 4 1414 16 LPlanef::project 0 1 483 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3f LPlanef::project(LPoint3f const &point) const;

1171 4 flip 0 4 1414 13 LPlanef::flip 0 1 484 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlanef::flip(void);

1172 15 intersects_line 0 4 1414 24 LPlanef::intersects_line 0 1 485 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
213
inline bool LPlanef::intersects_line(LPoint3f &intersection_point, LPoint3f const &p1, LPoint3f const &p2) const;
inline bool LPlanef::intersects_line(float &t, LPoint3f const &from, LVector3f const &delta) const;

1173 16 intersects_plane 0 4 1414 25 LPlanef::intersects_plane 0 1 486 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlanef::intersects_plane(LPoint3f &from, LVector3f &delta, LPlanef const &other) const;

1174 19 intersects_parabola 0 4 1414 28 LPlanef::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
90
bool LPlanef::intersects_parabola(float &t1, float &t2, LParabolaf const &parabola) const;

1175 6 output 0 4 1414 15 LPlanef::output 0 1 487 10
/**
 *
 */
41
void LPlanef::output(ostream &out) const;

1176 5 write 0 4 1414 14 LPlanef::write 0 1 488 10
/**
 *
 */
62
void LPlanef::write(ostream &out, int indent_level = 0) const;

1177 8 ~LPlanef 0 4 1414 17 LPlanef::~LPlanef 0 0 0
24
LPlanef::~LPlanef(void);

1178 7 LPlaned 0 4 1416 16 LPlaned::LPlaned 0 6 489 490 491 492 493 494 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
351
inline LPlaned::LPlaned(void);
inline LPlaned::LPlaned(LVecBase4d const &copy);
inline LPlaned::LPlaned(LPoint3d const &a, LPoint3d const &b, LPoint3d const &c);
inline LPlaned::LPlaned(LVector3d const &normal, LPoint3d const &point);
inline LPlaned::LPlaned(double a, double b, double c, double d);
inline LPlaned::LPlaned(LPlaned const &) = default;

1179 10 operator * 0 4 1416 19 LPlaned::operator * 0 2 495 496 0
127
inline LPlaned LPlaned::operator *(LMatrix3d const &mat) const;
inline LPlaned LPlaned::operator *(LMatrix4d const &mat) const;

1180 11 operator *= 0 4 1416 20 LPlaned::operator *= 0 1 497 0
55
inline void LPlaned::operator *=(LMatrix4d const &mat);

1181 5 xform 0 4 1416 14 LPlaned::xform 0 1 498 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlaned::xform(LMatrix4d const &mat);

1182 10 operator - 0 68 1416 19 LPlaned::operator - 0 1 499 0
47
inline LPlaned LPlaned::operator -(void) const;

1183 18 get_reflection_mat 0 4 1416 27 LPlaned::get_reflection_mat 0 1 500 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4d LPlaned::get_reflection_mat(void) const;

1184 10 get_normal 0 4 1416 19 LPlaned::get_normal 0 1 501 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3d LPlaned::get_normal(void) const;

1185 9 get_point 0 4 1416 18 LPlaned::get_point 0 1 502 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3d LPlaned::get_point(void) const;

1186 13 dist_to_plane 0 4 1416 22 LPlaned::dist_to_plane 0 1 503 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
66
inline double LPlaned::dist_to_plane(LPoint3d const &point) const;

1187 7 project 0 4 1416 16 LPlaned::project 0 1 504 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3d LPlaned::project(LPoint3d const &point) const;

1188 4 flip 0 4 1416 13 LPlaned::flip 0 1 505 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlaned::flip(void);

1189 15 intersects_line 0 4 1416 24 LPlaned::intersects_line 0 1 506 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
214
inline bool LPlaned::intersects_line(LPoint3d &intersection_point, LPoint3d const &p1, LPoint3d const &p2) const;
inline bool LPlaned::intersects_line(double &t, LPoint3d const &from, LVector3d const &delta) const;

1190 16 intersects_plane 0 4 1416 25 LPlaned::intersects_plane 0 1 507 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlaned::intersects_plane(LPoint3d &from, LVector3d &delta, LPlaned const &other) const;

1191 19 intersects_parabola 0 4 1416 28 LPlaned::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
92
bool LPlaned::intersects_parabola(double &t1, double &t2, LParabolad const &parabola) const;

1192 6 output 0 4 1416 15 LPlaned::output 0 1 508 10
/**
 *
 */
41
void LPlaned::output(ostream &out) const;

1193 5 write 0 4 1416 14 LPlaned::write 0 1 509 10
/**
 *
 */
62
void LPlaned::write(ostream &out, int indent_level = 0) const;

1194 8 ~LPlaned 0 4 1416 17 LPlaned::~LPlaned 0 0 0
24
LPlaned::~LPlaned(void);

1195 11 BoundingBox 0 4 1422 24 BoundingBox::BoundingBox 0 2 510 511 88
/**
 * Constructs an empty box object.
 */

/**
 * Constructs a specific box object.
 */
111
inline BoundingBox::BoundingBox(void);
inline BoundingBox::BoundingBox(LPoint3 const &min, LPoint3 const &max);

1196 12 operator new 0 4 1422 25 BoundingBox::operator new 0 1 512 0
126
inline void *BoundingBox::operator new(std::size_t size);
inline void *BoundingBox::operator new(std::size_t size, void *ptr);

1197 15 operator delete 0 4 1422 28 BoundingBox::operator delete 0 0 0
110
inline void BoundingBox::operator delete(void *ptr);
inline void BoundingBox::operator delete(void *, void *);

1198 12 validate_ptr 0 4 1422 25 BoundingBox::validate_ptr 0 0 0
62
static inline bool BoundingBox::validate_ptr(void const *ptr);

1199 14 get_num_points 0 4 1422 27 BoundingBox::get_num_points 0 1 513 68
/**
 * Returns 8: the number of vertices of a rectangular solid.
 */
51
inline int BoundingBox::get_num_points(void) const;

1200 9 get_point 0 4 1422 22 BoundingBox::get_point 0 1 514 59
/**
 * Returns the nth vertex of the rectangular solid.
 */
51
inline LPoint3 BoundingBox::get_point(int n) const;

1201 14 get_num_planes 0 4 1422 27 BoundingBox::get_num_planes 0 1 515 65
/**
 * Returns 6: the number of faces of a rectangular solid.
 */
51
inline int BoundingBox::get_num_planes(void) const;

1202 9 get_plane 0 4 1422 22 BoundingBox::get_plane 0 1 516 57
/**
 * Returns the nth face of the rectangular solid.
 */
50
inline LPlane BoundingBox::get_plane(int n) const;

1203 0 0 0 0 0 0 0 0
0

1204 0 0 0 0 0 0 0 0
0

1205 11 set_min_max 0 4 1422 24 BoundingBox::set_min_max 0 1 517 63
/**
 * Sets the min and max point of the rectangular solid.
 */
77
inline void BoundingBox::set_min_max(LPoint3 const &min, LPoint3 const &max);

1206 14 get_class_type 0 4 1422 27 BoundingBox::get_class_type 0 1 518 0
52
static TypeHandle BoundingBox::get_class_type(void);

1207 12 ~BoundingBox 0 4 1422 25 BoundingBox::~BoundingBox 0 0 0
32
BoundingBox::~BoundingBox(void);

1208 9 LFrustumf 0 4 1425 20 LFrustumf::LFrustumf 0 2 519 520 10
/**
 *
 */
92
inline LFrustumf::LFrustumf(void);
inline LFrustumf::LFrustumf(LFrustumf const &) = default;

1209 13 make_ortho_2D 0 4 1425 24 LFrustumf::make_ortho_2D 0 2 521 522 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
117
inline void LFrustumf::make_ortho_2D(void);
inline void LFrustumf::make_ortho_2D(float l, float r, float t, float b);

1210 10 make_ortho 0 4 1425 21 LFrustumf::make_ortho 0 2 523 524 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
155
inline void LFrustumf::make_ortho(float fnear, float ffar);
inline void LFrustumf::make_ortho(float fnear, float ffar, float l, float r, float t, float b);

1211 21 make_perspective_hfov 0 4 1425 32 LFrustumf::make_perspective_hfov 0 1 525 238
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */
96
inline void LFrustumf::make_perspective_hfov(float xfov, float aspect, float fnear, float ffar);

1212 21 make_perspective_vfov 0 4 1425 32 LFrustumf::make_perspective_vfov 0 1 526 0
96
inline void LFrustumf::make_perspective_vfov(float yfov, float aspect, float fnear, float ffar);

1213 16 make_perspective 0 4 1425 27 LFrustumf::make_perspective 0 1 527 0
89
inline void LFrustumf::make_perspective(float xfov, float yfov, float fnear, float ffar);

1214 22 get_perspective_params 0 4 1425 33 LFrustumf::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
228
inline void LFrustumf::get_perspective_params(float &yfov, float &aspect, float &fnear, float &ffar) const;
inline void LFrustumf::get_perspective_params(float &xfov, float &yfov, float &aspect, float &fnear, float &ffar) const;

1215 10 ~LFrustumf 0 4 1425 21 LFrustumf::~LFrustumf 0 0 0
28
LFrustumf::~LFrustumf(void);

1216 9 LFrustumd 0 4 1426 20 LFrustumd::LFrustumd 0 2 528 529 10
/**
 *
 */
92
inline LFrustumd::LFrustumd(void);
inline LFrustumd::LFrustumd(LFrustumd const &) = default;

1217 13 make_ortho_2D 0 4 1426 24 LFrustumd::make_ortho_2D 0 2 530 531 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
121
inline void LFrustumd::make_ortho_2D(void);
inline void LFrustumd::make_ortho_2D(double l, double r, double t, double b);

1218 10 make_ortho 0 4 1426 21 LFrustumd::make_ortho 0 2 532 533 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
163
inline void LFrustumd::make_ortho(double fnear, double ffar);
inline void LFrustumd::make_ortho(double fnear, double ffar, double l, double r, double t, double b);

1219 21 make_perspective_hfov 0 4 1426 32 LFrustumd::make_perspective_hfov 0 1 534 238
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */
100
inline void LFrustumd::make_perspective_hfov(double xfov, double aspect, double fnear, double ffar);

1220 21 make_perspective_vfov 0 4 1426 32 LFrustumd::make_perspective_vfov 0 1 535 0
100
inline void LFrustumd::make_perspective_vfov(double yfov, double aspect, double fnear, double ffar);

1221 16 make_perspective 0 4 1426 27 LFrustumd::make_perspective 0 1 536 0
93
inline void LFrustumd::make_perspective(double xfov, double yfov, double fnear, double ffar);

1222 22 get_perspective_params 0 4 1426 33 LFrustumd::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
237
inline void LFrustumd::get_perspective_params(double &yfov, double &aspect, double &fnear, double &ffar) const;
inline void LFrustumd::get_perspective_params(double &xfov, double &yfov, double &aspect, double &fnear, double &ffar) const;

1223 10 ~LFrustumd 0 4 1426 21 LFrustumd::~LFrustumd 0 0 0
28
LFrustumd::~LFrustumd(void);

1224 18 BoundingHexahedron 0 4 1431 38 BoundingHexahedron::BoundingHexahedron 0 2 537 538 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
315
BoundingHexahedron::BoundingHexahedron(LFrustum const &frustum, bool is_ortho, CoordinateSystem cs = ::CS_default);
BoundingHexahedron::BoundingHexahedron(LPoint3 const &fll, LPoint3 const &flr, LPoint3 const &fur, LPoint3 const &ful, LPoint3 const &nll, LPoint3 const &nlr, LPoint3 const &nur, LPoint3 const &nul);

1225 14 get_num_points 0 4 1431 34 BoundingHexahedron::get_num_points 0 1 539 61
/**
 * Returns 8: the number of vertices of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_points(void) const;

1226 9 get_point 0 4 1431 29 BoundingHexahedron::get_point 0 1 540 52
/**
 * Returns the nth vertex of the hexahedron.
 */
58
inline LPoint3 BoundingHexahedron::get_point(int n) const;

1227 14 get_num_planes 0 4 1431 34 BoundingHexahedron::get_num_planes 0 1 541 58
/**
 * Returns 6: the number of faces of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_planes(void) const;

1228 9 get_plane 0 4 1431 29 BoundingHexahedron::get_plane 0 1 542 50
/**
 * Returns the nth face of the hexahedron.
 */
57
inline LPlane BoundingHexahedron::get_plane(int n) const;

1229 0 0 0 0 0 0 0 0
0

1230 0 0 0 0 0 0 0 0
0

1231 14 get_class_type 0 4 1431 34 BoundingHexahedron::get_class_type 0 1 543 0
59
static TypeHandle BoundingHexahedron::get_class_type(void);

1232 19 ~BoundingHexahedron 0 4 1431 39 BoundingHexahedron::~BoundingHexahedron 0 0 0
46
BoundingHexahedron::~BoundingHexahedron(void);

1233 12 BoundingLine 0 4 1432 26 BoundingLine::BoundingLine 0 1 544 22
/**
 *
 */

/**
 *
 */
70
inline BoundingLine::BoundingLine(LPoint3 const &a, LPoint3 const &b);

1234 12 operator new 0 4 1432 26 BoundingLine::operator new 0 1 545 0
128
inline void *BoundingLine::operator new(std::size_t size);
inline void *BoundingLine::operator new(std::size_t size, void *ptr);

1235 15 operator delete 0 4 1432 29 BoundingLine::operator delete 0 0 0
112
inline void BoundingLine::operator delete(void *ptr);
inline void BoundingLine::operator delete(void *, void *);

1236 12 validate_ptr 0 4 1432 26 BoundingLine::validate_ptr 0 0 0
63
static inline bool BoundingLine::validate_ptr(void const *ptr);

1237 11 get_point_a 0 4 1432 25 BoundingLine::get_point_a 0 1 546 57
/**
 * Returns the first point that defines the line.
 */
60
inline LPoint3 const &BoundingLine::get_point_a(void) const;

1238 11 get_point_b 0 4 1432 25 BoundingLine::get_point_b 0 1 547 58
/**
 * Returns the second point that defines the line.
 */
53
inline LPoint3 BoundingLine::get_point_b(void) const;

1239 14 get_class_type 0 4 1432 28 BoundingLine::get_class_type 0 1 548 0
53
static TypeHandle BoundingLine::get_class_type(void);

1240 13 ~BoundingLine 0 4 1432 27 BoundingLine::~BoundingLine 0 0 0
34
BoundingLine::~BoundingLine(void);

1241 13 BoundingPlane 0 4 1433 28 BoundingPlane::BoundingPlane 0 2 549 550 77
/**
 * Constructs an empty "plane" that has no intersections.
 */

/**
 *
 */
100
inline BoundingPlane::BoundingPlane(void);
inline BoundingPlane::BoundingPlane(LPlane const &plane);

1242 12 operator new 0 4 1433 27 BoundingPlane::operator new 0 1 551 0
130
inline void *BoundingPlane::operator new(std::size_t size);
inline void *BoundingPlane::operator new(std::size_t size, void *ptr);

1243 15 operator delete 0 4 1433 30 BoundingPlane::operator delete 0 0 0
114
inline void BoundingPlane::operator delete(void *ptr);
inline void BoundingPlane::operator delete(void *, void *);

1244 12 validate_ptr 0 4 1433 27 BoundingPlane::validate_ptr 0 0 0
64
static inline bool BoundingPlane::validate_ptr(void const *ptr);

1245 9 get_plane 0 4 1433 24 BoundingPlane::get_plane 0 1 552 10
/**
 *
 */
58
inline LPlane const &BoundingPlane::get_plane(void) const;

1246 14 get_class_type 0 4 1433 29 BoundingPlane::get_class_type 0 1 553 0
54
static TypeHandle BoundingPlane::get_class_type(void);

1247 14 ~BoundingPlane 0 4 1433 29 BoundingPlane::~BoundingPlane 0 0 0
36
BoundingPlane::~BoundingPlane(void);

1248 14 BoundingSphere 0 4 1434 30 BoundingSphere::BoundingSphere 0 2 554 555 80
/**
 * Constructs an empty sphere.
 */

/**
 * Constructs a specific sphere.
 */
126
inline BoundingSphere::BoundingSphere(void);
inline BoundingSphere::BoundingSphere(LPoint3 const &center, PN_stdfloat radius);

1249 12 operator new 0 4 1434 28 BoundingSphere::operator new 0 1 556 0
132
inline void *BoundingSphere::operator new(std::size_t size);
inline void *BoundingSphere::operator new(std::size_t size, void *ptr);

1250 15 operator delete 0 4 1434 31 BoundingSphere::operator delete 0 0 0
116
inline void BoundingSphere::operator delete(void *ptr);
inline void BoundingSphere::operator delete(void *, void *);

1251 12 validate_ptr 0 4 1434 28 BoundingSphere::validate_ptr 0 0 0
65
static inline bool BoundingSphere::validate_ptr(void const *ptr);

1252 10 get_center 0 4 1434 26 BoundingSphere::get_center 0 1 557 10
/**
 *
 */
54
inline LPoint3 BoundingSphere::get_center(void) const;

1253 10 get_radius 0 4 1434 26 BoundingSphere::get_radius 0 1 558 10
/**
 *
 */
58
inline PN_stdfloat BoundingSphere::get_radius(void) const;

1254 10 set_center 0 4 1434 26 BoundingSphere::set_center 0 1 559 47
/**
 * Sets the center point of the sphere.
 */
62
inline void BoundingSphere::set_center(LPoint3 const &center);

1255 10 set_radius 0 4 1434 26 BoundingSphere::set_radius 0 1 560 41
/**
 * Sets the radius of the sphere.
 */
59
inline void BoundingSphere::set_radius(PN_stdfloat radius);

1256 14 get_class_type 0 4 1434 30 BoundingSphere::get_class_type 0 1 561 0
55
static TypeHandle BoundingSphere::get_class_type(void);

1257 15 ~BoundingSphere 0 4 1434 31 BoundingSphere::~BoundingSphere 0 0 0
38
BoundingSphere::~BoundingSphere(void);

1258 26 IntersectionBoundingVolume 0 4 1435 54 IntersectionBoundingVolume::IntersectionBoundingVolume 0 1 562 56
/**
 * Constructs an empty intersection.
 */

/**
 *
 */
68
inline IntersectionBoundingVolume::IntersectionBoundingVolume(void);

1259 12 operator new 0 4 1435 40 IntersectionBoundingVolume::operator new 0 1 563 0
156
inline void *IntersectionBoundingVolume::operator new(std::size_t size);
inline void *IntersectionBoundingVolume::operator new(std::size_t size, void *ptr);

1260 15 operator delete 0 4 1435 43 IntersectionBoundingVolume::operator delete 0 0 0
140
inline void IntersectionBoundingVolume::operator delete(void *ptr);
inline void IntersectionBoundingVolume::operator delete(void *, void *);

1261 12 validate_ptr 0 4 1435 40 IntersectionBoundingVolume::validate_ptr 0 0 0
77
static inline bool IntersectionBoundingVolume::validate_ptr(void const *ptr);

1262 18 get_num_components 0 4 1435 46 IntersectionBoundingVolume::get_num_components 0 1 564 64
/**
 * Returns the number of components in the intersection.
 */
70
inline int IntersectionBoundingVolume::get_num_components(void) const;

1263 13 get_component 0 4 1435 41 IntersectionBoundingVolume::get_component 0 1 565 57
/**
 * Returns the nth component in the intersection.
 */
93
inline GeometricBoundingVolume const *IntersectionBoundingVolume::get_component(int n) const;

1264 0 0 0 0 0 0 0 0
0

1265 16 clear_components 0 4 1435 44 IntersectionBoundingVolume::clear_components 0 1 566 50
/**
 * Removes all components from the volume.
 */
56
void IntersectionBoundingVolume::clear_components(void);

1266 13 add_component 0 4 1435 41 IntersectionBoundingVolume::add_component 0 1 567 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
89
void IntersectionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1267 14 get_class_type 0 4 1435 42 IntersectionBoundingVolume::get_class_type 0 1 568 0
67
static TypeHandle IntersectionBoundingVolume::get_class_type(void);

1268 27 ~IntersectionBoundingVolume 0 4 1435 55 IntersectionBoundingVolume::~IntersectionBoundingVolume 0 0 0
62
IntersectionBoundingVolume::~IntersectionBoundingVolume(void);

1269 8 heads_up 0 1 0 8 heads_up 0 12 668 669 670 671 672 673 674 675 676 677 678 679 0
1309
void heads_up(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ::LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ::LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ::LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void heads_up(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ::LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ::LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ::LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1270 7 look_at 0 1 0 7 look_at 0 12 680 681 682 683 684 685 686 687 688 689 690 691 0
1297
void look_at(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ::LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ::LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ::LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void look_at(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ::LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ::LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ::LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1271 8 Mersenne 0 4 1438 18 Mersenne::Mersenne 0 1 569 35
/* initializes mt[N] with a seed */
43
Mersenne::Mersenne(unsigned long int seed);

1272 10 get_uint31 0 4 1438 20 Mersenne::get_uint31 0 1 570 58
/* generates a random number on [0,0x7fffffff]-interval */
45
unsigned long int Mersenne::get_uint31(void);

1273 9 ~Mersenne 0 4 1438 19 Mersenne::~Mersenne 0 0 0
26
Mersenne::~Mersenne(void);

1274 18 OmniBoundingVolume 0 4 1440 38 OmniBoundingVolume::OmniBoundingVolume 0 1 571 10
/**
 *
 */
52
inline OmniBoundingVolume::OmniBoundingVolume(void);

1275 14 get_class_type 0 4 1440 34 OmniBoundingVolume::get_class_type 0 1 572 0
59
static TypeHandle OmniBoundingVolume::get_class_type(void);

1276 19 ~OmniBoundingVolume 0 4 1440 39 OmniBoundingVolume::~OmniBoundingVolume 0 0 0
46
OmniBoundingVolume::~OmniBoundingVolume(void);

1277 19 UnionBoundingVolume 0 4 1441 40 UnionBoundingVolume::UnionBoundingVolume 0 1 573 49
/**
 * Constructs an empty union.
 */

/**
 *
 */
54
inline UnionBoundingVolume::UnionBoundingVolume(void);

1278 12 operator new 0 4 1441 33 UnionBoundingVolume::operator new 0 1 574 0
142
inline void *UnionBoundingVolume::operator new(std::size_t size);
inline void *UnionBoundingVolume::operator new(std::size_t size, void *ptr);

1279 15 operator delete 0 4 1441 36 UnionBoundingVolume::operator delete 0 0 0
126
inline void UnionBoundingVolume::operator delete(void *ptr);
inline void UnionBoundingVolume::operator delete(void *, void *);

1280 12 validate_ptr 0 4 1441 33 UnionBoundingVolume::validate_ptr 0 0 0
70
static inline bool UnionBoundingVolume::validate_ptr(void const *ptr);

1281 18 get_num_components 0 4 1441 39 UnionBoundingVolume::get_num_components 0 1 575 57
/**
 * Returns the number of components in the union.
 */
63
inline int UnionBoundingVolume::get_num_components(void) const;

1282 13 get_component 0 4 1441 34 UnionBoundingVolume::get_component 0 1 576 50
/**
 * Returns the nth component in the union.
 */
86
inline GeometricBoundingVolume const *UnionBoundingVolume::get_component(int n) const;

1283 0 0 0 0 0 0 0 0
0

1284 16 clear_components 0 4 1441 37 UnionBoundingVolume::clear_components 0 1 577 50
/**
 * Removes all components from the volume.
 */
49
void UnionBoundingVolume::clear_components(void);

1285 13 add_component 0 4 1441 34 UnionBoundingVolume::add_component 0 1 578 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
82
void UnionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1286 19 filter_intersection 0 4 1441 40 UnionBoundingVolume::filter_intersection 0 1 579 104
/**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */
76
void UnionBoundingVolume::filter_intersection(BoundingVolume const *volume);

1287 14 get_class_type 0 4 1441 35 UnionBoundingVolume::get_class_type 0 1 580 0
60
static TypeHandle UnionBoundingVolume::get_class_type(void);

1288 20 ~UnionBoundingVolume 0 4 1441 41 UnionBoundingVolume::~UnionBoundingVolume 0 0 0
48
UnionBoundingVolume::~UnionBoundingVolume(void);

1289 10 Randomizer 0 4 1442 22 Randomizer::Randomizer 0 2 581 582 120
/**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 *
 */
113
inline Randomizer::Randomizer(unsigned long int seed = 0);
inline Randomizer::Randomizer(Randomizer const &copy);

1290 10 operator = 0 4 1442 22 Randomizer::operator = 0 1 583 0
59
inline void Randomizer::operator =(Randomizer const &copy);

1291 10 random_int 0 4 1442 22 Randomizer::random_int 0 1 584 60
/**
 * Returns a random integer in the range [0, range).
 */
45
inline int Randomizer::random_int(int range);

1292 11 random_real 0 4 1442 23 Randomizer::random_real 0 1 585 59
/**
 * Returns a random double in the range [0, range).
 */
52
inline double Randomizer::random_real(double range);

1293 16 random_real_unit 0 4 1442 28 Randomizer::random_real_unit 0 1 586 60
/**
 * Returns a random double in the range [-0.5, 0.5).
 */
49
inline double Randomizer::random_real_unit(void);

1294 13 get_next_seed 0 4 1442 25 Randomizer::get_next_seed 0 1 587 77
/**
 * Returns a random seed value for the next global Randomizer object.
 */
64
static inline unsigned long int Randomizer::get_next_seed(void);

1295 8 get_seed 0 4 1442 20 Randomizer::get_seed 0 1 588 126
/**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */
52
inline unsigned long int Randomizer::get_seed(void);

1296 11 ~Randomizer 0 4 1442 23 Randomizer::~Randomizer 0 0 0
30
Randomizer::~Randomizer(void);

1297 8 get_seed 0 4 1443 21 PerlinNoise::get_seed 0 1 589 127
/**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */
53
inline unsigned long int PerlinNoise::get_seed(void);

1298 12 ~PerlinNoise 0 4 1443 25 PerlinNoise::~PerlinNoise 0 0 0
32
PerlinNoise::~PerlinNoise(void);

1299 12 PerlinNoise2 0 4 1444 26 PerlinNoise2::PerlinNoise2 0 3 590 591 592 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
208
inline PerlinNoise2::PerlinNoise2(void);
inline PerlinNoise2::PerlinNoise2(double sx, double sy, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise2::PerlinNoise2(PerlinNoise2 const &copy);

1300 10 operator = 0 4 1444 24 PerlinNoise2::operator = 0 1 593 0
63
inline void PerlinNoise2::operator =(PerlinNoise2 const &copy);

1301 9 set_scale 0 4 1444 23 PerlinNoise2::set_scale 0 4 594 595 596 597 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
233
inline void PerlinNoise2::set_scale(double scale);
inline void PerlinNoise2::set_scale(double sx, double sy);
inline void PerlinNoise2::set_scale(LVecBase2f const &scale);
inline void PerlinNoise2::set_scale(LVecBase2d const &scale);

1302 5 noise 0 4 1444 19 PerlinNoise2::noise 0 3 598 599 600 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
184
inline double PerlinNoise2::noise(double x, double y) const;
inline float PerlinNoise2::noise(LVecBase2f const &value) const;
double PerlinNoise2::noise(LVecBase2d const &value) const;

1303 11 operator () 0 4 1444 25 PerlinNoise2::operator () 0 3 601 602 603 0
209
inline double PerlinNoise2::operator ()(double x, double y) const;
inline float PerlinNoise2::operator ()(LVecBase2f const &value) const;
inline double PerlinNoise2::operator ()(LVecBase2d const &value) const;

1304 13 ~PerlinNoise2 0 4 1444 27 PerlinNoise2::~PerlinNoise2 0 0 0
34
PerlinNoise2::~PerlinNoise2(void);

1305 12 PerlinNoise3 0 4 1445 26 PerlinNoise3::PerlinNoise3 0 3 604 605 606 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
219
inline PerlinNoise3::PerlinNoise3(void);
inline PerlinNoise3::PerlinNoise3(double sx, double sy, double sz, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise3::PerlinNoise3(PerlinNoise3 const &copy);

1306 10 operator = 0 4 1445 24 PerlinNoise3::operator = 0 1 607 0
63
inline void PerlinNoise3::operator =(PerlinNoise3 const &copy);

1307 9 set_scale 0 4 1445 23 PerlinNoise3::set_scale 0 4 608 609 610 611 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
244
inline void PerlinNoise3::set_scale(double scale);
inline void PerlinNoise3::set_scale(double sx, double sy, double sz);
inline void PerlinNoise3::set_scale(LVecBase3f const &scale);
inline void PerlinNoise3::set_scale(LVecBase3d const &scale);

1308 5 noise 0 4 1445 19 PerlinNoise3::noise 0 3 612 613 614 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
194
inline double PerlinNoise3::noise(double x, double y, double z) const;
inline float PerlinNoise3::noise(LVecBase3f const &value) const;
double PerlinNoise3::noise(LVecBase3d const &value) const;

1309 11 operator () 0 4 1445 25 PerlinNoise3::operator () 0 3 615 616 617 0
219
inline double PerlinNoise3::operator ()(double x, double y, double z) const;
inline float PerlinNoise3::operator ()(LVecBase3f const &value) const;
inline double PerlinNoise3::operator ()(LVecBase3d const &value) const;

1310 13 ~PerlinNoise3 0 4 1445 27 PerlinNoise3::~PerlinNoise3 0 0 0
34
PerlinNoise3::~PerlinNoise3(void);

1311 9 rotate_to 0 1 0 9 rotate_to 0 4 692 693 694 695 0
287
void rotate_to(LMatrix3f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix3d &mat, LVector3d const &a, LVector3d const &b);
void rotate_to(LMatrix4f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix4d &mat, LVector3d const &a, LVector3d const &b);

1312 19 StackedPerlinNoise2 0 4 1502 40 StackedPerlinNoise2::StackedPerlinNoise2 0 3 618 619 620 555
/**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */
314
inline StackedPerlinNoise2::StackedPerlinNoise2(void);
StackedPerlinNoise2::StackedPerlinNoise2(double sx, double sy, int num_levels = 2, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise2::StackedPerlinNoise2(StackedPerlinNoise2 const &copy);

1313 10 operator = 0 4 1502 31 StackedPerlinNoise2::operator = 0 1 621 0
70
void StackedPerlinNoise2::operator =(StackedPerlinNoise2 const &copy);

1314 9 add_level 0 4 1502 30 StackedPerlinNoise2::add_level 0 1 622 95
/**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise2::add_level(PerlinNoise2 const &level, double amp = 1.0);

1315 5 clear 0 4 1502 26 StackedPerlinNoise2::clear 0 1 623 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise2::clear(void);

1316 5 noise 0 4 1502 26 StackedPerlinNoise2::noise 0 3 624 625 626 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
187
inline double StackedPerlinNoise2::noise(double x, double y);
inline float StackedPerlinNoise2::noise(LVecBase2f const &value);
double StackedPerlinNoise2::noise(LVecBase2d const &value);

1317 11 operator () 0 4 1502 32 StackedPerlinNoise2::operator () 0 3 627 628 629 0
212
inline double StackedPerlinNoise2::operator ()(double x, double y);
inline float StackedPerlinNoise2::operator ()(LVecBase2f const &value);
inline double StackedPerlinNoise2::operator ()(LVecBase2d const &value);

1318 20 ~StackedPerlinNoise2 0 4 1502 41 StackedPerlinNoise2::~StackedPerlinNoise2 0 0 0
48
StackedPerlinNoise2::~StackedPerlinNoise2(void);

1319 19 StackedPerlinNoise3 0 4 1503 40 StackedPerlinNoise3::StackedPerlinNoise3 0 3 630 631 632 555
/**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */
325
inline StackedPerlinNoise3::StackedPerlinNoise3(void);
StackedPerlinNoise3::StackedPerlinNoise3(double sx, double sy, double sz, int num_levels = 3, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise3::StackedPerlinNoise3(StackedPerlinNoise3 const &copy);

1320 10 operator = 0 4 1503 31 StackedPerlinNoise3::operator = 0 1 633 0
70
void StackedPerlinNoise3::operator =(StackedPerlinNoise3 const &copy);

1321 9 add_level 0 4 1503 30 StackedPerlinNoise3::add_level 0 1 634 95
/**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise3::add_level(PerlinNoise3 const &level, double amp = 1.0);

1322 5 clear 0 4 1503 26 StackedPerlinNoise3::clear 0 1 635 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise3::clear(void);

1323 5 noise 0 4 1503 26 StackedPerlinNoise3::noise 0 3 636 637 638 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
197
inline double StackedPerlinNoise3::noise(double x, double y, double z);
inline float StackedPerlinNoise3::noise(LVecBase3f const &value);
double StackedPerlinNoise3::noise(LVecBase3d const &value);

1324 11 operator () 0 4 1503 32 StackedPerlinNoise3::operator () 0 3 639 640 641 0
222
inline double StackedPerlinNoise3::operator ()(double x, double y, double z);
inline float StackedPerlinNoise3::operator ()(LVecBase3f const &value);
inline double StackedPerlinNoise3::operator ()(LVecBase3d const &value);

1325 20 ~StackedPerlinNoise3 0 4 1503 41 StackedPerlinNoise3::~StackedPerlinNoise3 0 0 0
48
StackedPerlinNoise3::~StackedPerlinNoise3(void);

1326 12 Triangulator 0 4 1504 26 Triangulator::Triangulator 0 2 642 643 10
/**
 *
 */
100
Triangulator::Triangulator(void);
inline Triangulator::Triangulator(Triangulator const &) = default;

1327 5 clear 0 4 1504 19 Triangulator::clear 0 1 644 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
31
void Triangulator::clear(void);

1328 10 add_vertex 0 4 1504 24 Triangulator::add_vertex 0 2 645 646 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
109
int Triangulator::add_vertex(LPoint2d const &point);
inline int Triangulator::add_vertex(double x, double y);

1329 16 get_num_vertices 0 4 1504 30 Triangulator::get_num_vertices 0 1 647 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
54
inline int Triangulator::get_num_vertices(void) const;

1330 10 get_vertex 0 4 1504 24 Triangulator::get_vertex 0 1 648 34
/**
 * Returns the nth vertex.
 */
61
inline LPoint2d const &Triangulator::get_vertex(int n) const;

1331 0 0 0 0 0 0 0 0
0

1332 13 clear_polygon 0 4 1504 27 Triangulator::clear_polygon 0 1 649 112
/**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */
39
void Triangulator::clear_polygon(void);

1333 18 add_polygon_vertex 0 4 1504 32 Triangulator::add_polygon_vertex 0 1 650 334
/**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */
49
void Triangulator::add_polygon_vertex(int index);

1334 15 is_left_winding 0 4 1504 29 Triangulator::is_left_winding 0 1 651 145
/**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */
54
inline bool Triangulator::is_left_winding(void) const;

1335 10 begin_hole 0 4 1504 24 Triangulator::begin_hole 0 1 652 78
/**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */
36
void Triangulator::begin_hole(void);

1336 15 add_hole_vertex 0 4 1504 29 Triangulator::add_hole_vertex 0 1 653 277
/**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */
46
void Triangulator::add_hole_vertex(int index);

1337 11 triangulate 0 4 1504 25 Triangulator::triangulate 0 1 654 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
37
void Triangulator::triangulate(void);

1338 17 get_num_triangles 0 4 1504 31 Triangulator::get_num_triangles 0 1 655 94
/**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */
48
int Triangulator::get_num_triangles(void) const;

1339 15 get_triangle_v0 0 4 1504 29 Triangulator::get_triangle_v0 0 1 656 194
/**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v0(int n) const;

1340 15 get_triangle_v1 0 4 1504 29 Triangulator::get_triangle_v1 0 1 657 194
/**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v1(int n) const;

1341 15 get_triangle_v2 0 4 1504 29 Triangulator::get_triangle_v2 0 1 658 194
/**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v2(int n) const;

1342 13 ~Triangulator 0 4 1504 27 Triangulator::~Triangulator 0 0 0
34
Triangulator::~Triangulator(void);

1343 13 Triangulator3 0 4 1507 28 Triangulator3::Triangulator3 0 2 659 660 10
/**
 *
 */
105
Triangulator3::Triangulator3(void);
inline Triangulator3::Triangulator3(Triangulator3 const &) = default;

1344 5 clear 0 4 1507 20 Triangulator3::clear 0 1 661 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
32
void Triangulator3::clear(void);

1345 10 add_vertex 0 4 1507 25 Triangulator3::add_vertex 0 2 662 663 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
121
int Triangulator3::add_vertex(LPoint3d const &point);
inline int Triangulator3::add_vertex(double x, double y, double z);

1346 16 get_num_vertices 0 4 1507 31 Triangulator3::get_num_vertices 0 1 664 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
55
inline int Triangulator3::get_num_vertices(void) const;

1347 10 get_vertex 0 4 1507 25 Triangulator3::get_vertex 0 1 665 34
/**
 * Returns the nth vertex.
 */
62
inline LPoint3d const &Triangulator3::get_vertex(int n) const;

1348 11 triangulate 0 4 1507 26 Triangulator3::triangulate 0 1 666 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
38
void Triangulator3::triangulate(void);

1349 9 get_plane 0 4 1507 24 Triangulator3::get_plane 0 1 667 100
/**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */
59
inline LPlaned const &Triangulator3::get_plane(void) const;

1350 0 0 0 0 0 0 0 0
0

1351 14 ~Triangulator3 0 4 1507 29 Triangulator3::~Triangulator3 0 0 0
36
Triangulator3::~Triangulator3(void);

695
1 0 0 7 8 1513 709 0 0 1 4 copy 1 1511  
2 0 0 7 8 1513 709 0 0 1 4 copy 1 1514  
3 0 0 6 9 1516 0 0 0 1 4 this 3 1511  
4 0 0 6 10 1517 0 0 0 2 4 this 3 1511  1 n 1 1516  
5 0 0 6 11 1517 0 0 0 2 4 this 3 1511  1 n 1 1516  
6 0 0 6 12 1520 0 0 0 1 4 this 3 1511  
7 0 0 6 13 1520 0 0 0 3 4 this 3 1511  1 n 1 1516  5 count 1 1516  
8 0 0 6 14 1523 0 0 0 1 4 this 3 1511  
9 0 0 6 15 1523 0 0 0 1 4 this 3 1511  
10 0 0 6 16 1523 0 0 0 3 4 this 3 1511  4 view 1 1524  5 flags 1 1523  
11 0 0 4 17 1527 0 0 0 2 4 this 3 1511  4 view 1 1524  
12 0 0 4 5 1527 0 0 0 1 4 this 3 1528  
13 0 0 4 6 1527 0 0 0 2 4 this 3 1529  3 out 1 1531  
14 0 0 7 25 1535 723 0 0 1 4 copy 1 1533  
15 0 0 7 25 1535 723 0 0 1 4 copy 1 1536  
16 0 0 6 26 1516 0 0 0 1 4 this 3 1533  
17 0 0 6 27 1538 0 0 0 2 4 this 3 1533  1 n 1 1516  
18 0 0 6 28 1538 0 0 0 2 4 this 3 1533  1 n 1 1516  
19 0 0 6 29 1520 0 0 0 1 4 this 3 1533  
20 0 0 6 30 1520 0 0 0 3 4 this 3 1533  1 n 1 1516  5 count 1 1516  
21 0 0 6 31 1523 0 0 0 1 4 this 3 1533  
22 0 0 6 32 1523 0 0 0 1 4 this 3 1533  
23 0 0 6 33 1523 0 0 0 3 4 this 3 1533  4 view 1 1524  5 flags 1 1523  
24 0 0 4 34 1527 0 0 0 2 4 this 3 1533  4 view 1 1524  
25 0 0 4 22 1527 0 0 0 1 4 this 3 1541  
26 0 0 4 23 1527 0 0 0 2 4 this 3 1542  3 out 1 1531  
27 0 0 7 42 1546 737 0 0 1 4 copy 1 1544  
28 0 0 7 42 1546 737 0 0 1 4 copy 1 1547  
29 0 0 6 43 1516 0 0 0 1 4 this 3 1544  
30 0 0 6 44 1549 0 0 0 2 4 this 3 1544  1 n 1 1516  
31 0 0 6 45 1549 0 0 0 2 4 this 3 1544  1 n 1 1516  
32 0 0 6 46 1520 0 0 0 1 4 this 3 1544  
33 0 0 6 47 1520 0 0 0 3 4 this 3 1544  1 n 1 1516  5 count 1 1516  
34 0 0 6 48 1523 0 0 0 1 4 this 3 1544  
35 0 0 6 49 1523 0 0 0 1 4 this 3 1544  
36 0 0 6 50 1523 0 0 0 3 4 this 3 1544  4 view 1 1524  5 flags 1 1523  
37 0 0 4 51 1527 0 0 0 2 4 this 3 1544  4 view 1 1524  
38 0 0 4 39 1527 0 0 0 1 4 this 3 1552  
39 0 0 4 40 1527 0 0 0 2 4 this 3 1553  3 out 1 1531  
40 0 0 7 59 1557 751 0 0 1 4 copy 1 1555  
41 0 0 7 59 1557 751 0 0 1 4 copy 1 1558  
42 0 0 6 60 1516 0 0 0 1 4 this 3 1555  
43 0 0 6 61 1560 0 0 0 2 4 this 3 1555  1 n 1 1516  
44 0 0 6 62 1560 0 0 0 2 4 this 3 1555  1 n 1 1516  
45 0 0 6 63 1520 0 0 0 1 4 this 3 1555  
46 0 0 6 64 1520 0 0 0 3 4 this 3 1555  1 n 1 1516  5 count 1 1516  
47 0 0 6 65 1523 0 0 0 1 4 this 3 1555  
48 0 0 6 66 1523 0 0 0 1 4 this 3 1555  
49 0 0 6 67 1523 0 0 0 3 4 this 3 1555  4 view 1 1524  5 flags 1 1523  
50 0 0 4 68 1527 0 0 0 2 4 this 3 1555  4 view 1 1524  
51 0 0 4 56 1527 0 0 0 1 4 this 3 1563  
52 0 0 4 57 1527 0 0 0 2 4 this 3 1564  3 out 1 1531  
53 0 0 7 76 1568 765 0 0 1 4 copy 1 1566  
54 0 0 7 76 1568 765 0 0 1 4 copy 1 1569  
55 0 0 6 77 1516 0 0 0 1 4 this 3 1566  
56 0 0 6 78 1571 0 0 0 2 4 this 3 1566  1 n 1 1516  
57 0 0 6 79 1571 0 0 0 2 4 this 3 1566  1 n 1 1516  
58 0 0 6 80 1520 0 0 0 1 4 this 3 1566  
59 0 0 6 81 1520 0 0 0 3 4 this 3 1566  1 n 1 1516  5 count 1 1516  
60 0 0 6 82 1523 0 0 0 1 4 this 3 1566  
61 0 0 6 83 1523 0 0 0 1 4 this 3 1566  
62 0 0 6 84 1523 0 0 0 3 4 this 3 1566  4 view 1 1524  5 flags 1 1523  
63 0 0 4 85 1527 0 0 0 2 4 this 3 1566  4 view 1 1524  
64 0 0 4 73 1527 0 0 0 1 4 this 3 1574  
65 0 0 4 74 1527 0 0 0 2 4 this 3 1575  3 out 1 1531  
66 0 0 7 93 1579 779 0 0 1 4 copy 1 1577  
67 0 0 7 93 1579 779 0 0 1 4 copy 1 1580  
68 0 0 6 94 1516 0 0 0 1 4 this 3 1577  
69 0 0 6 95 1582 0 0 0 2 4 this 3 1577  1 n 1 1516  
70 0 0 6 96 1582 0 0 0 2 4 this 3 1577  1 n 1 1516  
71 0 0 6 97 1520 0 0 0 1 4 this 3 1577  
72 0 0 6 98 1520 0 0 0 3 4 this 3 1577  1 n 1 1516  5 count 1 1516  
73 0 0 6 99 1523 0 0 0 1 4 this 3 1577  
74 0 0 6 100 1523 0 0 0 1 4 this 3 1577  
75 0 0 6 101 1523 0 0 0 3 4 this 3 1577  4 view 1 1524  5 flags 1 1523  
76 0 0 4 102 1527 0 0 0 2 4 this 3 1577  4 view 1 1524  
77 0 0 4 90 1527 0 0 0 1 4 this 3 1585  
78 0 0 4 91 1527 0 0 0 2 4 this 3 1586  3 out 1 1531  
79 0 0 7 110 1590 793 0 0 1 4 copy 1 1588  
80 0 0 7 110 1590 793 0 0 1 4 copy 1 1591  
81 0 0 6 111 1516 0 0 0 1 4 this 3 1588  
82 0 0 6 112 1593 0 0 0 2 4 this 3 1588  1 n 1 1516  
83 0 0 6 113 1593 0 0 0 2 4 this 3 1588  1 n 1 1516  
84 0 0 6 114 1520 0 0 0 1 4 this 3 1588  
85 0 0 6 115 1520 0 0 0 3 4 this 3 1588  1 n 1 1516  5 count 1 1516  
86 0 0 6 116 1523 0 0 0 1 4 this 3 1588  
87 0 0 6 117 1523 0 0 0 1 4 this 3 1588  
88 0 0 6 118 1523 0 0 0 3 4 this 3 1588  4 view 1 1524  5 flags 1 1523  
89 0 0 4 119 1527 0 0 0 2 4 this 3 1588  4 view 1 1524  
90 0 0 4 107 1527 0 0 0 1 4 this 3 1596  
91 0 0 4 108 1527 0 0 0 2 4 this 3 1597  3 out 1 1531  
92 0 0 7 127 1601 807 0 0 1 4 copy 1 1599  
93 0 0 7 127 1601 807 0 0 1 4 copy 1 1602  
94 0 0 6 128 1516 0 0 0 1 4 this 3 1599  
95 0 0 6 129 1604 0 0 0 2 4 this 3 1599  1 n 1 1516  
96 0 0 6 130 1604 0 0 0 2 4 this 3 1599  1 n 1 1516  
97 0 0 6 131 1520 0 0 0 1 4 this 3 1599  
98 0 0 6 132 1520 0 0 0 3 4 this 3 1599  1 n 1 1516  5 count 1 1516  
99 0 0 6 133 1523 0 0 0 1 4 this 3 1599  
100 0 0 6 134 1523 0 0 0 1 4 this 3 1599  
101 0 0 6 135 1523 0 0 0 3 4 this 3 1599  4 view 1 1524  5 flags 1 1523  
102 0 0 4 136 1527 0 0 0 2 4 this 3 1599  4 view 1 1524  
103 0 0 4 124 1527 0 0 0 1 4 this 3 1607  
104 0 0 4 125 1527 0 0 0 2 4 this 3 1608  3 out 1 1531  
105 0 0 7 144 1612 821 0 0 1 4 copy 1 1610  
106 0 0 7 144 1612 821 0 0 1 4 copy 1 1613  
107 0 0 6 145 1516 0 0 0 1 4 this 3 1610  
108 0 0 6 146 1615 0 0 0 2 4 this 3 1610  1 n 1 1516  
109 0 0 6 147 1615 0 0 0 2 4 this 3 1610  1 n 1 1516  
110 0 0 6 148 1520 0 0 0 1 4 this 3 1610  
111 0 0 6 149 1520 0 0 0 3 4 this 3 1610  1 n 1 1516  5 count 1 1516  
112 0 0 6 150 1523 0 0 0 1 4 this 3 1610  
113 0 0 6 151 1523 0 0 0 1 4 this 3 1610  
114 0 0 6 152 1523 0 0 0 3 4 this 3 1610  4 view 1 1524  5 flags 1 1523  
115 0 0 4 153 1527 0 0 0 2 4 this 3 1610  4 view 1 1524  
116 0 0 4 141 1527 0 0 0 1 4 this 3 1618  
117 0 0 4 142 1527 0 0 0 2 4 this 3 1619  3 out 1 1531  
118 0 0 7 161 1623 835 0 0 1 4 copy 1 1621  
119 0 0 7 161 1623 835 0 0 1 4 copy 1 1624  
120 0 0 6 162 1516 0 0 0 1 4 this 3 1621  
121 0 0 6 163 1626 0 0 0 2 4 this 3 1621  1 n 1 1516  
122 0 0 6 164 1626 0 0 0 2 4 this 3 1621  1 n 1 1516  
123 0 0 6 165 1520 0 0 0 1 4 this 3 1621  
124 0 0 6 166 1520 0 0 0 3 4 this 3 1621  1 n 1 1516  5 count 1 1516  
125 0 0 6 167 1523 0 0 0 1 4 this 3 1621  
126 0 0 6 168 1523 0 0 0 1 4 this 3 1621  
127 0 0 6 169 1523 0 0 0 3 4 this 3 1621  4 view 1 1524  5 flags 1 1523  
128 0 0 4 170 1527 0 0 0 2 4 this 3 1621  4 view 1 1524  
129 0 0 4 158 1527 0 0 0 1 4 this 3 1629  
130 0 0 4 159 1527 0 0 0 2 4 this 3 1630  3 out 1 1531  
131 0 0 7 178 1634 849 0 0 1 4 copy 1 1632  
132 0 0 7 178 1634 849 0 0 1 4 copy 1 1635  
133 0 0 6 179 1516 0 0 0 1 4 this 3 1632  
134 0 0 6 180 1637 0 0 0 2 4 this 3 1632  1 n 1 1516  
135 0 0 6 181 1637 0 0 0 2 4 this 3 1632  1 n 1 1516  
136 0 0 6 182 1520 0 0 0 1 4 this 3 1632  
137 0 0 6 183 1520 0 0 0 3 4 this 3 1632  1 n 1 1516  5 count 1 1516  
138 0 0 6 184 1523 0 0 0 1 4 this 3 1632  
139 0 0 6 185 1523 0 0 0 1 4 this 3 1632  
140 0 0 6 186 1523 0 0 0 3 4 this 3 1632  4 view 1 1524  5 flags 1 1523  
141 0 0 4 187 1527 0 0 0 2 4 this 3 1632  4 view 1 1524  
142 0 0 4 175 1527 0 0 0 1 4 this 3 1640  
143 0 0 4 176 1527 0 0 0 2 4 this 3 1641  3 out 1 1531  
144 0 0 7 195 1645 863 0 0 1 4 copy 1 1643  
145 0 0 7 195 1645 863 0 0 1 4 copy 1 1646  
146 0 0 6 196 1516 0 0 0 1 4 this 3 1643  
147 0 0 6 197 1648 0 0 0 2 4 this 3 1643  1 n 1 1516  
148 0 0 6 198 1648 0 0 0 2 4 this 3 1643  1 n 1 1516  
149 0 0 6 199 1520 0 0 0 1 4 this 3 1643  
150 0 0 6 200 1520 0 0 0 3 4 this 3 1643  1 n 1 1516  5 count 1 1516  
151 0 0 6 201 1523 0 0 0 1 4 this 3 1643  
152 0 0 6 202 1523 0 0 0 1 4 this 3 1643  
153 0 0 6 203 1523 0 0 0 3 4 this 3 1643  4 view 1 1524  5 flags 1 1523  
154 0 0 4 204 1527 0 0 0 2 4 this 3 1643  4 view 1 1524  
155 0 0 4 192 1527 0 0 0 1 4 this 3 1651  
156 0 0 4 193 1527 0 0 0 2 4 this 3 1652  3 out 1 1531  
157 0 0 7 212 1656 877 0 0 1 4 copy 1 1654  
158 0 0 7 212 1656 877 0 0 1 4 copy 1 1657  
159 0 0 6 213 1516 0 0 0 1 4 this 3 1654  
160 0 0 6 214 1659 0 0 0 2 4 this 3 1654  1 n 1 1516  
161 0 0 6 215 1659 0 0 0 2 4 this 3 1654  1 n 1 1516  
162 0 0 6 216 1520 0 0 0 1 4 this 3 1654  
163 0 0 6 217 1520 0 0 0 3 4 this 3 1654  1 n 1 1516  5 count 1 1516  
164 0 0 6 218 1523 0 0 0 1 4 this 3 1654  
165 0 0 6 219 1523 0 0 0 1 4 this 3 1654  
166 0 0 6 220 1523 0 0 0 3 4 this 3 1654  4 view 1 1524  5 flags 1 1523  
167 0 0 4 221 1527 0 0 0 2 4 this 3 1654  4 view 1 1524  
168 0 0 4 209 1527 0 0 0 1 4 this 3 1662  
169 0 0 4 210 1527 0 0 0 2 4 this 3 1663  3 out 1 1531  
170 0 0 7 224 1665 895 0 0 1 4 copy 1 1514  
171 0 0 7 224 1665 895 0 0 1 6 source 1 1520  
172 0 0 7 224 1665 895 0 0 1 11 type_handle 1 1666  
173 0 0 7 225 1665 895 0 0 2 1 n 1 1516  11 type_handle 1 1666  
174 0 0 6 226 1516 0 0 0 1 4 this 3 1514  
175 0 0 4 227 1527 0 0 0 2 4 this 3 1665  1 x 1 1517  
176 0 0 4 228 1527 0 0 0 1 4 this 3 1665  
177 0 0 6 229 1517 0 0 0 2 4 this 3 1514  1 n 1 1516  
178 0 0 4 230 1527 0 0 0 3 4 this 3 1665  1 n 1 1516  5 value 1 1517  
179 0 0 6 231 1517 0 0 0 2 4 this 3 1514  1 n 1 1516  
180 0 0 4 232 1527 0 0 0 3 4 this 3 1665  1 n 1 1516  5 value 1 1517  
181 0 0 6 233 1520 0 0 0 1 4 this 3 1514  
182 0 0 4 234 1527 0 0 0 2 4 this 3 1665  4 data 1 1520  
183 0 0 6 235 1520 0 0 0 3 4 this 3 1514  1 n 1 1516  5 count 1 1516  
184 0 0 4 236 1527 0 0 0 4 4 this 3 1665  1 n 1 1516  5 count 1 1516  4 data 1 1668  
185 0 0 6 237 1523 0 0 0 1 4 this 3 1514  
186 0 0 6 238 1523 0 0 0 1 4 this 3 1514  
187 0 0 6 239 1523 0 0 0 3 4 this 3 1665  4 view 1 1524  5 flags 1 1523  
188 0 0 4 240 1527 0 0 0 2 4 this 3 1514  4 view 1 1524  
189 0 0 7 243 1669 913 0 0 1 4 copy 1 1536  
190 0 0 7 243 1669 913 0 0 1 6 source 1 1520  
191 0 0 7 243 1669 913 0 0 1 11 type_handle 1 1666  
192 0 0 7 244 1669 913 0 0 2 1 n 1 1516  11 type_handle 1 1666  
193 0 0 6 245 1516 0 0 0 1 4 this 3 1536  
194 0 0 4 246 1527 0 0 0 2 4 this 3 1669  1 x 1 1538  
195 0 0 4 247 1527 0 0 0 1 4 this 3 1669  
196 0 0 6 248 1538 0 0 0 2 4 this 3 1536  1 n 1 1516  
197 0 0 4 249 1527 0 0 0 3 4 this 3 1669  1 n 1 1516  5 value 1 1538  
198 0 0 6 250 1538 0 0 0 2 4 this 3 1536  1 n 1 1516  
199 0 0 4 251 1527 0 0 0 3 4 this 3 1669  1 n 1 1516  5 value 1 1538  
200 0 0 6 252 1520 0 0 0 1 4 this 3 1536  
201 0 0 4 253 1527 0 0 0 2 4 this 3 1669  4 data 1 1520  
202 0 0 6 254 1520 0 0 0 3 4 this 3 1536  1 n 1 1516  5 count 1 1516  
203 0 0 4 255 1527 0 0 0 4 4 this 3 1669  1 n 1 1516  5 count 1 1516  4 data 1 1668  
204 0 0 6 256 1523 0 0 0 1 4 this 3 1536  
205 0 0 6 257 1523 0 0 0 1 4 this 3 1536  
206 0 0 6 258 1523 0 0 0 3 4 this 3 1669  4 view 1 1524  5 flags 1 1523  
207 0 0 4 259 1527 0 0 0 2 4 this 3 1536  4 view 1 1524  
208 0 0 7 262 1670 931 0 0 1 4 copy 1 1547  
209 0 0 7 262 1670 931 0 0 1 6 source 1 1520  
210 0 0 7 262 1670 931 0 0 1 11 type_handle 1 1666  
211 0 0 7 263 1670 931 0 0 2 1 n 1 1516  11 type_handle 1 1666  
212 0 0 6 264 1516 0 0 0 1 4 this 3 1547  
213 0 0 4 265 1527 0 0 0 2 4 this 3 1670  1 x 1 1549  
214 0 0 4 266 1527 0 0 0 1 4 this 3 1670  
215 0 0 6 267 1549 0 0 0 2 4 this 3 1547  1 n 1 1516  
216 0 0 4 268 1527 0 0 0 3 4 this 3 1670  1 n 1 1516  5 value 1 1549  
217 0 0 6 269 1549 0 0 0 2 4 this 3 1547  1 n 1 1516  
218 0 0 4 270 1527 0 0 0 3 4 this 3 1670  1 n 1 1516  5 value 1 1549  
219 0 0 6 271 1520 0 0 0 1 4 this 3 1547  
220 0 0 4 272 1527 0 0 0 2 4 this 3 1670  4 data 1 1520  
221 0 0 6 273 1520 0 0 0 3 4 this 3 1547  1 n 1 1516  5 count 1 1516  
222 0 0 4 274 1527 0 0 0 4 4 this 3 1670  1 n 1 1516  5 count 1 1516  4 data 1 1668  
223 0 0 6 275 1523 0 0 0 1 4 this 3 1547  
224 0 0 6 276 1523 0 0 0 1 4 this 3 1547  
225 0 0 6 277 1523 0 0 0 3 4 this 3 1670  4 view 1 1524  5 flags 1 1523  
226 0 0 4 278 1527 0 0 0 2 4 this 3 1547  4 view 1 1524  
227 0 0 7 281 1671 949 0 0 1 4 copy 1 1558  
228 0 0 7 281 1671 949 0 0 1 6 source 1 1520  
229 0 0 7 281 1671 949 0 0 1 11 type_handle 1 1666  
230 0 0 7 282 1671 949 0 0 2 1 n 1 1516  11 type_handle 1 1666  
231 0 0 6 283 1516 0 0 0 1 4 this 3 1558  
232 0 0 4 284 1527 0 0 0 2 4 this 3 1671  1 x 1 1560  
233 0 0 4 285 1527 0 0 0 1 4 this 3 1671  
234 0 0 6 286 1560 0 0 0 2 4 this 3 1558  1 n 1 1516  
235 0 0 4 287 1527 0 0 0 3 4 this 3 1671  1 n 1 1516  5 value 1 1560  
236 0 0 6 288 1560 0 0 0 2 4 this 3 1558  1 n 1 1516  
237 0 0 4 289 1527 0 0 0 3 4 this 3 1671  1 n 1 1516  5 value 1 1560  
238 0 0 6 290 1520 0 0 0 1 4 this 3 1558  
239 0 0 4 291 1527 0 0 0 2 4 this 3 1671  4 data 1 1520  
240 0 0 6 292 1520 0 0 0 3 4 this 3 1558  1 n 1 1516  5 count 1 1516  
241 0 0 4 293 1527 0 0 0 4 4 this 3 1671  1 n 1 1516  5 count 1 1516  4 data 1 1668  
242 0 0 6 294 1523 0 0 0 1 4 this 3 1558  
243 0 0 6 295 1523 0 0 0 1 4 this 3 1558  
244 0 0 6 296 1523 0 0 0 3 4 this 3 1671  4 view 1 1524  5 flags 1 1523  
245 0 0 4 297 1527 0 0 0 2 4 this 3 1558  4 view 1 1524  
246 0 0 7 300 1672 967 0 0 1 4 copy 1 1569  
247 0 0 7 300 1672 967 0 0 1 6 source 1 1520  
248 0 0 7 300 1672 967 0 0 1 11 type_handle 1 1666  
249 0 0 7 301 1672 967 0 0 2 1 n 1 1516  11 type_handle 1 1666  
250 0 0 6 302 1516 0 0 0 1 4 this 3 1569  
251 0 0 4 303 1527 0 0 0 2 4 this 3 1672  1 x 1 1571  
252 0 0 4 304 1527 0 0 0 1 4 this 3 1672  
253 0 0 6 305 1571 0 0 0 2 4 this 3 1569  1 n 1 1516  
254 0 0 4 306 1527 0 0 0 3 4 this 3 1672  1 n 1 1516  5 value 1 1571  
255 0 0 6 307 1571 0 0 0 2 4 this 3 1569  1 n 1 1516  
256 0 0 4 308 1527 0 0 0 3 4 this 3 1672  1 n 1 1516  5 value 1 1571  
257 0 0 6 309 1520 0 0 0 1 4 this 3 1569  
258 0 0 4 310 1527 0 0 0 2 4 this 3 1672  4 data 1 1520  
259 0 0 6 311 1520 0 0 0 3 4 this 3 1569  1 n 1 1516  5 count 1 1516  
260 0 0 4 312 1527 0 0 0 4 4 this 3 1672  1 n 1 1516  5 count 1 1516  4 data 1 1668  
261 0 0 6 313 1523 0 0 0 1 4 this 3 1569  
262 0 0 6 314 1523 0 0 0 1 4 this 3 1569  
263 0 0 6 315 1523 0 0 0 3 4 this 3 1672  4 view 1 1524  5 flags 1 1523  
264 0 0 4 316 1527 0 0 0 2 4 this 3 1569  4 view 1 1524  
265 0 0 7 319 1673 985 0 0 1 4 copy 1 1580  
266 0 0 7 319 1673 985 0 0 1 6 source 1 1520  
267 0 0 7 319 1673 985 0 0 1 11 type_handle 1 1666  
268 0 0 7 320 1673 985 0 0 2 1 n 1 1516  11 type_handle 1 1666  
269 0 0 6 321 1516 0 0 0 1 4 this 3 1580  
270 0 0 4 322 1527 0 0 0 2 4 this 3 1673  1 x 1 1582  
271 0 0 4 323 1527 0 0 0 1 4 this 3 1673  
272 0 0 6 324 1582 0 0 0 2 4 this 3 1580  1 n 1 1516  
273 0 0 4 325 1527 0 0 0 3 4 this 3 1673  1 n 1 1516  5 value 1 1582  
274 0 0 6 326 1582 0 0 0 2 4 this 3 1580  1 n 1 1516  
275 0 0 4 327 1527 0 0 0 3 4 this 3 1673  1 n 1 1516  5 value 1 1582  
276 0 0 6 328 1520 0 0 0 1 4 this 3 1580  
277 0 0 4 329 1527 0 0 0 2 4 this 3 1673  4 data 1 1520  
278 0 0 6 330 1520 0 0 0 3 4 this 3 1580  1 n 1 1516  5 count 1 1516  
279 0 0 4 331 1527 0 0 0 4 4 this 3 1673  1 n 1 1516  5 count 1 1516  4 data 1 1668  
280 0 0 6 332 1523 0 0 0 1 4 this 3 1580  
281 0 0 6 333 1523 0 0 0 1 4 this 3 1580  
282 0 0 6 334 1523 0 0 0 3 4 this 3 1673  4 view 1 1524  5 flags 1 1523  
283 0 0 4 335 1527 0 0 0 2 4 this 3 1580  4 view 1 1524  
284 0 0 7 338 1674 1003 0 0 1 4 copy 1 1591  
285 0 0 7 338 1674 1003 0 0 1 6 source 1 1520  
286 0 0 7 338 1674 1003 0 0 1 11 type_handle 1 1666  
287 0 0 7 339 1674 1003 0 0 2 1 n 1 1516  11 type_handle 1 1666  
288 0 0 6 340 1516 0 0 0 1 4 this 3 1591  
289 0 0 4 341 1527 0 0 0 2 4 this 3 1674  1 x 1 1593  
290 0 0 4 342 1527 0 0 0 1 4 this 3 1674  
291 0 0 6 343 1593 0 0 0 2 4 this 3 1591  1 n 1 1516  
292 0 0 4 344 1527 0 0 0 3 4 this 3 1674  1 n 1 1516  5 value 1 1593  
293 0 0 6 345 1593 0 0 0 2 4 this 3 1591  1 n 1 1516  
294 0 0 4 346 1527 0 0 0 3 4 this 3 1674  1 n 1 1516  5 value 1 1593  
295 0 0 6 347 1520 0 0 0 1 4 this 3 1591  
296 0 0 4 348 1527 0 0 0 2 4 this 3 1674  4 data 1 1520  
297 0 0 6 349 1520 0 0 0 3 4 this 3 1591  1 n 1 1516  5 count 1 1516  
298 0 0 4 350 1527 0 0 0 4 4 this 3 1674  1 n 1 1516  5 count 1 1516  4 data 1 1668  
299 0 0 6 351 1523 0 0 0 1 4 this 3 1591  
300 0 0 6 352 1523 0 0 0 1 4 this 3 1591  
301 0 0 6 353 1523 0 0 0 3 4 this 3 1674  4 view 1 1524  5 flags 1 1523  
302 0 0 4 354 1527 0 0 0 2 4 this 3 1591  4 view 1 1524  
303 0 0 7 357 1675 1021 0 0 1 4 copy 1 1602  
304 0 0 7 357 1675 1021 0 0 1 6 source 1 1520  
305 0 0 7 357 1675 1021 0 0 1 11 type_handle 1 1666  
306 0 0 7 358 1675 1021 0 0 2 1 n 1 1516  11 type_handle 1 1666  
307 0 0 6 359 1516 0 0 0 1 4 this 3 1602  
308 0 0 4 360 1527 0 0 0 2 4 this 3 1675  1 x 1 1604  
309 0 0 4 361 1527 0 0 0 1 4 this 3 1675  
310 0 0 6 362 1604 0 0 0 2 4 this 3 1602  1 n 1 1516  
311 0 0 4 363 1527 0 0 0 3 4 this 3 1675  1 n 1 1516  5 value 1 1604  
312 0 0 6 364 1604 0 0 0 2 4 this 3 1602  1 n 1 1516  
313 0 0 4 365 1527 0 0 0 3 4 this 3 1675  1 n 1 1516  5 value 1 1604  
314 0 0 6 366 1520 0 0 0 1 4 this 3 1602  
315 0 0 4 367 1527 0 0 0 2 4 this 3 1675  4 data 1 1520  
316 0 0 6 368 1520 0 0 0 3 4 this 3 1602  1 n 1 1516  5 count 1 1516  
317 0 0 4 369 1527 0 0 0 4 4 this 3 1675  1 n 1 1516  5 count 1 1516  4 data 1 1668  
318 0 0 6 370 1523 0 0 0 1 4 this 3 1602  
319 0 0 6 371 1523 0 0 0 1 4 this 3 1602  
320 0 0 6 372 1523 0 0 0 3 4 this 3 1675  4 view 1 1524  5 flags 1 1523  
321 0 0 4 373 1527 0 0 0 2 4 this 3 1602  4 view 1 1524  
322 0 0 7 376 1676 1039 0 0 1 4 copy 1 1613  
323 0 0 7 376 1676 1039 0 0 1 6 source 1 1520  
324 0 0 7 376 1676 1039 0 0 1 11 type_handle 1 1666  
325 0 0 7 377 1676 1039 0 0 2 1 n 1 1516  11 type_handle 1 1666  
326 0 0 6 378 1516 0 0 0 1 4 this 3 1613  
327 0 0 4 379 1527 0 0 0 2 4 this 3 1676  1 x 1 1615  
328 0 0 4 380 1527 0 0 0 1 4 this 3 1676  
329 0 0 6 381 1615 0 0 0 2 4 this 3 1613  1 n 1 1516  
330 0 0 4 382 1527 0 0 0 3 4 this 3 1676  1 n 1 1516  5 value 1 1615  
331 0 0 6 383 1615 0 0 0 2 4 this 3 1613  1 n 1 1516  
332 0 0 4 384 1527 0 0 0 3 4 this 3 1676  1 n 1 1516  5 value 1 1615  
333 0 0 6 385 1520 0 0 0 1 4 this 3 1613  
334 0 0 4 386 1527 0 0 0 2 4 this 3 1676  4 data 1 1520  
335 0 0 6 387 1520 0 0 0 3 4 this 3 1613  1 n 1 1516  5 count 1 1516  
336 0 0 4 388 1527 0 0 0 4 4 this 3 1676  1 n 1 1516  5 count 1 1516  4 data 1 1668  
337 0 0 6 389 1523 0 0 0 1 4 this 3 1613  
338 0 0 6 390 1523 0 0 0 1 4 this 3 1613  
339 0 0 6 391 1523 0 0 0 3 4 this 3 1676  4 view 1 1524  5 flags 1 1523  
340 0 0 4 392 1527 0 0 0 2 4 this 3 1613  4 view 1 1524  
341 0 0 7 395 1677 1057 0 0 1 4 copy 1 1624  
342 0 0 7 395 1677 1057 0 0 1 6 source 1 1520  
343 0 0 7 395 1677 1057 0 0 1 11 type_handle 1 1666  
344 0 0 7 396 1677 1057 0 0 2 1 n 1 1516  11 type_handle 1 1666  
345 0 0 6 397 1516 0 0 0 1 4 this 3 1624  
346 0 0 4 398 1527 0 0 0 2 4 this 3 1677  1 x 1 1626  
347 0 0 4 399 1527 0 0 0 1 4 this 3 1677  
348 0 0 6 400 1626 0 0 0 2 4 this 3 1624  1 n 1 1516  
349 0 0 4 401 1527 0 0 0 3 4 this 3 1677  1 n 1 1516  5 value 1 1626  
350 0 0 6 402 1626 0 0 0 2 4 this 3 1624  1 n 1 1516  
351 0 0 4 403 1527 0 0 0 3 4 this 3 1677  1 n 1 1516  5 value 1 1626  
352 0 0 6 404 1520 0 0 0 1 4 this 3 1624  
353 0 0 4 405 1527 0 0 0 2 4 this 3 1677  4 data 1 1520  
354 0 0 6 406 1520 0 0 0 3 4 this 3 1624  1 n 1 1516  5 count 1 1516  
355 0 0 4 407 1527 0 0 0 4 4 this 3 1677  1 n 1 1516  5 count 1 1516  4 data 1 1668  
356 0 0 6 408 1523 0 0 0 1 4 this 3 1624  
357 0 0 6 409 1523 0 0 0 1 4 this 3 1624  
358 0 0 6 410 1523 0 0 0 3 4 this 3 1677  4 view 1 1524  5 flags 1 1523  
359 0 0 4 411 1527 0 0 0 2 4 this 3 1624  4 view 1 1524  
360 0 0 7 414 1678 1075 0 0 1 4 copy 1 1635  
361 0 0 7 414 1678 1075 0 0 1 6 source 1 1520  
362 0 0 7 414 1678 1075 0 0 1 11 type_handle 1 1666  
363 0 0 7 415 1678 1075 0 0 2 1 n 1 1516  11 type_handle 1 1666  
364 0 0 6 416 1516 0 0 0 1 4 this 3 1635  
365 0 0 4 417 1527 0 0 0 2 4 this 3 1678  1 x 1 1637  
366 0 0 4 418 1527 0 0 0 1 4 this 3 1678  
367 0 0 6 419 1637 0 0 0 2 4 this 3 1635  1 n 1 1516  
368 0 0 4 420 1527 0 0 0 3 4 this 3 1678  1 n 1 1516  5 value 1 1637  
369 0 0 6 421 1637 0 0 0 2 4 this 3 1635  1 n 1 1516  
370 0 0 4 422 1527 0 0 0 3 4 this 3 1678  1 n 1 1516  5 value 1 1637  
371 0 0 6 423 1520 0 0 0 1 4 this 3 1635  
372 0 0 4 424 1527 0 0 0 2 4 this 3 1678  4 data 1 1520  
373 0 0 6 425 1520 0 0 0 3 4 this 3 1635  1 n 1 1516  5 count 1 1516  
374 0 0 4 426 1527 0 0 0 4 4 this 3 1678  1 n 1 1516  5 count 1 1516  4 data 1 1668  
375 0 0 6 427 1523 0 0 0 1 4 this 3 1635  
376 0 0 6 428 1523 0 0 0 1 4 this 3 1635  
377 0 0 6 429 1523 0 0 0 3 4 this 3 1678  4 view 1 1524  5 flags 1 1523  
378 0 0 4 430 1527 0 0 0 2 4 this 3 1635  4 view 1 1524  
379 0 0 7 433 1679 1093 0 0 1 4 copy 1 1646  
380 0 0 7 433 1679 1093 0 0 1 6 source 1 1520  
381 0 0 7 433 1679 1093 0 0 1 11 type_handle 1 1666  
382 0 0 7 434 1679 1093 0 0 2 1 n 1 1516  11 type_handle 1 1666  
383 0 0 6 435 1516 0 0 0 1 4 this 3 1646  
384 0 0 4 436 1527 0 0 0 2 4 this 3 1679  1 x 1 1648  
385 0 0 4 437 1527 0 0 0 1 4 this 3 1679  
386 0 0 6 438 1648 0 0 0 2 4 this 3 1646  1 n 1 1516  
387 0 0 4 439 1527 0 0 0 3 4 this 3 1679  1 n 1 1516  5 value 1 1648  
388 0 0 6 440 1648 0 0 0 2 4 this 3 1646  1 n 1 1516  
389 0 0 4 441 1527 0 0 0 3 4 this 3 1679  1 n 1 1516  5 value 1 1648  
390 0 0 6 442 1520 0 0 0 1 4 this 3 1646  
391 0 0 4 443 1527 0 0 0 2 4 this 3 1679  4 data 1 1520  
392 0 0 6 444 1520 0 0 0 3 4 this 3 1646  1 n 1 1516  5 count 1 1516  
393 0 0 4 445 1527 0 0 0 4 4 this 3 1679  1 n 1 1516  5 count 1 1516  4 data 1 1668  
394 0 0 6 446 1523 0 0 0 1 4 this 3 1646  
395 0 0 6 447 1523 0 0 0 1 4 this 3 1646  
396 0 0 6 448 1523 0 0 0 3 4 this 3 1679  4 view 1 1524  5 flags 1 1523  
397 0 0 4 449 1527 0 0 0 2 4 this 3 1646  4 view 1 1524  
398 0 0 7 452 1680 1111 0 0 1 4 copy 1 1657  
399 0 0 7 452 1680 1111 0 0 1 6 source 1 1520  
400 0 0 7 452 1680 1111 0 0 1 11 type_handle 1 1666  
401 0 0 7 453 1680 1111 0 0 2 1 n 1 1516  11 type_handle 1 1666  
402 0 0 6 454 1516 0 0 0 1 4 this 3 1657  
403 0 0 4 455 1527 0 0 0 2 4 this 3 1680  1 x 1 1659  
404 0 0 4 456 1527 0 0 0 1 4 this 3 1680  
405 0 0 6 457 1659 0 0 0 2 4 this 3 1657  1 n 1 1516  
406 0 0 4 458 1527 0 0 0 3 4 this 3 1680  1 n 1 1516  5 value 1 1659  
407 0 0 6 459 1659 0 0 0 2 4 this 3 1657  1 n 1 1516  
408 0 0 4 460 1527 0 0 0 3 4 this 3 1680  1 n 1 1516  5 value 1 1659  
409 0 0 6 461 1520 0 0 0 1 4 this 3 1657  
410 0 0 4 462 1527 0 0 0 2 4 this 3 1680  4 data 1 1520  
411 0 0 6 463 1520 0 0 0 3 4 this 3 1657  1 n 1 1516  5 count 1 1516  
412 0 0 4 464 1527 0 0 0 4 4 this 3 1680  1 n 1 1516  5 count 1 1516  4 data 1 1668  
413 0 0 6 465 1523 0 0 0 1 4 this 3 1657  
414 0 0 6 466 1523 0 0 0 1 4 this 3 1657  
415 0 0 6 467 1523 0 0 0 3 4 this 3 1680  4 view 1 1524  5 flags 1 1523  
416 0 0 4 468 1527 0 0 0 2 4 this 3 1657  4 view 1 1524  
417 0 0 7 472 1683 1121 0 0 1 4 this 3 1681  
418 0 0 6 473 1684 0 0 253 /**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */ 1 4 this 3 1681  
419 0 0 6 474 1684 0 0 536 /**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */ 1 4 this 3 1681  
420 0 0 4 475 1527 0 0 135 /**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */ 1 4 this 3 1683  
421 0 0 6 476 1684 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1683  3 vol 1 1681  
422 0 0 6 478 1523 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1681  3 vol 1 1681  
423 0 0 4 479 1527 0 0 0 2 4 this 3 1681  3 out 1 1531  
424 0 0 4 480 1527 0 0 10 /**
 *
 */ 3 4 this 3 1681  3 out 1 1531  12 indent_level 1 1523  
425 0 0 7 482 1666 0 0 0 0 
426 0 0 6 485 1684 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1685  3 vol 1 1436  
427 0 0 6 485 1684 0 0 71 /**
 * Increases the size of the volume to include the given point.
 */ 2 4 this 3 1685  5 point 1 1686  
428 0 0 6 486 1523 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1436  3 vol 1 1436  
429 0 0 6 486 1523 0 0 127 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */ 2 4 this 3 1436  5 point 1 1686  
430 0 0 6 486 1523 0 0 134 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */ 3 4 this 3 1436  1 a 1 1686  1 b 1 1686  
431 0 0 7 487 1688 0 0 0 1 4 this 3 1436  
432 0 0 4 488 1527 0 0 0 2 4 this 3 1685  3 mat 1 1689  
433 0 0 7 489 1666 0 0 0 0 
434 0 0 7 492 1688 0 0 0 1 4 this 3 1693  
435 0 0 7 493 1688 0 0 0 1 4 this 3 1693  
436 0 0 6 494 1695 0 0 10 /**
 *
 */ 1 4 this 3 1693  
437 0 0 7 495 1666 0 0 0 0 
438 0 0 7 498 1697 1135 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
439 0 0 7 498 1697 1135 0 10 /**
 *
 */ 1 4 copy 1 1698  
440 0 0 7 498 1697 1135 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1593  1 b 1 1593  1 c 1 1593  
441 0 0 6 499 1697 0 0 0 2 4 this 3 1697  4 copy 1 1698  
442 0 0 4 501 1527 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1697  3 mat 1 1700  
443 0 0 6 502 1593 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1698  
444 0 0 6 503 1593 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1698  
445 0 0 6 504 1593 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1698  
446 0 0 7 505 1702 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1698  1 t 1 1696  
447 0 0 4 506 1527 0 0 10 /**
 *
 */ 2 4 this 3 1698  3 out 1 1531  
448 0 0 4 507 1527 0 0 10 /**
 *
 */ 3 4 this 3 1698  3 out 1 1531  12 indent_level 1 1523  
449 0 0 4 508 1527 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1698  11 destination 1 1703  
450 0 0 4 509 1527 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1697  6 source 1 1705  
451 0 0 4 510 1527 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1698  11 destination 1 1703  
452 0 0 4 511 1527 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1697  6 source 1 1705  
453 0 0 7 513 1707 1149 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
454 0 0 7 513 1707 1149 0 10 /**
 *
 */ 1 4 copy 1 1708  
455 0 0 7 513 1707 1149 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1582  1 b 1 1582  1 c 1 1582  
456 0 0 6 514 1707 0 0 0 2 4 this 3 1707  4 copy 1 1708  
457 0 0 4 516 1527 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1707  3 mat 1 1710  
458 0 0 6 517 1582 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1708  
459 0 0 6 518 1582 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1708  
460 0 0 6 519 1582 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1708  
461 0 0 7 520 1714 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1708  1 t 1 1713  
462 0 0 4 521 1527 0 0 10 /**
 *
 */ 2 4 this 3 1708  3 out 1 1531  
463 0 0 4 522 1527 0 0 10 /**
 *
 */ 3 4 this 3 1708  3 out 1 1531  12 indent_level 1 1523  
464 0 0 4 523 1527 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1708  11 destination 1 1703  
465 0 0 4 524 1527 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1707  6 source 1 1705  
466 0 0 4 525 1527 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1708  11 destination 1 1703  
467 0 0 4 526 1527 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1707  6 source 1 1705  
468 0 0 7 530 1715 1177 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
469 0 0 7 530 1715 1177 0 0 1 6 param0 0 1716  
470 0 0 7 530 1715 1177 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1718  1 b 1 1718  1 c 1 1718  
471 0 0 7 530 1715 1177 0 10 /**
 *
 */ 1 4 copy 1 1720  
472 0 0 7 530 1715 1177 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1722  5 point 1 1718  
473 0 0 7 530 1715 1177 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1696  1 b 1 1696  1 c 1 1696  1 d 1 1696  
474 0 0 7 531 1715 1177 0 0 2 4 this 3 1716  3 mat 1 1538  
475 0 0 7 531 1715 1177 0 0 2 4 this 3 1716  3 mat 1 1700  
476 0 0 6 532 1715 0 0 0 2 4 this 3 1715  3 mat 1 1700  
477 0 0 4 533 1527 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1715  3 mat 1 1700  
478 0 0 7 534 1715 1177 0 0 1 4 this 3 1716  
479 0 0 7 535 1725 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1716  
480 0 0 7 536 1726 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1716  
481 0 0 7 537 1702 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1716  
482 0 0 6 538 1696 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1716  5 point 1 1718  
483 0 0 7 539 1702 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1716  5 point 1 1718  
484 0 0 4 540 1527 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1715  
485 0 0 6 541 1684 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1716  18 intersection_point 1 1702  2 p1 1 1718  2 p2 1 1718  
486 0 0 6 542 1684 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1716  4 from 1 1702  5 delta 1 1726  5 other 1 1716  
487 0 0 4 544 1527 0 0 10 /**
 *
 */ 2 4 this 3 1716  3 out 1 1531  
488 0 0 4 545 1527 0 0 10 /**
 *
 */ 3 4 this 3 1716  3 out 1 1531  12 indent_level 1 1523  
489 0 0 7 549 1727 1194 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
490 0 0 7 549 1727 1194 0 0 1 6 param0 0 1728  
491 0 0 7 549 1727 1194 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1729  1 b 1 1729  1 c 1 1729  
492 0 0 7 549 1727 1194 0 10 /**
 *
 */ 1 4 copy 1 1730  
493 0 0 7 549 1727 1194 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1732  5 point 1 1729  
494 0 0 7 549 1727 1194 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1713  1 b 1 1713  1 c 1 1713  1 d 1 1713  
495 0 0 7 550 1727 1194 0 0 2 4 this 3 1728  3 mat 1 1517  
496 0 0 7 550 1727 1194 0 0 2 4 this 3 1728  3 mat 1 1710  
497 0 0 6 551 1727 0 0 0 2 4 this 3 1727  3 mat 1 1710  
498 0 0 4 552 1527 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1727  3 mat 1 1710  
499 0 0 7 553 1727 1194 0 0 1 4 this 3 1728  
500 0 0 7 554 1735 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1728  
501 0 0 7 555 1736 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1728  
502 0 0 7 556 1714 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1728  
503 0 0 6 557 1713 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1728  5 point 1 1729  
504 0 0 7 558 1714 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1728  5 point 1 1729  
505 0 0 4 559 1527 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1727  
506 0 0 6 560 1684 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1728  18 intersection_point 1 1714  2 p1 1 1729  2 p2 1 1729  
507 0 0 6 561 1684 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1728  4 from 1 1714  5 delta 1 1736  5 other 1 1728  
508 0 0 4 563 1527 0 0 10 /**
 *
 */ 2 4 this 3 1728  3 out 1 1531  
509 0 0 4 564 1527 0 0 10 /**
 *
 */ 3 4 this 3 1728  3 out 1 1531  12 indent_level 1 1523  
510 0 0 7 571 1737 1207 0 42 /**
 * Constructs an empty box object.
 */ 0 
511 0 0 7 571 1737 1207 0 44 /**
 * Constructs a specific box object.
 */ 2 3 min 1 1686  3 max 1 1686  
512 0 0 4 572 1527 0 0 0 2 4 this 3 1737  4 size 1 1738  
513 0 0 6 575 1523 0 0 68 /**
 * Returns 8: the number of vertices of a rectangular solid.
 */ 1 4 this 3 1739  
514 0 0 7 576 1688 0 0 59 /**
 * Returns the nth vertex of the rectangular solid.
 */ 2 4 this 3 1739  1 n 1 1523  
515 0 0 6 578 1523 0 0 65 /**
 * Returns 6: the number of faces of a rectangular solid.
 */ 1 4 this 3 1739  
516 0 0 7 579 1741 0 0 57 /**
 * Returns the nth face of the rectangular solid.
 */ 2 4 this 3 1739  1 n 1 1523  
517 0 0 4 587 1527 0 0 63 /**
 * Sets the min and max point of the rectangular solid.
 */ 3 4 this 3 1737  3 min 1 1686  3 max 1 1686  
518 0 0 7 588 1666 0 0 0 0 
519 0 0 7 591 1742 1215 0 10 /**
 *
 */ 0 
520 0 0 7 591 1742 1215 0 0 1 6 param0 0 1743  
521 0 0 4 592 1527 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1742  
522 0 0 4 592 1527 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1742  1 l 1 1696  1 r 1 1696  1 t 1 1696  1 b 1 1696  
523 0 0 4 593 1527 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1742  5 fnear 1 1696  4 ffar 1 1696  
524 0 0 4 593 1527 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1742  5 fnear 1 1696  4 ffar 1 1696  1 l 1 1696  1 r 1 1696  1 t 1 1696  1 b 1 1696  
525 0 0 4 594 1527 0 0 238 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */ 5 4 this 3 1742  4 xfov 1 1696  6 aspect 1 1696  5 fnear 1 1696  4 ffar 1 1696  
526 0 0 4 595 1527 0 0 0 5 4 this 3 1742  4 yfov 1 1696  6 aspect 1 1696  5 fnear 1 1696  4 ffar 1 1696  
527 0 0 4 596 1527 0 0 0 5 4 this 3 1742  4 xfov 1 1696  4 yfov 1 1696  5 fnear 1 1696  4 ffar 1 1696  
528 0 0 7 600 1745 1223 0 10 /**
 *
 */ 0 
529 0 0 7 600 1745 1223 0 0 1 6 param0 0 1746  
530 0 0 4 601 1527 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1745  
531 0 0 4 601 1527 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1745  1 l 1 1713  1 r 1 1713  1 t 1 1713  1 b 1 1713  
532 0 0 4 602 1527 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1745  5 fnear 1 1713  4 ffar 1 1713  
533 0 0 4 602 1527 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1745  5 fnear 1 1713  4 ffar 1 1713  1 l 1 1713  1 r 1 1713  1 t 1 1713  1 b 1 1713  
534 0 0 4 603 1527 0 0 238 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */ 5 4 this 3 1745  4 xfov 1 1713  6 aspect 1 1713  5 fnear 1 1713  4 ffar 1 1713  
535 0 0 4 604 1527 0 0 0 5 4 this 3 1745  4 yfov 1 1713  6 aspect 1 1713  5 fnear 1 1713  4 ffar 1 1713  
536 0 0 4 605 1527 0 0 0 5 4 this 3 1745  4 xfov 1 1713  4 yfov 1 1713  5 fnear 1 1713  4 ffar 1 1713  
537 0 0 7 613 1751 1232 0 10 /**
 *
 */ 3 7 frustum 1 1748  8 is_ortho 1 1684  2 cs 1 1750  
538 0 0 7 613 1751 1232 0 10 /**
 *
 */ 8 3 fll 1 1686  3 flr 1 1686  3 fur 1 1686  3 ful 1 1686  3 nll 1 1686  3 nlr 1 1686  3 nur 1 1686  3 nul 1 1686  
539 0 0 6 614 1523 0 0 61 /**
 * Returns 8: the number of vertices of a hexahedron.
 */ 1 4 this 3 1752  
540 0 0 7 615 1688 0 0 52 /**
 * Returns the nth vertex of the hexahedron.
 */ 2 4 this 3 1752  1 n 1 1523  
541 0 0 6 617 1523 0 0 58 /**
 * Returns 6: the number of faces of a hexahedron.
 */ 1 4 this 3 1752  
542 0 0 7 618 1741 0 0 50 /**
 * Returns the nth face of the hexahedron.
 */ 2 4 this 3 1752  1 n 1 1523  
543 0 0 7 624 1666 0 0 0 0 
544 0 0 7 627 1754 1240 0 10 /**
 *
 */ 2 1 a 1 1686  1 b 1 1686  
545 0 0 4 628 1527 0 0 0 2 4 this 3 1754  4 size 1 1738  
546 0 0 6 631 1686 0 0 57 /**
 * Returns the first point that defines the line.
 */ 1 4 this 3 1755  
547 0 0 7 632 1688 0 0 58 /**
 * Returns the second point that defines the line.
 */ 1 4 this 3 1755  
548 0 0 7 633 1666 0 0 0 0 
549 0 0 7 636 1757 1247 0 65 /**
 * Constructs an empty "plane" that has no intersections.
 */ 0 
550 0 0 7 636 1757 1247 0 10 /**
 *
 */ 1 5 plane 1 1758  
551 0 0 4 637 1527 0 0 0 2 4 this 3 1757  4 size 1 1738  
552 0 0 6 640 1758 0 0 10 /**
 *
 */ 1 4 this 3 1760  
553 0 0 7 641 1666 0 0 0 0 
554 0 0 7 644 1762 1257 0 38 /**
 * Constructs an empty sphere.
 */ 0 
555 0 0 7 644 1762 1257 0 40 /**
 * Constructs a specific sphere.
 */ 2 6 center 1 1686  6 radius 1 1695  
556 0 0 4 645 1527 0 0 0 2 4 this 3 1762  4 size 1 1738  
557 0 0 7 648 1688 0 0 10 /**
 *
 */ 1 4 this 3 1763  
558 0 0 6 649 1695 0 0 10 /**
 *
 */ 1 4 this 3 1763  
559 0 0 4 650 1527 0 0 47 /**
 * Sets the center point of the sphere.
 */ 2 4 this 3 1762  6 center 1 1686  
560 0 0 4 651 1527 0 0 41 /**
 * Sets the radius of the sphere.
 */ 2 4 this 3 1762  6 radius 1 1695  
561 0 0 7 652 1666 0 0 0 0 
562 0 0 7 655 1765 1268 0 44 /**
 * Constructs an empty intersection.
 */ 0 
563 0 0 4 656 1527 0 0 0 2 4 this 3 1765  4 size 1 1738  
564 0 0 6 659 1523 0 0 64 /**
 * Returns the number of components in the intersection.
 */ 1 4 this 3 1766  
565 0 0 7 660 1436 0 0 57 /**
 * Returns the nth component in the intersection.
 */ 2 4 this 3 1766  1 n 1 1523  
566 0 0 4 666 1527 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 1765  
567 0 0 4 667 1527 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 1765  9 component 1 1436  
568 0 0 7 668 1666 0 0 0 0 
569 0 0 7 673 1769 1273 0 35 /* initializes mt[N] with a seed */ 1 4 seed 1 1768  
570 0 0 6 674 1768 0 0 58 /* generates a random number on [0,0x7fffffff]-interval */ 1 4 this 3 1769  
571 0 0 7 678 1770 1276 0 10 /**
 *
 */ 0 
572 0 0 7 679 1666 0 0 0 0 
573 0 0 7 682 1771 1288 0 37 /**
 * Constructs an empty union.
 */ 0 
574 0 0 4 683 1527 0 0 0 2 4 this 3 1771  4 size 1 1738  
575 0 0 6 686 1523 0 0 57 /**
 * Returns the number of components in the union.
 */ 1 4 this 3 1772  
576 0 0 7 687 1436 0 0 50 /**
 * Returns the nth component in the union.
 */ 2 4 this 3 1772  1 n 1 1523  
577 0 0 4 691 1527 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 1771  
578 0 0 4 692 1527 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 1771  9 component 1 1436  
579 0 0 4 693 1527 0 0 104 /**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */ 2 4 this 3 1771  6 volume 1 1681  
580 0 0 7 694 1666 0 0 0 0 
581 0 0 7 697 1776 1296 0 10 /**
 *
 */ 1 4 copy 1 1774  
582 0 0 7 697 1776 1296 0 108 /**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 1 4 seed 1 1768  
583 0 0 6 698 1776 0 0 0 2 4 this 3 1776  4 copy 1 1774  
584 0 0 6 699 1523 0 0 60 /**
 * Returns a random integer in the range [0, range).
 */ 2 4 this 3 1776  5 range 1 1523  
585 0 0 6 700 1713 0 0 59 /**
 * Returns a random double in the range [0, range).
 */ 2 4 this 3 1776  5 range 1 1713  
586 0 0 6 701 1713 0 0 60 /**
 * Returns a random double in the range [-0.5, 0.5).
 */ 1 4 this 3 1776  
587 0 0 6 702 1768 0 0 77 /**
 * Returns a random seed value for the next global Randomizer object.
 */ 0 
588 0 0 6 703 1768 0 0 126 /**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */ 1 4 this 3 1776  
589 0 0 6 706 1768 0 0 127 /**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */ 1 4 this 3 1777  
590 0 0 7 709 1778 1304 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
591 0 0 7 709 1778 1304 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 1779  
592 0 0 7 709 1778 1304 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 4 2 sx 1 1713  2 sy 1 1713  10 table_size 1 1523  4 seed 1 1768  
593 0 0 6 710 1778 0 0 0 2 4 this 3 1778  4 copy 1 1779  
594 0 0 4 711 1527 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1778  5 scale 1 1549  
595 0 0 4 711 1527 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1778  5 scale 1 1560  
596 0 0 4 711 1527 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1778  5 scale 1 1713  
597 0 0 4 711 1527 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 3 4 this 3 1778  2 sx 1 1713  2 sy 1 1713  
598 0 0 6 712 1713 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1779  5 value 1 1549  
599 0 0 6 712 1696 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1779  5 value 1 1560  
600 0 0 6 712 1713 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 1779  1 x 1 1713  1 y 1 1713  
601 0 0 6 713 1713 0 0 0 2 4 this 3 1779  5 value 1 1549  
602 0 0 6 713 1696 0 0 0 2 4 this 3 1779  5 value 1 1560  
603 0 0 6 713 1713 0 0 0 3 4 this 3 1779  1 x 1 1713  1 y 1 1713  
604 0 0 7 716 1781 1310 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
605 0 0 7 716 1781 1310 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 1782  
606 0 0 7 716 1781 1310 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 5 2 sx 1 1713  2 sy 1 1713  2 sz 1 1713  10 table_size 1 1523  4 seed 1 1768  
607 0 0 6 717 1781 0 0 0 2 4 this 3 1781  4 copy 1 1782  
608 0 0 4 718 1527 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1781  5 scale 1 1582  
609 0 0 4 718 1527 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1781  5 scale 1 1593  
610 0 0 4 718 1527 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1781  5 scale 1 1713  
611 0 0 4 718 1527 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 4 4 this 3 1781  2 sx 1 1713  2 sy 1 1713  2 sz 1 1713  
612 0 0 6 719 1713 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1782  5 value 1 1582  
613 0 0 6 719 1696 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1782  5 value 1 1593  
614 0 0 6 719 1713 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 1782  1 x 1 1713  1 y 1 1713  1 z 1 1713  
615 0 0 6 720 1713 0 0 0 2 4 this 3 1782  5 value 1 1582  
616 0 0 6 720 1696 0 0 0 2 4 this 3 1782  5 value 1 1593  
617 0 0 6 720 1713 0 0 0 4 4 this 3 1782  1 x 1 1713  1 y 1 1713  1 z 1 1713  
618 0 0 7 780 1784 1318 0 122 /**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
619 0 0 7 780 1784 1318 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */ 1 4 copy 1 1785  
620 0 0 7 780 1784 1318 0 318 /**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 7 2 sx 1 1713  2 sy 1 1713  10 num_levels 1 1523  12 scale_factor 1 1713  9 amp_scale 1 1713  10 table_size 1 1523  4 seed 1 1768  
621 0 0 6 781 1784 0 0 0 2 4 this 3 1784  4 copy 1 1785  
622 0 0 4 782 1527 0 0 95 /**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 1784  5 level 1 1779  3 amp 1 1713  
623 0 0 4 783 1527 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 1784  
624 0 0 6 784 1713 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1784  5 value 1 1549  
625 0 0 6 784 1696 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1784  5 value 1 1560  
626 0 0 6 784 1713 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 1784  1 x 1 1713  1 y 1 1713  
627 0 0 6 785 1713 0 0 0 2 4 this 3 1784  5 value 1 1549  
628 0 0 6 785 1696 0 0 0 2 4 this 3 1784  5 value 1 1560  
629 0 0 6 785 1713 0 0 0 3 4 this 3 1784  1 x 1 1713  1 y 1 1713  
630 0 0 7 788 1787 1325 0 122 /**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
631 0 0 7 788 1787 1325 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */ 1 4 copy 1 1788  
632 0 0 7 788 1787 1325 0 318 /**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 8 2 sx 1 1713  2 sy 1 1713  2 sz 1 1713  10 num_levels 1 1523  12 scale_factor 1 1713  9 amp_scale 1 1713  10 table_size 1 1523  4 seed 1 1768  
633 0 0 6 789 1787 0 0 0 2 4 this 3 1787  4 copy 1 1788  
634 0 0 4 790 1527 0 0 95 /**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 1787  5 level 1 1782  3 amp 1 1713  
635 0 0 4 791 1527 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 1787  
636 0 0 6 792 1713 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1787  5 value 1 1582  
637 0 0 6 792 1696 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1787  5 value 1 1593  
638 0 0 6 792 1713 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 1787  1 x 1 1713  1 y 1 1713  1 z 1 1713  
639 0 0 6 793 1713 0 0 0 2 4 this 3 1787  5 value 1 1582  
640 0 0 6 793 1696 0 0 0 2 4 this 3 1787  5 value 1 1593  
641 0 0 6 793 1713 0 0 0 4 4 this 3 1787  1 x 1 1713  1 y 1 1713  1 z 1 1713  
642 0 0 7 796 1790 1342 0 10 /**
 *
 */ 0 
643 0 0 7 796 1790 1342 0 0 1 6 param0 0 1791  
644 0 0 4 797 1527 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 1790  
645 0 0 6 798 1523 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 1790  5 point 1 1793  
646 0 0 6 798 1523 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 3 4 this 3 1790  1 x 1 1713  1 y 1 1713  
647 0 0 6 799 1523 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 1791  
648 0 0 6 800 1793 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 1791  1 n 1 1523  
649 0 0 4 806 1527 0 0 112 /**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */ 1 4 this 3 1790  
650 0 0 4 807 1527 0 0 334 /**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */ 2 4 this 3 1790  5 index 1 1523  
651 0 0 6 808 1684 0 0 145 /**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */ 1 4 this 3 1791  
652 0 0 4 809 1527 0 0 78 /**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */ 1 4 this 3 1790  
653 0 0 4 810 1527 0 0 277 /**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */ 2 4 this 3 1790  5 index 1 1523  
654 0 0 4 811 1527 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 1790  
655 0 0 6 812 1523 0 0 94 /**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */ 1 4 this 3 1791  
656 0 0 6 813 1523 0 0 194 /**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1791  1 n 1 1523  
657 0 0 6 814 1523 0 0 194 /**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1791  1 n 1 1523  
658 0 0 6 815 1523 0 0 194 /**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1791  1 n 1 1523  
659 0 0 7 818 1794 1351 0 10 /**
 *
 */ 0 
660 0 0 7 818 1794 1351 0 0 1 6 param0 0 1795  
661 0 0 4 819 1527 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 1794  
662 0 0 6 820 1523 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 1794  5 point 1 1729  
663 0 0 6 820 1523 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 4 4 this 3 1794  1 x 1 1713  1 y 1 1713  1 z 1 1713  
664 0 0 6 821 1523 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 1795  
665 0 0 6 822 1729 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 1795  1 n 1 1523  
666 0 0 4 824 1527 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 1794  
667 0 0 6 825 1728 0 0 100 /**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */ 1 4 this 3 1795  
668 0 0 4 670 1527 0 0 0 3 3 mat 1 1797  3 fwd 1 1732  2 cs 1 1750  
669 0 0 4 670 1527 0 0 0 4 3 mat 1 1797  3 fwd 1 1732  2 up 1 1732  2 cs 1 1750  
670 0 0 4 670 1527 0 0 0 3 3 mat 1 1798  3 fwd 1 1722  2 cs 1 1750  
671 0 0 4 670 1527 0 0 0 4 3 mat 1 1798  3 fwd 1 1722  2 up 1 1722  2 cs 1 1750  
672 0 0 4 670 1527 0 0 0 3 3 mat 1 1735  3 fwd 1 1732  2 cs 1 1750  
673 0 0 4 670 1527 0 0 0 4 3 mat 1 1735  3 fwd 1 1732  2 up 1 1732  2 cs 1 1750  
674 0 0 4 670 1527 0 0 0 3 3 mat 1 1725  3 fwd 1 1722  2 cs 1 1750  
675 0 0 4 670 1527 0 0 0 4 3 mat 1 1725  3 fwd 1 1722  2 up 1 1722  2 cs 1 1750  
676 0 0 4 670 1527 0 0 0 3 4 quat 1 1799  3 fwd 1 1732  2 cs 1 1750  
677 0 0 4 670 1527 0 0 0 4 4 quat 1 1799  3 fwd 1 1732  2 up 1 1732  2 cs 1 1750  
678 0 0 4 670 1527 0 0 0 3 4 quat 1 1801  3 fwd 1 1722  2 cs 1 1750  
679 0 0 4 670 1527 0 0 0 4 4 quat 1 1801  3 fwd 1 1722  2 up 1 1722  2 cs 1 1750  
680 0 0 4 671 1527 0 0 0 3 3 mat 1 1797  3 fwd 1 1732  2 cs 1 1750  
681 0 0 4 671 1527 0 0 0 4 3 mat 1 1797  3 fwd 1 1732  2 up 1 1732  2 cs 1 1750  
682 0 0 4 671 1527 0 0 0 3 3 mat 1 1798  3 fwd 1 1722  2 cs 1 1750  
683 0 0 4 671 1527 0 0 0 4 3 mat 1 1798  3 fwd 1 1722  2 up 1 1722  2 cs 1 1750  
684 0 0 4 671 1527 0 0 0 3 3 mat 1 1735  3 fwd 1 1732  2 cs 1 1750  
685 0 0 4 671 1527 0 0 0 4 3 mat 1 1735  3 fwd 1 1732  2 up 1 1732  2 cs 1 1750  
686 0 0 4 671 1527 0 0 0 3 3 mat 1 1725  3 fwd 1 1722  2 cs 1 1750  
687 0 0 4 671 1527 0 0 0 4 3 mat 1 1725  3 fwd 1 1722  2 up 1 1722  2 cs 1 1750  
688 0 0 4 671 1527 0 0 0 3 4 quat 1 1799  3 fwd 1 1732  2 cs 1 1750  
689 0 0 4 671 1527 0 0 0 4 4 quat 1 1799  3 fwd 1 1732  2 up 1 1732  2 cs 1 1750  
690 0 0 4 671 1527 0 0 0 3 4 quat 1 1801  3 fwd 1 1722  2 cs 1 1750  
691 0 0 4 671 1527 0 0 0 4 4 quat 1 1801  3 fwd 1 1722  2 up 1 1722  2 cs 1 1750  
692 0 0 4 778 1527 0 0 0 3 3 mat 1 1797  1 a 1 1732  1 b 1 1732  
693 0 0 4 778 1527 0 0 0 3 3 mat 1 1798  1 a 1 1722  1 b 1 1722  
694 0 0 4 778 1527 0 0 0 3 3 mat 1 1735  1 a 1 1732  1 b 1 1732  
695 0 0 4 778 1527 0 0 0 3 3 mat 1 1725  1 a 1 1722  1 b 1 1722  
451
1352 32 ConstPointerToArray< LMatrix3d > 0 141313 32 ConstPointerToArray< LMatrix3d > 32 ConstPointerToArray< LMatrix3d > 0 0 0 1 699 709 0 9 700 701 702 703 704 705 706 707 708 0 0 1 0 1353 0 0 0 0 0

1353 31 PointerToArrayBase< LMatrix3d > 0 26625 31 PointerToArrayBase< LMatrix3d > 31 PointerToArrayBase< LMatrix3d > 0 0 0 0 698 0 0 0 0 1 0 1354 0 0 0 0 0

1354 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 0 0 0 0 0 2 696 697 0 0 1 0 1355 0 0 0 0 0

1355 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1356 32 ConstPointerToArray< LMatrix3f > 0 141313 32 ConstPointerToArray< LMatrix3f > 32 ConstPointerToArray< LMatrix3f > 0 0 0 1 713 723 0 9 714 715 716 717 718 719 720 721 722 0 0 1 0 1357 0 0 0 0 0

1357 31 PointerToArrayBase< LMatrix3f > 0 26625 31 PointerToArrayBase< LMatrix3f > 31 PointerToArrayBase< LMatrix3f > 0 0 0 0 712 0 0 0 0 1 0 1358 0 0 0 0 0

1358 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 0 0 0 0 0 2 710 711 0 0 1 0 1355 0 0 0 0 0

1359 33 ConstPointerToArray< LVecBase2d > 0 141313 33 ConstPointerToArray< LVecBase2d > 33 ConstPointerToArray< LVecBase2d > 0 0 0 1 727 737 0 9 728 729 730 731 732 733 734 735 736 0 0 1 0 1360 0 0 0 0 0

1360 32 PointerToArrayBase< LVecBase2d > 0 26625 32 PointerToArrayBase< LVecBase2d > 32 PointerToArrayBase< LVecBase2d > 0 0 0 0 726 0 0 0 0 1 0 1361 0 0 0 0 0

1361 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 0 0 0 0 0 2 724 725 0 0 1 0 1355 0 0 0 0 0

1362 33 ConstPointerToArray< LVecBase2f > 0 141313 33 ConstPointerToArray< LVecBase2f > 33 ConstPointerToArray< LVecBase2f > 0 0 0 1 741 751 0 9 742 743 744 745 746 747 748 749 750 0 0 1 0 1363 0 0 0 0 0

1363 32 PointerToArrayBase< LVecBase2f > 0 26625 32 PointerToArrayBase< LVecBase2f > 32 PointerToArrayBase< LVecBase2f > 0 0 0 0 740 0 0 0 0 1 0 1364 0 0 0 0 0

1364 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 0 0 0 0 0 2 738 739 0 0 1 0 1355 0 0 0 0 0

1365 33 ConstPointerToArray< LVecBase2i > 0 141313 33 ConstPointerToArray< LVecBase2i > 33 ConstPointerToArray< LVecBase2i > 0 0 0 1 755 765 0 9 756 757 758 759 760 761 762 763 764 0 0 1 0 1366 0 0 0 0 0

1366 32 PointerToArrayBase< LVecBase2i > 0 26625 32 PointerToArrayBase< LVecBase2i > 32 PointerToArrayBase< LVecBase2i > 0 0 0 0 754 0 0 0 0 1 0 1367 0 0 0 0 0

1367 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 0 0 0 0 0 2 752 753 0 0 1 0 1355 0 0 0 0 0

1368 33 ConstPointerToArray< LVecBase3d > 0 141313 33 ConstPointerToArray< LVecBase3d > 33 ConstPointerToArray< LVecBase3d > 0 0 0 1 769 779 0 9 770 771 772 773 774 775 776 777 778 0 0 1 0 1369 0 0 0 0 0

1369 32 PointerToArrayBase< LVecBase3d > 0 26625 32 PointerToArrayBase< LVecBase3d > 32 PointerToArrayBase< LVecBase3d > 0 0 0 0 768 0 0 0 0 1 0 1370 0 0 0 0 0

1370 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 0 0 0 0 0 2 766 767 0 0 1 0 1355 0 0 0 0 0

1371 33 ConstPointerToArray< LVecBase3f > 0 141313 33 ConstPointerToArray< LVecBase3f > 33 ConstPointerToArray< LVecBase3f > 0 0 0 1 783 793 0 9 784 785 786 787 788 789 790 791 792 0 0 1 0 1372 0 0 0 0 0

1372 32 PointerToArrayBase< LVecBase3f > 0 26625 32 PointerToArrayBase< LVecBase3f > 32 PointerToArrayBase< LVecBase3f > 0 0 0 0 782 0 0 0 0 1 0 1373 0 0 0 0 0

1373 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 0 0 0 0 0 2 780 781 0 0 1 0 1355 0 0 0 0 0

1374 33 ConstPointerToArray< LVecBase3i > 0 141313 33 ConstPointerToArray< LVecBase3i > 33 ConstPointerToArray< LVecBase3i > 0 0 0 1 797 807 0 9 798 799 800 801 802 803 804 805 806 0 0 1 0 1375 0 0 0 0 0

1375 32 PointerToArrayBase< LVecBase3i > 0 26625 32 PointerToArrayBase< LVecBase3i > 32 PointerToArrayBase< LVecBase3i > 0 0 0 0 796 0 0 0 0 1 0 1376 0 0 0 0 0

1376 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 0 0 0 0 0 2 794 795 0 0 1 0 1355 0 0 0 0 0

1377 41 ConstPointerToArray< UnalignedLMatrix4d > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4d > 41 ConstPointerToArray< UnalignedLMatrix4d > 0 0 0 1 811 821 0 9 812 813 814 815 816 817 818 819 820 0 0 1 0 1378 0 0 0 0 0

1378 40 PointerToArrayBase< UnalignedLMatrix4d > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4d > 40 PointerToArrayBase< UnalignedLMatrix4d > 0 0 0 0 810 0 0 0 0 1 0 1379 0 0 0 0 0

1379 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 0 0 0 0 0 2 808 809 0 0 1 0 1355 0 0 0 0 0

1380 41 ConstPointerToArray< UnalignedLMatrix4f > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4f > 41 ConstPointerToArray< UnalignedLMatrix4f > 0 0 0 1 825 835 0 9 826 827 828 829 830 831 832 833 834 0 0 1 0 1381 0 0 0 0 0

1381 40 PointerToArrayBase< UnalignedLMatrix4f > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4f > 40 PointerToArrayBase< UnalignedLMatrix4f > 0 0 0 0 824 0 0 0 0 1 0 1382 0 0 0 0 0

1382 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 0 0 0 0 0 2 822 823 0 0 1 0 1355 0 0 0 0 0

1383 42 ConstPointerToArray< UnalignedLVecBase4d > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4d > 42 ConstPointerToArray< UnalignedLVecBase4d > 0 0 0 1 839 849 0 9 840 841 842 843 844 845 846 847 848 0 0 1 0 1384 0 0 0 0 0

1384 41 PointerToArrayBase< UnalignedLVecBase4d > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4d > 41 PointerToArrayBase< UnalignedLVecBase4d > 0 0 0 0 838 0 0 0 0 1 0 1385 0 0 0 0 0

1385 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 0 0 0 0 0 2 836 837 0 0 1 0 1355 0 0 0 0 0

1386 42 ConstPointerToArray< UnalignedLVecBase4f > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4f > 42 ConstPointerToArray< UnalignedLVecBase4f > 0 0 0 1 853 863 0 9 854 855 856 857 858 859 860 861 862 0 0 1 0 1387 0 0 0 0 0

1387 41 PointerToArrayBase< UnalignedLVecBase4f > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4f > 41 PointerToArrayBase< UnalignedLVecBase4f > 0 0 0 0 852 0 0 0 0 1 0 1388 0 0 0 0 0

1388 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 0 0 0 0 0 2 850 851 0 0 1 0 1355 0 0 0 0 0

1389 42 ConstPointerToArray< UnalignedLVecBase4i > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4i > 42 ConstPointerToArray< UnalignedLVecBase4i > 0 0 0 1 867 877 0 9 868 869 870 871 872 873 874 875 876 0 0 1 0 1390 0 0 0 0 0

1390 41 PointerToArrayBase< UnalignedLVecBase4i > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4i > 41 PointerToArrayBase< UnalignedLVecBase4i > 0 0 0 0 866 0 0 0 0 1 0 1391 0 0 0 0 0

1391 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 0 0 0 0 0 2 864 865 0 0 1 0 1355 0 0 0 0 0

1392 27 PointerToArray< LMatrix3d > 0 141313 27 PointerToArray< LMatrix3d > 27 PointerToArray< LMatrix3d > 0 0 0 1 878 895 0 16 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 0 0 1 0 1353 0 0 0 0 0

1393 27 PointerToArray< LMatrix3f > 0 141313 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 1 896 913 0 16 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 0 0 1 0 1357 0 0 0 0 0

1394 28 PointerToArray< LVecBase2d > 0 141313 28 PointerToArray< LVecBase2d > 28 PointerToArray< LVecBase2d > 0 0 0 1 914 931 0 16 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 0 0 1 0 1360 0 0 0 0 0

1395 28 PointerToArray< LVecBase2f > 0 141313 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 1 932 949 0 16 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 0 0 1 0 1363 0 0 0 0 0

1396 28 PointerToArray< LVecBase2i > 0 141313 28 PointerToArray< LVecBase2i > 28 PointerToArray< LVecBase2i > 0 0 0 1 950 967 0 16 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 0 0 1 0 1366 0 0 0 0 0

1397 28 PointerToArray< LVecBase3d > 0 141313 28 PointerToArray< LVecBase3d > 28 PointerToArray< LVecBase3d > 0 0 0 1 968 985 0 16 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 0 0 1 0 1369 0 0 0 0 0

1398 28 PointerToArray< LVecBase3f > 0 141313 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 1 986 1003 0 16 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 0 0 1 0 1372 0 0 0 0 0

1399 28 PointerToArray< LVecBase3i > 0 141313 28 PointerToArray< LVecBase3i > 28 PointerToArray< LVecBase3i > 0 0 0 1 1004 1021 0 16 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 0 0 1 0 1375 0 0 0 0 0

1400 36 PointerToArray< UnalignedLMatrix4d > 0 141313 36 PointerToArray< UnalignedLMatrix4d > 36 PointerToArray< UnalignedLMatrix4d > 0 0 0 1 1022 1039 0 16 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 0 0 1 0 1378 0 0 0 0 0

1401 36 PointerToArray< UnalignedLMatrix4f > 0 141313 36 PointerToArray< UnalignedLMatrix4f > 36 PointerToArray< UnalignedLMatrix4f > 0 0 0 1 1040 1057 0 16 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 0 0 1 0 1381 0 0 0 0 0

1402 37 PointerToArray< UnalignedLVecBase4d > 0 141313 37 PointerToArray< UnalignedLVecBase4d > 37 PointerToArray< UnalignedLVecBase4d > 0 0 0 1 1058 1075 0 16 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 0 0 1 0 1384 0 0 0 0 0

1403 37 PointerToArray< UnalignedLVecBase4f > 0 141313 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 1 1076 1093 0 16 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 0 0 1 0 1387 0 0 0 0 0

1404 37 PointerToArray< UnalignedLVecBase4i > 0 141313 37 PointerToArray< UnalignedLVecBase4i > 37 PointerToArray< UnalignedLVecBase4i > 0 0 0 1 1094 1111 0 16 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 0 0 1 0 1390 0 0 0 0 0

1405 14 BoundingVolume 0 141313 14 BoundingVolume 14 BoundingVolume 0 0 0 0 1121 0 9 1112 1113 1114 1115 1116 1117 1118 1119 1120 0 0 1 0 1406 0 0 0 2 1407 1408 330
/**
 * This is an abstract class for any volume in any sense which can be said to
 * define the locality of reference of a node in a graph, along with all of
 * its descendants.  It is not necessarily a geometric volume (although see
 * GeometricBoundingVolume); this is simply an abstract interface for bounds
 * of any sort.
 */

1406 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1407 17 IntersectionFlags 0 794624 33 BoundingVolume::IntersectionFlags 33 BoundingVolume::IntersectionFlags 1405 0 0 0 0 0 0 0 0 0 5 18 IF_no_intersection 34 BoundingVolume::IF_no_intersection 65
// If no bits are set, it is known that there is no intersection.
0 11 IF_possible 27 BoundingVolume::IF_possible 56
// IF_possible is set if there might be an intersection.
1 7 IF_some 23 BoundingVolume::IF_some 105
// IF_some is set if there is definitely an intersection.  In this case,
// IF_possible will also be set.
2 6 IF_all 22 BoundingVolume::IF_all 69
// When IF_all is set, both IF_possible and IF_some will also be set.
4 18 IF_dont_understand 34 BoundingVolume::IF_dont_understand 106
// IF_dont_understand is set if the particular volumevolume intersection
// test has not been implemented.
8 0 74
// The contains() functions return the union of one or more of these bits.

1408 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 1405 0 0 0 0 0 0 0 0 0 5 10 BT_default 26 BoundingVolume::BT_default 0
0 7 BT_best 23 BoundingVolume::BT_best 0
1 9 BT_sphere 25 BoundingVolume::BT_sphere 0
2 6 BT_box 22 BoundingVolume::BT_box 0
3 10 BT_fastest 26 BoundingVolume::BT_fastest 0
4 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

1409 23 GeometricBoundingVolume 0 141313 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 1127 0 5 1122 1123 1124 1125 1126 0 0 1 0 1405 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

1410 20 FiniteBoundingVolume 0 141313 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 1132 0 4 1128 1129 1130 1131 0 0 1 0 1409 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

1411 10 LParabolaf 0 26625 10 LParabolaf 10 LParabolaf 0 0 0 1 1133 1135 0 12 1134 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1412 10 LParabolad 0 26625 10 LParabolad 10 LParabolad 0 0 0 1 1147 1149 0 12 1148 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1413 9 LParabola 0 2105345 9 LParabola 9 LParabola 0 0 1411 0 0 0 0 0 0 0 0 0 0

1414 7 LPlanef 0 141313 7 LPlanef 7 LPlanef 0 0 0 1 1161 1177 0 15 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 0 0 1 0 1415 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1415 10 LVecBase4f 0 2049 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1416 7 LPlaned 0 141313 7 LPlaned 7 LPlaned 0 0 0 1 1178 1194 0 15 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 0 0 1 0 1417 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1417 10 LVecBase4d 0 2049 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1418 6 LPlane 0 2105345 6 LPlane 6 LPlane 0 0 1414 0 0 0 0 0 0 0 0 0 0

1419 6 PlaneF 0 2105345 6 PlaneF 6 PlaneF 0 0 1414 0 0 0 0 0 0 0 0 0 0

1420 6 PlaneD 0 2105345 6 PlaneD 6 PlaneD 0 0 1416 0 0 0 0 0 0 0 0 0 0

1421 5 Plane 0 2105345 5 Plane 5 Plane 0 0 1414 0 0 0 0 0 0 0 0 0 0

1422 11 BoundingBox 0 141313 11 BoundingBox 11 BoundingBox 0 0 0 1 1195 1207 2 1803 1804 9 1196 1197 1198 1199 1200 1201 1202 1205 1206 2 1812 1813 0 1 0 1410 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1423 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1424 0 0 0 0 0 0 0 0 0 0

1424 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1425 9 LFrustumf 0 141313 9 LFrustumf 9 LFrustumf 0 0 0 1 1208 1215 0 6 1209 1210 1211 1212 1213 1214 0 0 0 0 0 10
/**
 *
 */

1426 9 LFrustumd 0 141313 9 LFrustumd 9 LFrustumd 0 0 0 1 1216 1223 0 6 1217 1218 1219 1220 1221 1222 0 0 0 0 0 10
/**
 *
 */

1427 8 LFrustum 0 2105345 8 LFrustum 8 LFrustum 0 0 1425 0 0 0 0 0 0 0 0 0 0

1428 8 FrustumF 0 2105345 8 FrustumF 8 FrustumF 0 0 1425 0 0 0 0 0 0 0 0 0 0

1429 8 FrustumD 0 2105345 8 FrustumD 8 FrustumD 0 0 1426 0 0 0 0 0 0 0 0 0 0

1430 7 Frustum 0 2105345 7 Frustum 7 Frustum 0 0 1425 0 0 0 0 0 0 0 0 0 0

1431 18 BoundingHexahedron 0 141313 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 1 1224 1232 2 1805 1806 5 1225 1226 1227 1228 1231 2 1814 1815 0 1 0 1410 0 0 0 0 300
/**
 * This defines a bounding convex hexahedron.  It is typically used to
 * represent a frustum, but may represent any enclosing convex hexahedron,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

1432 12 BoundingLine 0 141313 12 BoundingLine 12 BoundingLine 0 0 0 1 1233 1240 0 6 1234 1235 1236 1237 1238 1239 0 0 1 0 1409 0 0 0 0 320
/**
 * This funny bounding volume is an infinite line with no thickness and
 * extending to infinity in both directions.
 *
 * Note that it *always* extends in both directions, despite the fact that you
 * specify two points to the constructor.  These are not endpoints, they are
 * two arbitrary points on the line.
 */

1433 13 BoundingPlane 0 141313 13 BoundingPlane 13 BoundingPlane 0 0 0 1 1241 1247 0 5 1242 1243 1244 1245 1246 0 0 1 0 1409 0 0 0 0 248
/**
 * This funny bounding volume is an infinite plane that divides space into two
 * regions: the part behind the normal, which is "inside" the bounding volume,
 * and the part in front of the normal, which is "outside" the bounding
 * volume.
 */

1434 14 BoundingSphere 0 141313 14 BoundingSphere 14 BoundingSphere 0 0 0 1 1248 1257 0 8 1249 1250 1251 1252 1253 1254 1255 1256 0 0 1 0 1410 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1435 26 IntersectionBoundingVolume 0 141313 26 IntersectionBoundingVolume 26 IntersectionBoundingVolume 0 0 0 1 1258 1268 1 1807 8 1259 1260 1261 1262 1263 1265 1266 1267 1 1816 0 1 0 1409 0 0 0 0 232
/**
 * This special bounding volume is the intersection of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within an IntersectionBoundingVolume if it is
 * within all of its component bounding volumes.
 */

1436 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1437 0 0 0 0 0 0 0 0 0 0

1437 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1409 0 0 0 0 0 0 0 0 0 0

1438 8 Mersenne 0 141313 8 Mersenne 8 Mersenne 0 0 0 1 1271 1273 0 1 1272 0 0 0 0 1 1439 0

1439 0 0 794624 10 Mersenne:: 0 1438 0 0 0 0 0 0 0 0 0 1 9 max_value 19 Mersenne::max_value 0
2147483647 0 0

1440 18 OmniBoundingVolume 0 141313 18 OmniBoundingVolume 18 OmniBoundingVolume 0 0 0 1 1274 1276 0 1 1275 0 0 1 0 1409 0 0 0 0 85
/**
 * This is a special kind of GeometricBoundingVolume that fills all of space.
 */

1441 19 UnionBoundingVolume 0 141313 19 UnionBoundingVolume 19 UnionBoundingVolume 0 0 0 1 1277 1288 1 1808 9 1278 1279 1280 1281 1282 1284 1285 1286 1287 1 1817 0 1 0 1409 0 0 0 0 229
/**
 * This special bounding volume is the union of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within a UnionBoundingVolume if it is within any
 * one or more of its component bounding volumes.
 */

1442 10 Randomizer 0 141313 10 Randomizer 10 Randomizer 0 0 0 1 1289 1296 0 6 1290 1291 1292 1293 1294 1295 0 0 0 0 0 50
/**
 * A handy class to return random numbers.
 */

1443 11 PerlinNoise 0 141313 11 PerlinNoise 11 PerlinNoise 0 0 0 0 1298 0 1 1297 0 0 0 0 0 183
/**
 * This is the base class for PerlinNoise2 and PerlinNoise3, different
 * dimensions of Perlin noise implementation.  The base class just collects
 * the common functionality.
 */

1444 12 PerlinNoise2 0 141313 12 PerlinNoise2 12 PerlinNoise2 0 0 0 1 1299 1304 0 4 1300 1301 1302 1303 0 0 1 0 1443 0 0 0 0 185
/**
 * This class provides an implementation of Perlin noise for 2 variables.
 * This code is loosely based on the reference implementation at
 * http://mrl.nyu.edu/~perlin/noise/ .
 */

1445 12 PerlinNoise3 0 141313 12 PerlinNoise3 12 PerlinNoise3 0 0 0 1 1305 1310 0 4 1306 1307 1308 1309 0 0 1 0 1443 0 0 0 0 185
/**
 * This class provides an implementation of Perlin noise for 3 variables.
 * This code is loosely based on the reference implementation at
 * http://mrl.nyu.edu/~perlin/noise/ .
 */

1446 13 PTA_LMatrix4f 0 2105345 13 PTA_LMatrix4f 13 PTA_LMatrix4f 0 0 1401 0 0 0 0 0 0 0 0 0 0

1447 14 CPTA_LMatrix4f 0 2105345 14 CPTA_LMatrix4f 14 CPTA_LMatrix4f 0 0 1380 0 0 0 0 0 0 0 0 0 0

1448 13 PTA_LMatrix4d 0 2105345 13 PTA_LMatrix4d 13 PTA_LMatrix4d 0 0 1400 0 0 0 0 0 0 0 0 0 0

1449 14 CPTA_LMatrix4d 0 2105345 14 CPTA_LMatrix4d 14 CPTA_LMatrix4d 0 0 1377 0 0 0 0 0 0 0 0 0 0

1450 12 PTA_LMatrix4 0 2105345 12 PTA_LMatrix4 12 PTA_LMatrix4 0 0 1446 0 0 0 0 0 0 0 0 0 0

1451 13 CPTA_LMatrix4 0 2105345 13 CPTA_LMatrix4 13 CPTA_LMatrix4 0 0 1447 0 0 0 0 0 0 0 0 0 0

1452 7 PTAMat4 0 2105345 7 PTAMat4 7 PTAMat4 0 0 1450 0 0 0 0 0 0 0 0 0 0

1453 8 CPTAMat4 0 2105345 8 CPTAMat4 8 CPTAMat4 0 0 1451 0 0 0 0 0 0 0 0 0 0

1454 8 PTAMat4d 0 2105345 8 PTAMat4d 8 PTAMat4d 0 0 1448 0 0 0 0 0 0 0 0 0 0

1455 9 CPTAMat4d 0 2105345 9 CPTAMat4d 9 CPTAMat4d 0 0 1449 0 0 0 0 0 0 0 0 0 0

1456 13 PTA_LMatrix3f 0 2105345 13 PTA_LMatrix3f 13 PTA_LMatrix3f 0 0 1393 0 0 0 0 0 0 0 0 0 0

1457 14 CPTA_LMatrix3f 0 2105345 14 CPTA_LMatrix3f 14 CPTA_LMatrix3f 0 0 1356 0 0 0 0 0 0 0 0 0 0

1458 13 PTA_LMatrix3d 0 2105345 13 PTA_LMatrix3d 13 PTA_LMatrix3d 0 0 1392 0 0 0 0 0 0 0 0 0 0

1459 14 CPTA_LMatrix3d 0 2105345 14 CPTA_LMatrix3d 14 CPTA_LMatrix3d 0 0 1352 0 0 0 0 0 0 0 0 0 0

1460 12 PTA_LMatrix3 0 2105345 12 PTA_LMatrix3 12 PTA_LMatrix3 0 0 1456 0 0 0 0 0 0 0 0 0 0

1461 13 CPTA_LMatrix3 0 2105345 13 CPTA_LMatrix3 13 CPTA_LMatrix3 0 0 1457 0 0 0 0 0 0 0 0 0 0

1462 7 PTAMat3 0 2105345 7 PTAMat3 7 PTAMat3 0 0 1460 0 0 0 0 0 0 0 0 0 0

1463 8 CPTAMat3 0 2105345 8 CPTAMat3 8 CPTAMat3 0 0 1461 0 0 0 0 0 0 0 0 0 0

1464 8 PTAMat3d 0 2105345 8 PTAMat3d 8 PTAMat3d 0 0 1458 0 0 0 0 0 0 0 0 0 0

1465 9 CPTAMat3d 0 2105345 9 CPTAMat3d 9 CPTAMat3d 0 0 1459 0 0 0 0 0 0 0 0 0 0

1466 14 PTA_LVecBase4f 0 2105345 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1403 0 0 0 0 0 0 0 0 0 0

1467 15 CPTA_LVecBase4f 0 2105345 15 CPTA_LVecBase4f 15 CPTA_LVecBase4f 0 0 1386 0 0 0 0 0 0 0 0 0 0

1468 14 PTA_LVecBase4d 0 2105345 14 PTA_LVecBase4d 14 PTA_LVecBase4d 0 0 1402 0 0 0 0 0 0 0 0 0 0

1469 15 CPTA_LVecBase4d 0 2105345 15 CPTA_LVecBase4d 15 CPTA_LVecBase4d 0 0 1383 0 0 0 0 0 0 0 0 0 0

1470 14 PTA_LVecBase4i 0 2105345 14 PTA_LVecBase4i 14 PTA_LVecBase4i 0 0 1404 0 0 0 0 0 0 0 0 0 0

1471 15 CPTA_LVecBase4i 0 2105345 15 CPTA_LVecBase4i 15 CPTA_LVecBase4i 0 0 1389 0 0 0 0 0 0 0 0 0 0

1472 13 PTA_LVecBase4 0 2105345 13 PTA_LVecBase4 13 PTA_LVecBase4 0 0 1466 0 0 0 0 0 0 0 0 0 0

1473 14 CPTA_LVecBase4 0 2105345 14 CPTA_LVecBase4 14 CPTA_LVecBase4 0 0 1467 0 0 0 0 0 0 0 0 0 0

1474 12 PTAVecBase4f 0 2105345 12 PTAVecBase4f 12 PTAVecBase4f 0 0 1466 0 0 0 0 0 0 0 0 0 0

1475 13 CPTAVecBase4f 0 2105345 13 CPTAVecBase4f 13 CPTAVecBase4f 0 0 1467 0 0 0 0 0 0 0 0 0 0

1476 12 PTAVecBase4d 0 2105345 12 PTAVecBase4d 12 PTAVecBase4d 0 0 1468 0 0 0 0 0 0 0 0 0 0

1477 13 CPTAVecBase4d 0 2105345 13 CPTAVecBase4d 13 CPTAVecBase4d 0 0 1469 0 0 0 0 0 0 0 0 0 0

1478 14 PTA_LVecBase3f 0 2105345 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1398 0 0 0 0 0 0 0 0 0 0

1479 15 CPTA_LVecBase3f 0 2105345 15 CPTA_LVecBase3f 15 CPTA_LVecBase3f 0 0 1371 0 0 0 0 0 0 0 0 0 0

1480 14 PTA_LVecBase3d 0 2105345 14 PTA_LVecBase3d 14 PTA_LVecBase3d 0 0 1397 0 0 0 0 0 0 0 0 0 0

1481 15 CPTA_LVecBase3d 0 2105345 15 CPTA_LVecBase3d 15 CPTA_LVecBase3d 0 0 1368 0 0 0 0 0 0 0 0 0 0

1482 14 PTA_LVecBase3i 0 2105345 14 PTA_LVecBase3i 14 PTA_LVecBase3i 0 0 1399 0 0 0 0 0 0 0 0 0 0

1483 15 CPTA_LVecBase3i 0 2105345 15 CPTA_LVecBase3i 15 CPTA_LVecBase3i 0 0 1374 0 0 0 0 0 0 0 0 0 0

1484 13 PTA_LVecBase3 0 2105345 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1478 0 0 0 0 0 0 0 0 0 0

1485 14 CPTA_LVecBase3 0 2105345 14 CPTA_LVecBase3 14 CPTA_LVecBase3 0 0 1479 0 0 0 0 0 0 0 0 0 0

1486 12 PTAVecBase3f 0 2105345 12 PTAVecBase3f 12 PTAVecBase3f 0 0 1478 0 0 0 0 0 0 0 0 0 0

1487 13 CPTAVecBase3f 0 2105345 13 CPTAVecBase3f 13 CPTAVecBase3f 0 0 1479 0 0 0 0 0 0 0 0 0 0

1488 12 PTAVecBase3d 0 2105345 12 PTAVecBase3d 12 PTAVecBase3d 0 0 1480 0 0 0 0 0 0 0 0 0 0

1489 13 CPTAVecBase3d 0 2105345 13 CPTAVecBase3d 13 CPTAVecBase3d 0 0 1481 0 0 0 0 0 0 0 0 0 0

1490 14 PTA_LVecBase2f 0 2105345 14 PTA_LVecBase2f 14 PTA_LVecBase2f 0 0 1395 0 0 0 0 0 0 0 0 0 0

1491 15 CPTA_LVecBase2f 0 2105345 15 CPTA_LVecBase2f 15 CPTA_LVecBase2f 0 0 1362 0 0 0 0 0 0 0 0 0 0

1492 14 PTA_LVecBase2d 0 2105345 14 PTA_LVecBase2d 14 PTA_LVecBase2d 0 0 1394 0 0 0 0 0 0 0 0 0 0

1493 15 CPTA_LVecBase2d 0 2105345 15 CPTA_LVecBase2d 15 CPTA_LVecBase2d 0 0 1359 0 0 0 0 0 0 0 0 0 0

1494 14 PTA_LVecBase2i 0 2105345 14 PTA_LVecBase2i 14 PTA_LVecBase2i 0 0 1396 0 0 0 0 0 0 0 0 0 0

1495 15 CPTA_LVecBase2i 0 2105345 15 CPTA_LVecBase2i 15 CPTA_LVecBase2i 0 0 1365 0 0 0 0 0 0 0 0 0 0

1496 13 PTA_LVecBase2 0 2105345 13 PTA_LVecBase2 13 PTA_LVecBase2 0 0 1490 0 0 0 0 0 0 0 0 0 0

1497 14 CPTA_LVecBase2 0 2105345 14 CPTA_LVecBase2 14 CPTA_LVecBase2 0 0 1491 0 0 0 0 0 0 0 0 0 0

1498 12 PTAVecBase2f 0 2105345 12 PTAVecBase2f 12 PTAVecBase2f 0 0 1490 0 0 0 0 0 0 0 0 0 0

1499 13 CPTAVecBase2f 0 2105345 13 CPTAVecBase2f 13 CPTAVecBase2f 0 0 1491 0 0 0 0 0 0 0 0 0 0

1500 12 PTAVecBase2d 0 2105345 12 PTAVecBase2d 12 PTAVecBase2d 0 0 1492 0 0 0 0 0 0 0 0 0 0

1501 13 CPTAVecBase2d 0 2105345 13 CPTAVecBase2d 13 CPTAVecBase2d 0 0 1493 0 0 0 0 0 0 0 0 0 0

1502 19 StackedPerlinNoise2 0 141313 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 1 1312 1318 0 5 1313 1314 1315 1316 1317 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1503 19 StackedPerlinNoise3 0 141313 19 StackedPerlinNoise3 19 StackedPerlinNoise3 0 0 0 1 1319 1325 0 5 1320 1321 1322 1323 1324 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1504 12 Triangulator 0 141313 12 Triangulator 12 Triangulator 0 0 0 1 1326 1342 1 1809 14 1327 1328 1329 1330 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1 1818 0 0 0 0 382
/**
 * This class can triangulate a convex or concave polygon, even one with
 * holes.  It is adapted from an algorithm published as:
 *
 * Narkhede A. and Manocha D., Fast polygon triangulation algorithm based on
 * Seidel's Algorithm, UNC-CH, 1994.
 *
 * http://www.cs.unc.edu/~dm/CODE/GEM/chapter.html
 *
 * It works strictly on 2-d points.  See Triangulator3 for 3-d points.
 */

1505 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 1506 0 0 0 0 0 0 0 0 0 0

1506 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

1507 13 Triangulator3 0 141313 13 Triangulator3 13 Triangulator3 0 0 0 1 1343 1351 2 1810 1811 6 1344 1345 1346 1347 1348 1349 1 1819 0 1 0 1504 0 0 0 0 264
/**
 * This is an extension of Triangulator to handle polygons with three-
 * dimensional points.  It assumes all of the points lie in a single plane,
 * and internally projects the supplied points into 2-D for passing to the
 * underlying Triangulator object.
 */

1508 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 1509 0 0 0 0 0 0 0 0 0 0

1509 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1510 13 LPlaned const 0 8832 13 LPlaned const 13 LPlaned const 0 0 1416 0 0 0 0 0 0 0 0 0 0

1511 40 ConstPointerToArray< LMatrix3d > const * 0 8576 40 ConstPointerToArray< LMatrix3d > const * 40 ConstPointerToArray< LMatrix3d > const * 0 0 1512 0 0 0 0 0 0 0 0 0 0

1512 38 ConstPointerToArray< LMatrix3d > const 0 8832 38 ConstPointerToArray< LMatrix3d > const 38 ConstPointerToArray< LMatrix3d > const 0 0 1352 0 0 0 0 0 0 0 0 0 0

1513 34 ConstPointerToArray< LMatrix3d > * 0 8576 34 ConstPointerToArray< LMatrix3d > * 34 ConstPointerToArray< LMatrix3d > * 0 0 1352 0 0 0 0 0 0 0 0 0 0

1514 35 PointerToArray< LMatrix3d > const * 0 8576 35 PointerToArray< LMatrix3d > const * 35 PointerToArray< LMatrix3d > const * 0 0 1515 0 0 0 0 0 0 0 0 0 0

1515 33 PointerToArray< LMatrix3d > const 0 8832 33 PointerToArray< LMatrix3d > const 33 PointerToArray< LMatrix3d > const 0 0 1392 0 0 0 0 0 0 0 0 0 0

1516 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1517 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 1518 0 0 0 0 0 0 0 0 0 0

1518 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 1519 0 0 0 0 0 0 0 0 0 0

1519 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1520 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1521 0 0 0 0 0 0 0 0 0 0

1521 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1522 0 0 0 0 0 0 0 0 0 0

1522 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1523 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1524 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1525 0 0 0 0 0 0 0 0 0 0

1525 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1526 0 0 0 0 0 0 0 0 0 0

1526 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1527 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1528 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 0 1354 0 0 0 0 0 0 0 0 0 0

1529 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 0 1530 0 0 0 0 0 0 0 0 0 0

1530 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 0 1354 0 0 0 0 0 0 0 0 0 0

1531 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1532 0 0 0 0 0 0 0 0 0 0

1532 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1533 40 ConstPointerToArray< LMatrix3f > const * 0 8576 40 ConstPointerToArray< LMatrix3f > const * 40 ConstPointerToArray< LMatrix3f > const * 0 0 1534 0 0 0 0 0 0 0 0 0 0

1534 38 ConstPointerToArray< LMatrix3f > const 0 8832 38 ConstPointerToArray< LMatrix3f > const 38 ConstPointerToArray< LMatrix3f > const 0 0 1356 0 0 0 0 0 0 0 0 0 0

1535 34 ConstPointerToArray< LMatrix3f > * 0 8576 34 ConstPointerToArray< LMatrix3f > * 34 ConstPointerToArray< LMatrix3f > * 0 0 1356 0 0 0 0 0 0 0 0 0 0

1536 35 PointerToArray< LMatrix3f > const * 0 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 1537 0 0 0 0 0 0 0 0 0 0

1537 33 PointerToArray< LMatrix3f > const 0 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 1393 0 0 0 0 0 0 0 0 0 0

1538 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1539 0 0 0 0 0 0 0 0 0 0

1539 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1540 0 0 0 0 0 0 0 0 0 0

1540 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1541 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 0 1358 0 0 0 0 0 0 0 0 0 0

1542 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 0 1543 0 0 0 0 0 0 0 0 0 0

1543 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 0 1358 0 0 0 0 0 0 0 0 0 0

1544 41 ConstPointerToArray< LVecBase2d > const * 0 8576 41 ConstPointerToArray< LVecBase2d > const * 41 ConstPointerToArray< LVecBase2d > const * 0 0 1545 0 0 0 0 0 0 0 0 0 0

1545 39 ConstPointerToArray< LVecBase2d > const 0 8832 39 ConstPointerToArray< LVecBase2d > const 39 ConstPointerToArray< LVecBase2d > const 0 0 1359 0 0 0 0 0 0 0 0 0 0

1546 35 ConstPointerToArray< LVecBase2d > * 0 8576 35 ConstPointerToArray< LVecBase2d > * 35 ConstPointerToArray< LVecBase2d > * 0 0 1359 0 0 0 0 0 0 0 0 0 0

1547 36 PointerToArray< LVecBase2d > const * 0 8576 36 PointerToArray< LVecBase2d > const * 36 PointerToArray< LVecBase2d > const * 0 0 1548 0 0 0 0 0 0 0 0 0 0

1548 34 PointerToArray< LVecBase2d > const 0 8832 34 PointerToArray< LVecBase2d > const 34 PointerToArray< LVecBase2d > const 0 0 1394 0 0 0 0 0 0 0 0 0 0

1549 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 1550 0 0 0 0 0 0 0 0 0 0

1550 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 1551 0 0 0 0 0 0 0 0 0 0

1551 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1552 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 0 1361 0 0 0 0 0 0 0 0 0 0

1553 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1554 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 0 1361 0 0 0 0 0 0 0 0 0 0

1555 41 ConstPointerToArray< LVecBase2f > const * 0 8576 41 ConstPointerToArray< LVecBase2f > const * 41 ConstPointerToArray< LVecBase2f > const * 0 0 1556 0 0 0 0 0 0 0 0 0 0

1556 39 ConstPointerToArray< LVecBase2f > const 0 8832 39 ConstPointerToArray< LVecBase2f > const 39 ConstPointerToArray< LVecBase2f > const 0 0 1362 0 0 0 0 0 0 0 0 0 0

1557 35 ConstPointerToArray< LVecBase2f > * 0 8576 35 ConstPointerToArray< LVecBase2f > * 35 ConstPointerToArray< LVecBase2f > * 0 0 1362 0 0 0 0 0 0 0 0 0 0

1558 36 PointerToArray< LVecBase2f > const * 0 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 1559 0 0 0 0 0 0 0 0 0 0

1559 34 PointerToArray< LVecBase2f > const 0 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 1395 0 0 0 0 0 0 0 0 0 0

1560 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 1561 0 0 0 0 0 0 0 0 0 0

1561 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 1562 0 0 0 0 0 0 0 0 0 0

1562 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1563 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 0 1364 0 0 0 0 0 0 0 0 0 0

1564 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 0 1565 0 0 0 0 0 0 0 0 0 0

1565 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 0 1364 0 0 0 0 0 0 0 0 0 0

1566 41 ConstPointerToArray< LVecBase2i > const * 0 8576 41 ConstPointerToArray< LVecBase2i > const * 41 ConstPointerToArray< LVecBase2i > const * 0 0 1567 0 0 0 0 0 0 0 0 0 0

1567 39 ConstPointerToArray< LVecBase2i > const 0 8832 39 ConstPointerToArray< LVecBase2i > const 39 ConstPointerToArray< LVecBase2i > const 0 0 1365 0 0 0 0 0 0 0 0 0 0

1568 35 ConstPointerToArray< LVecBase2i > * 0 8576 35 ConstPointerToArray< LVecBase2i > * 35 ConstPointerToArray< LVecBase2i > * 0 0 1365 0 0 0 0 0 0 0 0 0 0

1569 36 PointerToArray< LVecBase2i > const * 0 8576 36 PointerToArray< LVecBase2i > const * 36 PointerToArray< LVecBase2i > const * 0 0 1570 0 0 0 0 0 0 0 0 0 0

1570 34 PointerToArray< LVecBase2i > const 0 8832 34 PointerToArray< LVecBase2i > const 34 PointerToArray< LVecBase2i > const 0 0 1396 0 0 0 0 0 0 0 0 0 0

1571 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 1572 0 0 0 0 0 0 0 0 0 0

1572 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 1573 0 0 0 0 0 0 0 0 0 0

1573 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1574 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1575 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 0 1576 0 0 0 0 0 0 0 0 0 0

1576 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 0 1367 0 0 0 0 0 0 0 0 0 0

1577 41 ConstPointerToArray< LVecBase3d > const * 0 8576 41 ConstPointerToArray< LVecBase3d > const * 41 ConstPointerToArray< LVecBase3d > const * 0 0 1578 0 0 0 0 0 0 0 0 0 0

1578 39 ConstPointerToArray< LVecBase3d > const 0 8832 39 ConstPointerToArray< LVecBase3d > const 39 ConstPointerToArray< LVecBase3d > const 0 0 1368 0 0 0 0 0 0 0 0 0 0

1579 35 ConstPointerToArray< LVecBase3d > * 0 8576 35 ConstPointerToArray< LVecBase3d > * 35 ConstPointerToArray< LVecBase3d > * 0 0 1368 0 0 0 0 0 0 0 0 0 0

1580 36 PointerToArray< LVecBase3d > const * 0 8576 36 PointerToArray< LVecBase3d > const * 36 PointerToArray< LVecBase3d > const * 0 0 1581 0 0 0 0 0 0 0 0 0 0

1581 34 PointerToArray< LVecBase3d > const 0 8832 34 PointerToArray< LVecBase3d > const 34 PointerToArray< LVecBase3d > const 0 0 1397 0 0 0 0 0 0 0 0 0 0

1582 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 1583 0 0 0 0 0 0 0 0 0 0

1583 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 1584 0 0 0 0 0 0 0 0 0 0

1584 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1585 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 0 1370 0 0 0 0 0 0 0 0 0 0

1586 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 0 1587 0 0 0 0 0 0 0 0 0 0

1587 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 0 1370 0 0 0 0 0 0 0 0 0 0

1588 41 ConstPointerToArray< LVecBase3f > const * 0 8576 41 ConstPointerToArray< LVecBase3f > const * 41 ConstPointerToArray< LVecBase3f > const * 0 0 1589 0 0 0 0 0 0 0 0 0 0

1589 39 ConstPointerToArray< LVecBase3f > const 0 8832 39 ConstPointerToArray< LVecBase3f > const 39 ConstPointerToArray< LVecBase3f > const 0 0 1371 0 0 0 0 0 0 0 0 0 0

1590 35 ConstPointerToArray< LVecBase3f > * 0 8576 35 ConstPointerToArray< LVecBase3f > * 35 ConstPointerToArray< LVecBase3f > * 0 0 1371 0 0 0 0 0 0 0 0 0 0

1591 36 PointerToArray< LVecBase3f > const * 0 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 1592 0 0 0 0 0 0 0 0 0 0

1592 34 PointerToArray< LVecBase3f > const 0 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 1398 0 0 0 0 0 0 0 0 0 0

1593 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1594 0 0 0 0 0 0 0 0 0 0

1594 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1595 0 0 0 0 0 0 0 0 0 0

1595 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1596 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 0 1373 0 0 0 0 0 0 0 0 0 0

1597 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 0 1598 0 0 0 0 0 0 0 0 0 0

1598 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 0 1373 0 0 0 0 0 0 0 0 0 0

1599 41 ConstPointerToArray< LVecBase3i > const * 0 8576 41 ConstPointerToArray< LVecBase3i > const * 41 ConstPointerToArray< LVecBase3i > const * 0 0 1600 0 0 0 0 0 0 0 0 0 0

1600 39 ConstPointerToArray< LVecBase3i > const 0 8832 39 ConstPointerToArray< LVecBase3i > const 39 ConstPointerToArray< LVecBase3i > const 0 0 1374 0 0 0 0 0 0 0 0 0 0

1601 35 ConstPointerToArray< LVecBase3i > * 0 8576 35 ConstPointerToArray< LVecBase3i > * 35 ConstPointerToArray< LVecBase3i > * 0 0 1374 0 0 0 0 0 0 0 0 0 0

1602 36 PointerToArray< LVecBase3i > const * 0 8576 36 PointerToArray< LVecBase3i > const * 36 PointerToArray< LVecBase3i > const * 0 0 1603 0 0 0 0 0 0 0 0 0 0

1603 34 PointerToArray< LVecBase3i > const 0 8832 34 PointerToArray< LVecBase3i > const 34 PointerToArray< LVecBase3i > const 0 0 1399 0 0 0 0 0 0 0 0 0 0

1604 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 1605 0 0 0 0 0 0 0 0 0 0

1605 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 1606 0 0 0 0 0 0 0 0 0 0

1606 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1607 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1608 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 0 1609 0 0 0 0 0 0 0 0 0 0

1609 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 0 1376 0 0 0 0 0 0 0 0 0 0

1610 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4d > const * 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 0 1611 0 0 0 0 0 0 0 0 0 0

1611 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4d > const 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 0 1377 0 0 0 0 0 0 0 0 0 0

1612 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4d > * 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 0 1377 0 0 0 0 0 0 0 0 0 0

1613 44 PointerToArray< UnalignedLMatrix4d > const * 0 8576 44 PointerToArray< UnalignedLMatrix4d > const * 44 PointerToArray< UnalignedLMatrix4d > const * 0 0 1614 0 0 0 0 0 0 0 0 0 0

1614 42 PointerToArray< UnalignedLMatrix4d > const 0 8832 42 PointerToArray< UnalignedLMatrix4d > const 42 PointerToArray< UnalignedLMatrix4d > const 0 0 1400 0 0 0 0 0 0 0 0 0 0

1615 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 1616 0 0 0 0 0 0 0 0 0 0

1616 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 1617 0 0 0 0 0 0 0 0 0 0

1617 18 UnalignedLMatrix4d 0 2048 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1618 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 0 1379 0 0 0 0 0 0 0 0 0 0

1619 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 0 1620 0 0 0 0 0 0 0 0 0 0

1620 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 0 1379 0 0 0 0 0 0 0 0 0 0

1621 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4f > const * 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 0 1622 0 0 0 0 0 0 0 0 0 0

1622 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4f > const 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 0 1380 0 0 0 0 0 0 0 0 0 0

1623 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4f > * 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 0 1380 0 0 0 0 0 0 0 0 0 0

1624 44 PointerToArray< UnalignedLMatrix4f > const * 0 8576 44 PointerToArray< UnalignedLMatrix4f > const * 44 PointerToArray< UnalignedLMatrix4f > const * 0 0 1625 0 0 0 0 0 0 0 0 0 0

1625 42 PointerToArray< UnalignedLMatrix4f > const 0 8832 42 PointerToArray< UnalignedLMatrix4f > const 42 PointerToArray< UnalignedLMatrix4f > const 0 0 1401 0 0 0 0 0 0 0 0 0 0

1626 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 1627 0 0 0 0 0 0 0 0 0 0

1627 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 1628 0 0 0 0 0 0 0 0 0 0

1628 18 UnalignedLMatrix4f 0 2048 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1629 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 0 1382 0 0 0 0 0 0 0 0 0 0

1630 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 0 1631 0 0 0 0 0 0 0 0 0 0

1631 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 0 1382 0 0 0 0 0 0 0 0 0 0

1632 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4d > const * 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 0 1633 0 0 0 0 0 0 0 0 0 0

1633 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4d > const 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 0 1383 0 0 0 0 0 0 0 0 0 0

1634 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4d > * 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 0 1383 0 0 0 0 0 0 0 0 0 0

1635 45 PointerToArray< UnalignedLVecBase4d > const * 0 8576 45 PointerToArray< UnalignedLVecBase4d > const * 45 PointerToArray< UnalignedLVecBase4d > const * 0 0 1636 0 0 0 0 0 0 0 0 0 0

1636 43 PointerToArray< UnalignedLVecBase4d > const 0 8832 43 PointerToArray< UnalignedLVecBase4d > const 43 PointerToArray< UnalignedLVecBase4d > const 0 0 1402 0 0 0 0 0 0 0 0 0 0

1637 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 1638 0 0 0 0 0 0 0 0 0 0

1638 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 1639 0 0 0 0 0 0 0 0 0 0

1639 19 UnalignedLVecBase4d 0 2048 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1640 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 0 1385 0 0 0 0 0 0 0 0 0 0

1641 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 0 1642 0 0 0 0 0 0 0 0 0 0

1642 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 0 1385 0 0 0 0 0 0 0 0 0 0

1643 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4f > const * 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 0 1644 0 0 0 0 0 0 0 0 0 0

1644 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4f > const 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 0 1386 0 0 0 0 0 0 0 0 0 0

1645 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4f > * 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 0 1386 0 0 0 0 0 0 0 0 0 0

1646 45 PointerToArray< UnalignedLVecBase4f > const * 0 8576 45 PointerToArray< UnalignedLVecBase4f > const * 45 PointerToArray< UnalignedLVecBase4f > const * 0 0 1647 0 0 0 0 0 0 0 0 0 0

1647 43 PointerToArray< UnalignedLVecBase4f > const 0 8832 43 PointerToArray< UnalignedLVecBase4f > const 43 PointerToArray< UnalignedLVecBase4f > const 0 0 1403 0 0 0 0 0 0 0 0 0 0

1648 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 1649 0 0 0 0 0 0 0 0 0 0

1649 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 1650 0 0 0 0 0 0 0 0 0 0

1650 19 UnalignedLVecBase4f 0 2048 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1651 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 0 1388 0 0 0 0 0 0 0 0 0 0

1652 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 0 1653 0 0 0 0 0 0 0 0 0 0

1653 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 0 1388 0 0 0 0 0 0 0 0 0 0

1654 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4i > const * 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 0 1655 0 0 0 0 0 0 0 0 0 0

1655 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4i > const 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 0 1389 0 0 0 0 0 0 0 0 0 0

1656 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4i > * 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 0 1389 0 0 0 0 0 0 0 0 0 0

1657 45 PointerToArray< UnalignedLVecBase4i > const * 0 8576 45 PointerToArray< UnalignedLVecBase4i > const * 45 PointerToArray< UnalignedLVecBase4i > const * 0 0 1658 0 0 0 0 0 0 0 0 0 0

1658 43 PointerToArray< UnalignedLVecBase4i > const 0 8832 43 PointerToArray< UnalignedLVecBase4i > const 43 PointerToArray< UnalignedLVecBase4i > const 0 0 1404 0 0 0 0 0 0 0 0 0 0

1659 27 UnalignedLVecBase4i const * 0 8576 27 UnalignedLVecBase4i const * 27 UnalignedLVecBase4i const * 0 0 1660 0 0 0 0 0 0 0 0 0 0

1660 25 UnalignedLVecBase4i const 0 8832 25 UnalignedLVecBase4i const 25 UnalignedLVecBase4i const 0 0 1661 0 0 0 0 0 0 0 0 0 0

1661 19 UnalignedLVecBase4i 0 2048 19 UnalignedLVecBase4i 19 UnalignedLVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1662 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1663 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 0 1664 0 0 0 0 0 0 0 0 0 0

1664 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 0 1391 0 0 0 0 0 0 0 0 0 0

1665 29 PointerToArray< LMatrix3d > * 0 8576 29 PointerToArray< LMatrix3d > * 29 PointerToArray< LMatrix3d > * 0 0 1392 0 0 0 0 0 0 0 0 0 0

1666 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1667 0 0 0 0 0 0 0 0 0 0

1667 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1668 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1669 29 PointerToArray< LMatrix3f > * 0 8576 29 PointerToArray< LMatrix3f > * 29 PointerToArray< LMatrix3f > * 0 0 1393 0 0 0 0 0 0 0 0 0 0

1670 30 PointerToArray< LVecBase2d > * 0 8576 30 PointerToArray< LVecBase2d > * 30 PointerToArray< LVecBase2d > * 0 0 1394 0 0 0 0 0 0 0 0 0 0

1671 30 PointerToArray< LVecBase2f > * 0 8576 30 PointerToArray< LVecBase2f > * 30 PointerToArray< LVecBase2f > * 0 0 1395 0 0 0 0 0 0 0 0 0 0

1672 30 PointerToArray< LVecBase2i > * 0 8576 30 PointerToArray< LVecBase2i > * 30 PointerToArray< LVecBase2i > * 0 0 1396 0 0 0 0 0 0 0 0 0 0

1673 30 PointerToArray< LVecBase3d > * 0 8576 30 PointerToArray< LVecBase3d > * 30 PointerToArray< LVecBase3d > * 0 0 1397 0 0 0 0 0 0 0 0 0 0

1674 30 PointerToArray< LVecBase3f > * 0 8576 30 PointerToArray< LVecBase3f > * 30 PointerToArray< LVecBase3f > * 0 0 1398 0 0 0 0 0 0 0 0 0 0

1675 30 PointerToArray< LVecBase3i > * 0 8576 30 PointerToArray< LVecBase3i > * 30 PointerToArray< LVecBase3i > * 0 0 1399 0 0 0 0 0 0 0 0 0 0

1676 38 PointerToArray< UnalignedLMatrix4d > * 0 8576 38 PointerToArray< UnalignedLMatrix4d > * 38 PointerToArray< UnalignedLMatrix4d > * 0 0 1400 0 0 0 0 0 0 0 0 0 0

1677 38 PointerToArray< UnalignedLMatrix4f > * 0 8576 38 PointerToArray< UnalignedLMatrix4f > * 38 PointerToArray< UnalignedLMatrix4f > * 0 0 1401 0 0 0 0 0 0 0 0 0 0

1678 39 PointerToArray< UnalignedLVecBase4d > * 0 8576 39 PointerToArray< UnalignedLVecBase4d > * 39 PointerToArray< UnalignedLVecBase4d > * 0 0 1402 0 0 0 0 0 0 0 0 0 0

1679 39 PointerToArray< UnalignedLVecBase4f > * 0 8576 39 PointerToArray< UnalignedLVecBase4f > * 39 PointerToArray< UnalignedLVecBase4f > * 0 0 1403 0 0 0 0 0 0 0 0 0 0

1680 39 PointerToArray< UnalignedLVecBase4i > * 0 8576 39 PointerToArray< UnalignedLVecBase4i > * 39 PointerToArray< UnalignedLVecBase4i > * 0 0 1404 0 0 0 0 0 0 0 0 0 0

1681 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 1682 0 0 0 0 0 0 0 0 0 0

1682 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 1405 0 0 0 0 0 0 0 0 0 0

1683 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 1405 0 0 0 0 0 0 0 0 0 0

1684 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1685 25 GeometricBoundingVolume * 0 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 1409 0 0 0 0 0 0 0 0 0 0

1686 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1687 0 0 0 0 0 0 0 0 0 0

1687 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1423 0 0 0 0 0 0 0 0 0 0

1688 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1423 0 0 0 0 0 0 0 0 0 0

1689 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1690 0 0 0 0 0 0 0 0 0 0

1690 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1691 0 0 0 0 0 0 0 0 0 0

1691 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1692 0 0 0 0 0 0 0 0 0 0

1692 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1693 28 FiniteBoundingVolume const * 0 8576 28 FiniteBoundingVolume const * 28 FiniteBoundingVolume const * 0 0 1694 0 0 0 0 0 0 0 0 0 0

1694 26 FiniteBoundingVolume const 0 8832 26 FiniteBoundingVolume const 26 FiniteBoundingVolume const 0 0 1410 0 0 0 0 0 0 0 0 0 0

1695 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1696 0 0 0 0 0 0 0 0 0 0

1696 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1697 12 LParabolaf * 0 8576 12 LParabolaf * 12 LParabolaf * 0 0 1411 0 0 0 0 0 0 0 0 0 0

1698 18 LParabolaf const * 0 8576 18 LParabolaf const * 18 LParabolaf const * 0 0 1699 0 0 0 0 0 0 0 0 0 0

1699 16 LParabolaf const 0 8832 16 LParabolaf const 16 LParabolaf const 0 0 1411 0 0 0 0 0 0 0 0 0 0

1700 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 1701 0 0 0 0 0 0 0 0 0 0

1701 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 1692 0 0 0 0 0 0 0 0 0 0

1702 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1424 0 0 0 0 0 0 0 0 0 0

1703 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1704 0 0 0 0 0 0 0 0 0 0

1704 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

1705 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1706 0 0 0 0 0 0 0 0 0 0

1706 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 215
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 */

1707 12 LParabolad * 0 8576 12 LParabolad * 12 LParabolad * 0 0 1412 0 0 0 0 0 0 0 0 0 0

1708 18 LParabolad const * 0 8576 18 LParabolad const * 18 LParabolad const * 0 0 1709 0 0 0 0 0 0 0 0 0 0

1709 16 LParabolad const 0 8832 16 LParabolad const 16 LParabolad const 0 0 1412 0 0 0 0 0 0 0 0 0 0

1710 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 1711 0 0 0 0 0 0 0 0 0 0

1711 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 1712 0 0 0 0 0 0 0 0 0 0

1712 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1713 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1714 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 1509 0 0 0 0 0 0 0 0 0 0

1715 9 LPlanef * 0 8576 9 LPlanef * 9 LPlanef * 0 0 1414 0 0 0 0 0 0 0 0 0 0

1716 15 LPlanef const * 0 8576 15 LPlanef const * 15 LPlanef const * 0 0 1717 0 0 0 0 0 0 0 0 0 0

1717 13 LPlanef const 0 8832 13 LPlanef const 13 LPlanef const 0 0 1414 0 0 0 0 0 0 0 0 0 0

1718 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1719 0 0 0 0 0 0 0 0 0 0

1719 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1424 0 0 0 0 0 0 0 0 0 0

1720 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1721 0 0 0 0 0 0 0 0 0 0

1721 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1415 0 0 0 0 0 0 0 0 0 0

1722 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1723 0 0 0 0 0 0 0 0 0 0

1723 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1724 0 0 0 0 0 0 0 0 0 0

1724 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1725 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 1692 0 0 0 0 0 0 0 0 0 0

1726 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1724 0 0 0 0 0 0 0 0 0 0

1727 9 LPlaned * 0 8576 9 LPlaned * 9 LPlaned * 0 0 1416 0 0 0 0 0 0 0 0 0 0

1728 15 LPlaned const * 0 8576 15 LPlaned const * 15 LPlaned const * 0 0 1510 0 0 0 0 0 0 0 0 0 0

1729 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 1508 0 0 0 0 0 0 0 0 0 0

1730 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 1731 0 0 0 0 0 0 0 0 0 0

1731 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 1417 0 0 0 0 0 0 0 0 0 0

1732 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 1733 0 0 0 0 0 0 0 0 0 0

1733 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 1734 0 0 0 0 0 0 0 0 0 0

1734 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1735 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 1712 0 0 0 0 0 0 0 0 0 0

1736 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 1734 0 0 0 0 0 0 0 0 0 0

1737 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1422 0 0 0 0 0 0 0 0 0 0

1738 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1516 0 0 0 0 0 0 0 0 0 0

1739 19 BoundingBox const * 0 8576 19 BoundingBox const * 19 BoundingBox const * 0 0 1740 0 0 0 0 0 0 0 0 0 0

1740 17 BoundingBox const 0 8832 17 BoundingBox const 17 BoundingBox const 0 0 1422 0 0 0 0 0 0 0 0 0 0

1741 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1742 11 LFrustumf * 0 8576 11 LFrustumf * 11 LFrustumf * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1743 17 LFrustumf const * 0 8576 17 LFrustumf const * 17 LFrustumf const * 0 0 1744 0 0 0 0 0 0 0 0 0 0

1744 15 LFrustumf const 0 8832 15 LFrustumf const 15 LFrustumf const 0 0 1425 0 0 0 0 0 0 0 0 0 0

1745 11 LFrustumd * 0 8576 11 LFrustumd * 11 LFrustumd * 0 0 1426 0 0 0 0 0 0 0 0 0 0

1746 17 LFrustumd const * 0 8576 17 LFrustumd const * 17 LFrustumd const * 0 0 1747 0 0 0 0 0 0 0 0 0 0

1747 15 LFrustumd const 0 8832 15 LFrustumd const 15 LFrustumd const 0 0 1426 0 0 0 0 0 0 0 0 0 0

1748 16 LFrustum const * 0 8576 16 LFrustum const * 16 LFrustum const * 0 0 1749 0 0 0 0 0 0 0 0 0 0

1749 14 LFrustum const 0 8832 14 LFrustum const 14 LFrustum const 0 0 1427 0 0 0 0 0 0 0 0 0 0

1750 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 210
// The CS_default entry does not refer to a particular coordinate system,
// but rather to the value stored in default_coordinate_system, which in
// turn is loaded from the config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 156
// CS_invalid is not a coordinate system at all.  It can be used in user-
// input processing code to indicate a contradictory coordinate system
// request.
5 0 0

1751 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 1431 0 0 0 0 0 0 0 0 0 0

1752 26 BoundingHexahedron const * 0 8576 26 BoundingHexahedron const * 26 BoundingHexahedron const * 0 0 1753 0 0 0 0 0 0 0 0 0 0

1753 24 BoundingHexahedron const 0 8832 24 BoundingHexahedron const 24 BoundingHexahedron const 0 0 1431 0 0 0 0 0 0 0 0 0 0

1754 14 BoundingLine * 0 8576 14 BoundingLine * 14 BoundingLine * 0 0 1432 0 0 0 0 0 0 0 0 0 0

1755 20 BoundingLine const * 0 8576 20 BoundingLine const * 20 BoundingLine const * 0 0 1756 0 0 0 0 0 0 0 0 0 0

1756 18 BoundingLine const 0 8832 18 BoundingLine const 18 BoundingLine const 0 0 1432 0 0 0 0 0 0 0 0 0 0

1757 15 BoundingPlane * 0 8576 15 BoundingPlane * 15 BoundingPlane * 0 0 1433 0 0 0 0 0 0 0 0 0 0

1758 14 LPlane const * 0 8576 14 LPlane const * 14 LPlane const * 0 0 1759 0 0 0 0 0 0 0 0 0 0

1759 12 LPlane const 0 8832 12 LPlane const 12 LPlane const 0 0 1418 0 0 0 0 0 0 0 0 0 0

1760 21 BoundingPlane const * 0 8576 21 BoundingPlane const * 21 BoundingPlane const * 0 0 1761 0 0 0 0 0 0 0 0 0 0

1761 19 BoundingPlane const 0 8832 19 BoundingPlane const 19 BoundingPlane const 0 0 1433 0 0 0 0 0 0 0 0 0 0

1762 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1434 0 0 0 0 0 0 0 0 0 0

1763 22 BoundingSphere const * 0 8576 22 BoundingSphere const * 22 BoundingSphere const * 0 0 1764 0 0 0 0 0 0 0 0 0 0

1764 20 BoundingSphere const 0 8832 20 BoundingSphere const 20 BoundingSphere const 0 0 1434 0 0 0 0 0 0 0 0 0 0

1765 28 IntersectionBoundingVolume * 0 8576 28 IntersectionBoundingVolume * 28 IntersectionBoundingVolume * 0 0 1435 0 0 0 0 0 0 0 0 0 0

1766 34 IntersectionBoundingVolume const * 0 8576 34 IntersectionBoundingVolume const * 34 IntersectionBoundingVolume const * 0 0 1767 0 0 0 0 0 0 0 0 0 0

1767 32 IntersectionBoundingVolume const 0 8832 32 IntersectionBoundingVolume const 32 IntersectionBoundingVolume const 0 0 1435 0 0 0 0 0 0 0 0 0 0

1768 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1769 10 Mersenne * 0 8576 10 Mersenne * 10 Mersenne * 0 0 1438 0 0 0 0 0 0 0 0 0 0

1770 20 OmniBoundingVolume * 0 8576 20 OmniBoundingVolume * 20 OmniBoundingVolume * 0 0 1440 0 0 0 0 0 0 0 0 0 0

1771 21 UnionBoundingVolume * 0 8576 21 UnionBoundingVolume * 21 UnionBoundingVolume * 0 0 1441 0 0 0 0 0 0 0 0 0 0

1772 27 UnionBoundingVolume const * 0 8576 27 UnionBoundingVolume const * 27 UnionBoundingVolume const * 0 0 1773 0 0 0 0 0 0 0 0 0 0

1773 25 UnionBoundingVolume const 0 8832 25 UnionBoundingVolume const 25 UnionBoundingVolume const 0 0 1441 0 0 0 0 0 0 0 0 0 0

1774 18 Randomizer const * 0 8576 18 Randomizer const * 18 Randomizer const * 0 0 1775 0 0 0 0 0 0 0 0 0 0

1775 16 Randomizer const 0 8832 16 Randomizer const 16 Randomizer const 0 0 1442 0 0 0 0 0 0 0 0 0 0

1776 12 Randomizer * 0 8576 12 Randomizer * 12 Randomizer * 0 0 1442 0 0 0 0 0 0 0 0 0 0

1777 13 PerlinNoise * 0 8576 13 PerlinNoise * 13 PerlinNoise * 0 0 1443 0 0 0 0 0 0 0 0 0 0

1778 14 PerlinNoise2 * 0 8576 14 PerlinNoise2 * 14 PerlinNoise2 * 0 0 1444 0 0 0 0 0 0 0 0 0 0

1779 20 PerlinNoise2 const * 0 8576 20 PerlinNoise2 const * 20 PerlinNoise2 const * 0 0 1780 0 0 0 0 0 0 0 0 0 0

1780 18 PerlinNoise2 const 0 8832 18 PerlinNoise2 const 18 PerlinNoise2 const 0 0 1444 0 0 0 0 0 0 0 0 0 0

1781 14 PerlinNoise3 * 0 8576 14 PerlinNoise3 * 14 PerlinNoise3 * 0 0 1445 0 0 0 0 0 0 0 0 0 0

1782 20 PerlinNoise3 const * 0 8576 20 PerlinNoise3 const * 20 PerlinNoise3 const * 0 0 1783 0 0 0 0 0 0 0 0 0 0

1783 18 PerlinNoise3 const 0 8832 18 PerlinNoise3 const 18 PerlinNoise3 const 0 0 1445 0 0 0 0 0 0 0 0 0 0

1784 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 1502 0 0 0 0 0 0 0 0 0 0

1785 27 StackedPerlinNoise2 const * 0 8576 27 StackedPerlinNoise2 const * 27 StackedPerlinNoise2 const * 0 0 1786 0 0 0 0 0 0 0 0 0 0

1786 25 StackedPerlinNoise2 const 0 8832 25 StackedPerlinNoise2 const 25 StackedPerlinNoise2 const 0 0 1502 0 0 0 0 0 0 0 0 0 0

1787 21 StackedPerlinNoise3 * 0 8576 21 StackedPerlinNoise3 * 21 StackedPerlinNoise3 * 0 0 1503 0 0 0 0 0 0 0 0 0 0

1788 27 StackedPerlinNoise3 const * 0 8576 27 StackedPerlinNoise3 const * 27 StackedPerlinNoise3 const * 0 0 1789 0 0 0 0 0 0 0 0 0 0

1789 25 StackedPerlinNoise3 const 0 8832 25 StackedPerlinNoise3 const 25 StackedPerlinNoise3 const 0 0 1503 0 0 0 0 0 0 0 0 0 0

1790 14 Triangulator * 0 8576 14 Triangulator * 14 Triangulator * 0 0 1504 0 0 0 0 0 0 0 0 0 0

1791 20 Triangulator const * 0 8576 20 Triangulator const * 20 Triangulator const * 0 0 1792 0 0 0 0 0 0 0 0 0 0

1792 18 Triangulator const 0 8832 18 Triangulator const 18 Triangulator const 0 0 1504 0 0 0 0 0 0 0 0 0 0

1793 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 1505 0 0 0 0 0 0 0 0 0 0

1794 15 Triangulator3 * 0 8576 15 Triangulator3 * 15 Triangulator3 * 0 0 1507 0 0 0 0 0 0 0 0 0 0

1795 21 Triangulator3 const * 0 8576 21 Triangulator3 const * 21 Triangulator3 const * 0 0 1796 0 0 0 0 0 0 0 0 0 0

1796 19 Triangulator3 const 0 8832 19 Triangulator3 const 19 Triangulator3 const 0 0 1507 0 0 0 0 0 0 0 0 0 0

1797 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 1519 0 0 0 0 0 0 0 0 0 0

1798 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1540 0 0 0 0 0 0 0 0 0 0

1799 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 1800 0 0 0 0 0 0 0 0 0 0

1800 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1801 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1802 0 0 0 0 0 0 0 0 0 0

1802 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

0
9
1803 6 points 0 66 0 1203 0 0 0 0 1199 19 BoundingBox::points 0

1804 6 planes 0 66 0 1204 0 0 0 0 1201 19 BoundingBox::planes 0

1805 6 points 0 66 0 1229 0 0 0 0 1225 26 BoundingHexahedron::points 0

1806 6 planes 0 66 0 1230 0 0 0 0 1227 26 BoundingHexahedron::planes 0

1807 10 components 0 66 0 1264 0 0 0 0 1262 38 IntersectionBoundingVolume::components 0

1808 10 components 0 66 0 1283 0 0 0 0 1281 31 UnionBoundingVolume::components 0

1809 8 vertices 0 66 0 1331 0 0 0 0 1329 22 Triangulator::vertices 0

1810 8 vertices 0 66 0 1350 0 0 0 0 1346 23 Triangulator3::vertices 0

1811 5 plane 0 2 0 1349 0 0 0 0 0 20 Triangulator3::plane 0

8
1812 10 get_points 0 1199 1200 23 BoundingBox::get_points 0

1813 10 get_planes 0 1201 1202 23 BoundingBox::get_planes 0

1814 10 get_points 0 1225 1226 30 BoundingHexahedron::get_points 0

1815 10 get_planes 0 1227 1228 30 BoundingHexahedron::get_planes 0

1816 14 get_components 0 1262 1263 42 IntersectionBoundingVolume::get_components 0

1817 14 get_components 0 1281 1282 35 UnionBoundingVolume::get_components 0

1818 12 get_vertices 0 1329 1330 26 Triangulator::get_vertices 0

1819 12 get_vertices 0 1346 1347 27 Triangulator3::get_vertices 0

