1508351798
3 2
10 libpandaai 4 s1eG 10 panda3d.ai 
52
54 12 ~AIBehaviors 0 4 106 25 AIBehaviors::~AIBehaviors 0 0 0
32
AIBehaviors::~AIBehaviors(void);

55 4 seek 0 4 106 17 AIBehaviors::seek 0 2 2 3 219
/**
 * This function activates seek and makes an object of the Seek class.  This
 * is the function we want the user to call for seek to be done.  This
 * function is overloaded to accept a NodePath or an LVecBase3.
 */
128
void AIBehaviors::seek(NodePath target_object, float seek_wt = 1.0);
void AIBehaviors::seek(LVecBase3 pos, float seek_wt = 1.0);

56 4 flee 0 4 106 17 AIBehaviors::flee 0 2 4 5 159
/**
 * This function activates flee_activate and creates an object of the Flee
 * class.  This function is overloaded to accept a NodePath or an LVecBase3.
 */
248
void AIBehaviors::flee(NodePath target_object, double panic_distance = 10.0, double relax_distance = 10.0, float flee_wt = 1.0);
void AIBehaviors::flee(LVecBase3 pos, double panic_distance = 10.0, double relax_distance = 10.0, float flee_wt = 1.0);

57 6 pursue 0 4 106 19 AIBehaviors::pursue 0 1 6 115
/**
 * This function activates pursue.  This is the function we want the user to
 * call for pursue to be done.
 */
72
void AIBehaviors::pursue(NodePath target_object, float pursue_wt = 1.0);

58 5 evade 0 4 106 18 AIBehaviors::evade 0 1 7 50
/**
 * This function activates evade_activate.
 */
130
void AIBehaviors::evade(NodePath target_object, double panic_distance = 10.0, double relax_distance = 10.0, float evade_wt = 1.0);

59 7 arrival 0 4 106 20 AIBehaviors::arrival 0 1 8 117
/**
 * This function activates arrival.  This is the function we want the user to
 * call for arrival to be done.
 */
50
void AIBehaviors::arrival(double distance = 10.0);

60 5 flock 0 4 106 18 AIBehaviors::flock 0 1 9 113
/**
 * This function activates flock.  This is the function we want the user to
 * call for flock to be done.
 */
40
void AIBehaviors::flock(float flock_wt);

61 6 wander 0 4 106 19 AIBehaviors::wander 0 1 10 114
/**
 * This function activates wander.  This is the function we want the user to
 * call for flock to be done.
 */
112
void AIBehaviors::wander(double wander_radius = 5.0, int flag = 0, double aoe = 0.0, float wander_weight = 1.0);

62 18 obstacle_avoidance 0 4 106 31 AIBehaviors::obstacle_avoidance 0 1 11 169
/**
 * This function activates obstacle avoidance for a given character.  This is
 * the function we want the user to call for obstacle avoidance to be
 * performed.
 */
64
void AIBehaviors::obstacle_avoidance(float feeler_length = 1.0);

63 11 path_follow 0 4 106 24 AIBehaviors::path_follow 0 1 12 120
/**
 * This function activates path following.  This is the function we want the
 * user to call for path following.
 */
47
void AIBehaviors::path_follow(float follow_wt);

64 11 add_to_path 0 4 106 24 AIBehaviors::add_to_path 0 1 13 62
/**
 * This function adds positions to the path to follow.
 */
45
void AIBehaviors::add_to_path(LVecBase3 pos);

65 12 start_follow 0 4 106 25 AIBehaviors::start_follow 0 1 14 0
60
void AIBehaviors::start_follow(std::string type = "normal");

66 14 init_path_find 0 4 106 27 AIBehaviors::init_path_find 0 1 15 165
// should have different function names.

/**
 * This function activates path finding in the character.  This function
 * accepts the meshdata in .csv format.
 *
 */
63
void AIBehaviors::init_path_find(char const *navmesh_filename);

67 12 path_find_to 0 4 106 25 AIBehaviors::path_find_to 0 2 16 17 452
/**
 * This function checks for the source and target in the navigation mesh for
 * its availability and then finds the best path via the A* algorithm Then it
 * calls the path follower to make the object follow the path.
 */

/**
 * This function checks for the source and target in the navigation mesh for
 * its availability and then finds the best path via the A* algorithm Then it
 * calls the path follower to make the object follow the path.
 */
153
void AIBehaviors::path_find_to(LVecBase3 pos, std::string type = "normal");
void AIBehaviors::path_find_to(NodePath target, std::string type = "normal");

68 19 add_static_obstacle 0 4 106 32 AIBehaviors::add_static_obstacle 0 1 18 262
/**
 * This function allows the user to dynamically add obstacles to the game
 * environment.  The function will update the nodes within the bounding volume
 * of the obstacle as non-traversable.  Hence will not be considered by the
 * pathfinding algorithm.
 */
57
void AIBehaviors::add_static_obstacle(NodePath obstacle);

69 20 add_dynamic_obstacle 0 4 106 33 AIBehaviors::add_dynamic_obstacle 0 1 19 98
/**
 * This function starts the pathfinding obstacle navigation for the passed in
 * obstacle.
 */
58
void AIBehaviors::add_dynamic_obstacle(NodePath obstacle);

70 9 remove_ai 0 4 106 22 AIBehaviors::remove_ai 0 1 20 59
/**
 * This function removes individual or all the AIs.
 */
49
void AIBehaviors::remove_ai(std::string ai_type);

71 8 pause_ai 0 4 106 21 AIBehaviors::pause_ai 0 1 21 58
/**
 * This function pauses individual or all the AIs.
 */
48
void AIBehaviors::pause_ai(std::string ai_type);

72 9 resume_ai 0 4 106 22 AIBehaviors::resume_ai 0 1 22 58
/**
 * This function resumes individual or all the AIs
 */
49
void AIBehaviors::resume_ai(std::string ai_type);

73 15 behavior_status 0 4 106 28 AIBehaviors::behavior_status 0 1 23 149
/**
 * This function returns the status of an AI Type whether it is active, paused
 * or disabled.  It returns -1 if an invalid string is passed.
 */
62
std::string AIBehaviors::behavior_status(std::string ai_type);

74 11 AIBehaviors 0 4 106 24 AIBehaviors::AIBehaviors 0 1 1 0
63
inline AIBehaviors::AIBehaviors(AIBehaviors const &) = default;

75 8 get_mass 0 4 107 21 AICharacter::get_mass 0 1 26 0
35
double AICharacter::get_mass(void);

76 8 set_mass 0 4 107 21 AICharacter::set_mass 0 1 27 0
37
void AICharacter::set_mass(double m);

77 12 get_velocity 0 4 107 25 AICharacter::get_velocity 0 1 28 0
42
LVecBase3 AICharacter::get_velocity(void);

78 13 get_max_force 0 4 107 26 AICharacter::get_max_force 0 1 29 0
40
double AICharacter::get_max_force(void);

79 13 set_max_force 0 4 107 26 AICharacter::set_max_force 0 1 30 0
50
void AICharacter::set_max_force(double max_force);

80 13 get_node_path 0 4 107 26 AICharacter::get_node_path 0 1 31 0
42
NodePath AICharacter::get_node_path(void);

81 13 set_node_path 0 4 107 26 AICharacter::set_node_path 0 1 32 0
45
void AICharacter::set_node_path(NodePath np);

82 16 get_ai_behaviors 0 4 107 29 AICharacter::get_ai_behaviors 0 1 33 0
49
AIBehaviors *AICharacter::get_ai_behaviors(void);

83 12 set_pf_guide 0 4 107 25 AICharacter::set_pf_guide 0 1 34 74
// This function is used to enable or disable the guides for path finding.
46
void AICharacter::set_pf_guide(bool pf_guide);

84 11 AICharacter 0 4 107 24 AICharacter::AICharacter 0 2 24 25 0
182
AICharacter::AICharacter(std::string model_name, NodePath model_np, double mass, double movt_force, double max_force);
inline AICharacter::AICharacter(AICharacter const &) = default;

85 12 ~AICharacter 0 4 107 25 AICharacter::~AICharacter 0 0 0
32
AICharacter::~AICharacter(void);

86 6 AINode 0 4 108 14 AINode::AINode 0 1 35 0
81
AINode::AINode(int grid_x, int grid_y, LVecBase3 pos, float w, float l, float h);

87 7 ~AINode 0 4 108 15 AINode::~AINode 0 0 0
22
AINode::~AINode(void);

88 8 contains 0 4 108 16 AINode::contains 0 1 36 113
/**
 * This is a handy function which returns true if the passed position is
 * within the node's dimensions.
 */
40
bool AINode::contains(float x, float y);

89 5 Flock 0 4 109 12 Flock::Flock 0 2 37 38 0
216
Flock::Flock(unsigned int flock_id, double vcone_angle, double vcone_radius, unsigned int separation_wt = 2, unsigned int cohesion_wt = 4, unsigned int alignment_wt = 1);
inline Flock::Flock(Flock const &) = default;

90 6 ~Flock 0 4 109 13 Flock::~Flock 0 0 0
20
Flock::~Flock(void);

91 11 add_ai_char 0 4 109 18 Flock::add_ai_char 0 1 39 113
// Function to add the ai characters to _ai_char_list.

/**
 * This function adds AI characters to the flock.
 */
46
void Flock::add_ai_char(AICharacter *ai_char);

92 6 get_id 0 4 109 13 Flock::get_id 0 1 40 50
// Function to access the private member flock_id.
33
unsigned int Flock::get_id(void);

93 7 AIWorld 0 4 110 16 AIWorld::AIWorld 0 2 41 42 0
86
AIWorld::AIWorld(NodePath render);
inline AIWorld::AIWorld(AIWorld const &) = default;

94 8 ~AIWorld 0 4 110 17 AIWorld::~AIWorld 0 0 0
24
AIWorld::~AIWorld(void);

95 11 add_ai_char 0 4 110 20 AIWorld::add_ai_char 0 1 43 0
46
void AIWorld::add_ai_char(AICharacter *ai_ch);

96 14 remove_ai_char 0 4 110 23 AIWorld::remove_ai_char 0 1 44 0
47
void AIWorld::remove_ai_char(std::string name);

97 9 add_flock 0 4 110 18 AIWorld::add_flock 0 1 45 163
/**
 * This function adds all the AI characters in the Flock object to the
 * AICharPool.  This function allows adding the AI characetrs as part of a
 * flock.
 */
38
void AIWorld::add_flock(Flock *flock);

98 9 flock_off 0 4 110 18 AIWorld::flock_off 0 1 46 103
/**
 * This function turns off the flock behavior temporarily.  Similar to pausing
 * the behavior.
 */
47
void AIWorld::flock_off(unsigned int flock_id);

99 8 flock_on 0 4 110 17 AIWorld::flock_on 0 1 47 53
/**
 * This function turns on the flock behavior.
 */
46
void AIWorld::flock_on(unsigned int flock_id);

100 12 remove_flock 0 4 110 21 AIWorld::remove_flock 0 1 48 63
/**
 * This function removes the flock behavior completely.
 */
50
void AIWorld::remove_flock(unsigned int flock_id);

101 9 get_flock 0 4 110 18 AIWorld::get_flock 0 1 49 74
/**
 * This function returns a handle to the Flock whose id is passed.
 */
48
Flock AIWorld::get_flock(unsigned int flock_id);

102 12 add_obstacle 0 4 110 21 AIWorld::add_obstacle 0 1 50 111
/**
 * This function adds the nodepath as an obstacle that is needed by the
 * obstacle avoidance behavior.
 */
46
void AIWorld::add_obstacle(NodePath obstacle);

103 15 remove_obstacle 0 4 110 24 AIWorld::remove_obstacle 0 1 51 123
/**
 * This function removes the nodepath from the obstacles list that is needed
 * by the obstacle avoidance behavior.
 */
49
void AIWorld::remove_obstacle(NodePath obstacle);

104 10 print_list 0 4 110 19 AIWorld::print_list 0 1 52 0
31
void AIWorld::print_list(void);

105 6 update 0 4 110 15 AIWorld::update 0 1 53 130
/**
 * The AIWorld update function calls the update function of all the AI
 * characters which have been added to the AIWorld.
 */
27
void AIWorld::update(void);

53
1 0 0 7 22 113 54 0 0 1 6 param0 0 111  
2 0 0 4 3 118 0 0 0 3 4 this 3 113  3 pos 1 114  7 seek_wt 1 117  
3 0 0 4 3 118 0 0 219 /**
 * This function activates seek and makes an object of the Seek class.  This
 * is the function we want the user to call for seek to be done.  This
 * function is overloaded to accept a NodePath or an LVecBase3.
 */ 3 4 this 3 113  13 target_object 1 119  7 seek_wt 1 117  
4 0 0 4 4 118 0 0 0 5 4 this 3 113  3 pos 1 114  14 panic_distance 1 121  14 relax_distance 1 121  7 flee_wt 1 117  
5 0 0 4 4 118 0 0 159 /**
 * This function activates flee_activate and creates an object of the Flee
 * class.  This function is overloaded to accept a NodePath or an LVecBase3.
 */ 5 4 this 3 113  13 target_object 1 119  14 panic_distance 1 121  14 relax_distance 1 121  7 flee_wt 1 117  
6 0 0 4 5 118 0 0 115 /**
 * This function activates pursue.  This is the function we want the user to
 * call for pursue to be done.
 */ 3 4 this 3 113  13 target_object 1 119  9 pursue_wt 1 117  
7 0 0 4 6 118 0 0 50 /**
 * This function activates evade_activate.
 */ 5 4 this 3 113  13 target_object 1 119  14 panic_distance 1 121  14 relax_distance 1 121  8 evade_wt 1 117  
8 0 0 4 7 118 0 0 117 /**
 * This function activates arrival.  This is the function we want the user to
 * call for arrival to be done.
 */ 2 4 this 3 113  8 distance 1 121  
9 0 0 4 8 118 0 0 113 /**
 * This function activates flock.  This is the function we want the user to
 * call for flock to be done.
 */ 2 4 this 3 113  8 flock_wt 1 117  
10 0 0 4 9 118 0 0 114 /**
 * This function activates wander.  This is the function we want the user to
 * call for flock to be done.
 */ 5 4 this 3 113  13 wander_radius 1 121  4 flag 1 122  3 aoe 1 121  13 wander_weight 1 117  
11 0 0 4 10 118 0 0 169 /**
 * This function activates obstacle avoidance for a given character.  This is
 * the function we want the user to call for obstacle avoidance to be
 * performed.
 */ 2 4 this 3 113  13 feeler_length 1 117  
12 0 0 4 11 118 0 0 120 /**
 * This function activates path following.  This is the function we want the
 * user to call for path following.
 */ 2 4 this 3 113  9 follow_wt 1 117  
13 0 0 4 12 118 0 0 62 /**
 * This function adds positions to the path to follow.
 */ 2 4 this 3 113  3 pos 1 114  
14 0 0 4 13 118 0 0 0 2 4 this 3 113  4 type 1 123  
15 0 0 4 14 118 0 0 123 /**
 * This function activates path finding in the character.  This function
 * accepts the meshdata in .csv format.
 *
 */ 2 4 this 3 113  16 navmesh_filename 1 123  
16 0 0 4 15 118 0 0 225 /**
 * This function checks for the source and target in the navigation mesh for
 * its availability and then finds the best path via the A* algorithm Then it
 * calls the path follower to make the object follow the path.
 */ 3 4 this 3 113  3 pos 1 114  4 type 1 123  
17 0 0 4 15 118 0 0 225 /**
 * This function checks for the source and target in the navigation mesh for
 * its availability and then finds the best path via the A* algorithm Then it
 * calls the path follower to make the object follow the path.
 */ 3 4 this 3 113  6 target 1 119  4 type 1 123  
18 0 0 4 16 118 0 0 262 /**
 * This function allows the user to dynamically add obstacles to the game
 * environment.  The function will update the nodes within the bounding volume
 * of the obstacle as non-traversable.  Hence will not be considered by the
 * pathfinding algorithm.
 */ 2 4 this 3 113  8 obstacle 1 119  
19 0 0 4 17 118 0 0 98 /**
 * This function starts the pathfinding obstacle navigation for the passed in
 * obstacle.
 */ 2 4 this 3 113  8 obstacle 1 119  
20 0 0 4 18 118 0 0 59 /**
 * This function removes individual or all the AIs.
 */ 2 4 this 3 113  7 ai_type 1 123  
21 0 0 4 19 118 0 0 58 /**
 * This function pauses individual or all the AIs.
 */ 2 4 this 3 113  7 ai_type 1 123  
22 0 0 4 20 118 0 0 58 /**
 * This function resumes individual or all the AIs
 */ 2 4 this 3 113  7 ai_type 1 123  
23 0 0 6 21 123 0 0 149 /**
 * This function returns the status of an AI Type whether it is active, paused
 * or disabled.  It returns -1 if an invalid string is passed.
 */ 2 4 this 3 113  7 ai_type 1 123  
24 0 0 7 33 126 85 0 0 1 6 param0 0 124  
25 0 0 7 33 126 85 0 0 5 10 model_name 1 123  8 model_np 1 119  4 mass 1 121  10 movt_force 1 121  9 max_force 1 121  
26 0 0 6 24 121 0 0 0 1 4 this 3 126  
27 0 0 4 25 118 0 0 0 2 4 this 3 126  1 m 1 121  
28 0 0 7 26 114 0 0 0 1 4 this 3 126  
29 0 0 6 27 121 0 0 0 1 4 this 3 126  
30 0 0 4 28 118 0 0 0 2 4 this 3 126  9 max_force 1 121  
31 0 0 7 29 119 0 0 0 1 4 this 3 126  
32 0 0 4 30 118 0 0 0 2 4 this 3 126  2 np 1 119  
33 0 0 6 31 113 0 0 0 1 4 this 3 126  
34 0 0 4 32 118 0 0 74 // This function is used to enable or disable the guides for path finding. 2 4 this 3 126  8 pf_guide 1 127  
35 0 0 7 36 128 87 0 0 6 6 grid_x 1 122  6 grid_y 1 122  3 pos 1 114  1 w 1 117  1 l 1 117  1 h 1 117  
36 0 0 6 38 127 0 0 113 /**
 * This is a handy function which returns true if the passed position is
 * within the node's dimensions.
 */ 3 4 this 3 128  1 x 1 117  1 y 1 117  
37 0 0 7 40 131 90 0 0 1 6 param0 0 129  
38 0 0 7 40 131 90 0 0 6 8 flock_id 1 132  11 vcone_angle 1 121  12 vcone_radius 1 121  13 separation_wt 1 132  11 cohesion_wt 1 132  12 alignment_wt 1 132  
39 0 0 4 42 118 0 0 57 /**
 * This function adds AI characters to the flock.
 */ 2 4 this 3 131  7 ai_char 1 126  
40 0 0 6 43 132 0 0 50 // Function to access the private member flock_id. 1 4 this 3 131  
41 0 0 7 45 135 94 0 0 1 6 param0 0 133  
42 0 0 7 45 135 94 0 0 1 6 render 1 119  
43 0 0 4 47 118 0 0 0 2 4 this 3 135  5 ai_ch 1 126  
44 0 0 4 48 118 0 0 0 2 4 this 3 135  4 name 1 123  
45 0 0 4 49 118 0 0 163 /**
 * This function adds all the AI characters in the Flock object to the
 * AICharPool.  This function allows adding the AI characetrs as part of a
 * flock.
 */ 2 4 this 3 135  5 flock 1 131  
46 0 0 4 50 118 0 0 103 /**
 * This function turns off the flock behavior temporarily.  Similar to pausing
 * the behavior.
 */ 2 4 this 3 135  8 flock_id 1 132  
47 0 0 4 51 118 0 0 53 /**
 * This function turns on the flock behavior.
 */ 2 4 this 3 135  8 flock_id 1 132  
48 0 0 4 52 118 0 0 63 /**
 * This function removes the flock behavior completely.
 */ 2 4 this 3 135  8 flock_id 1 132  
49 0 0 7 53 131 90 0 74 /**
 * This function returns a handle to the Flock whose id is passed.
 */ 2 4 this 3 135  8 flock_id 1 132  
50 0 0 4 54 118 0 0 111 /**
 * This function adds the nodepath as an obstacle that is needed by the
 * obstacle avoidance behavior.
 */ 2 4 this 3 135  8 obstacle 1 119  
51 0 0 4 55 118 0 0 123 /**
 * This function removes the nodepath from the obstacles list that is needed
 * by the obstacle avoidance behavior.
 */ 2 4 this 3 135  8 obstacle 1 119  
52 0 0 4 56 118 0 0 0 1 4 this 3 135  
53 0 0 4 57 118 0 0 130 /**
 * The AIWorld update function calls the update function of all the AI
 * characters which have been added to the AIWorld.
 */ 1 4 this 3 135  
30
106 11 AIBehaviors 0 26625 11 AIBehaviors 11 AIBehaviors 0 0 0 1 74 54 0 19 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 0 0 0 0 0 618
/**
 * This class implements all the steering behaviors of the AI framework, such
 * as seek, flee, pursue, evade, wander and flock.  Each steering behavior has
 * a weight which is used when more than one type of steering behavior is
 * acting on the same ai character.  The weight decides the contribution of
 * each type of steering behavior.  The AICharacter class has a handle to an
 * object of this class and this allows to invoke the steering behaviors via
 * the AICharacter.  This class also provides functionality such as pausing,
 * resuming and removing the AI behaviors of an AI character at anytime.
 */

107 11 AICharacter 0 26625 11 AICharacter 11 AICharacter 0 0 0 1 84 85 0 9 75 76 77 78 79 80 81 82 83 0 0 0 0 0 0

108 6 AINode 0 26625 6 AINode 6 AINode 0 0 0 1 86 87 0 1 88 0 0 0 0 0 365
/**
 * This class is used to assign the nodes on the mesh.  It holds all the data
 * necessary to compute A* algorithm.  It also maintains a lot of vital
 * information such as the neighbor nodes of each node and also its position
 * on the mesh.  Note: The Mesh Generator which is a standalone tool makes use
 * of this class to generate the nodes on the mesh.
 */

109 5 Flock 0 26625 5 Flock 5 Flock 0 0 0 1 89 90 0 2 91 92 0 0 0 0 0 114
/**
 * This class is used to define the flock attributes and the AI characters
 * which are part of the flock.
 */

110 7 AIWorld 0 26625 7 AIWorld 7 AIWorld 0 0 0 1 93 94 0 11 95 96 97 98 99 100 101 102 103 104 105 0 0 0 0 0 329
/**
 * A class that implements the virtual AI world which keeps track of the AI
 * characters active at any given time.  It contains a linked list of AI
 * characters, obstactle data and unique name for each character.  It also
 * updates each characters state.  The AI characters can also be added to the
 * world as flocks.
 */

111 19 AIBehaviors const * 0 8576 19 AIBehaviors const * 19 AIBehaviors const * 0 0 112 0 0 0 0 0 0 0 0 0 0

112 17 AIBehaviors const 0 8832 17 AIBehaviors const 17 AIBehaviors const 0 0 106 0 0 0 0 0 0 0 0 0 0

113 13 AIBehaviors * 0 8576 13 AIBehaviors * 13 AIBehaviors * 0 0 106 0 0 0 0 0 0 0 0 0 0

114 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 115 0 0 0 0 0 0 0 0 0 0

115 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 116 0 0 0 0 0 0 0 0 0 0

116 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

117 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

118 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

119 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 120 0 0 0 0 0 0 0 0 0 0

120 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

121 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

122 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

123 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

124 19 AICharacter const * 0 8576 19 AICharacter const * 19 AICharacter const * 0 0 125 0 0 0 0 0 0 0 0 0 0

125 17 AICharacter const 0 8832 17 AICharacter const 17 AICharacter const 0 0 107 0 0 0 0 0 0 0 0 0 0

126 13 AICharacter * 0 8576 13 AICharacter * 13 AICharacter * 0 0 107 0 0 0 0 0 0 0 0 0 0

127 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

128 8 AINode * 0 8576 8 AINode * 8 AINode * 0 0 108 0 0 0 0 0 0 0 0 0 0

129 13 Flock const * 0 8576 13 Flock const * 13 Flock const * 0 0 130 0 0 0 0 0 0 0 0 0 0

130 11 Flock const 0 8832 11 Flock const 11 Flock const 0 0 109 0 0 0 0 0 0 0 0 0 0

131 7 Flock * 0 8576 7 Flock * 7 Flock * 0 0 109 0 0 0 0 0 0 0 0 0 0

132 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

133 15 AIWorld const * 0 8576 15 AIWorld const * 15 AIWorld const * 0 0 134 0 0 0 0 0 0 0 0 0 0

134 13 AIWorld const 0 8832 13 AIWorld const 13 AIWorld const 0 0 110 0 0 0 0 0 0 0 0 0 0

135 9 AIWorld * 0 8576 9 AIWorld * 9 AIWorld * 0 0 110 0 0 0 0 0 0 0 0 0 0

0
0
0
