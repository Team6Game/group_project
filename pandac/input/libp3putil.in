1508344705
3 2
10 libp3putil 4 xqRv 12 panda3d.core 
898
916 5 clear 0 4 1816 56 PointerToBase< ReferenceCountedVector< ushort > >::clear 0 1 12 0
75
inline void PointerToBase< ReferenceCountedVector< ushort > >::clear(void);

917 6 output 0 4 1816 57 PointerToBase< ReferenceCountedVector< ushort > >::output 0 1 13 0
83
void PointerToBase< ReferenceCountedVector< ushort > >::output(ostream &out) const;

918 19 ~PointerToArrayBase 0 4 1815 49 PointerToArrayBase< ushort >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< ushort >::~PointerToArrayBase(void);

919 19 ConstPointerToArray 0 4 1814 50 ConstPointerToArray< ushort >::ConstPointerToArray 0 2 1 2 0
198
inline ConstPointerToArray< ushort >::ConstPointerToArray(PointerToArray< ushort > const &copy);
inline ConstPointerToArray< ushort >::ConstPointerToArray(ConstPointerToArray< ushort > const &copy);

920 4 size 0 4 1814 35 ConstPointerToArray< ushort >::size 0 1 3 0
78
inline unsigned long long int ConstPointerToArray< ushort >::size(void) const;

921 11 get_element 0 4 1814 42 ConstPointerToArray< ushort >::get_element 0 1 4 0
96
inline ushort const &ConstPointerToArray< ushort >::get_element(unsigned long long int n) const;

922 11 __getitem__ 0 4 1814 42 ConstPointerToArray< ushort >::__getitem__ 0 1 5 0
89
ushort const &ConstPointerToArray< ushort >::__getitem__(unsigned long long int n) const;

923 8 get_data 0 4 1814 39 ConstPointerToArray< ushort >::get_data 0 1 6 0
62
PyObject *ConstPointerToArray< ushort >::get_data(void) const;

924 11 get_subdata 0 4 1814 42 ConstPointerToArray< ushort >::get_subdata 0 1 7 0
115
PyObject *ConstPointerToArray< ushort >::get_subdata(unsigned long long int n, unsigned long long int count) const;

925 13 get_ref_count 0 4 1814 44 ConstPointerToArray< ushort >::get_ref_count 0 1 8 0
68
inline int ConstPointerToArray< ushort >::get_ref_count(void) const;

926 18 get_node_ref_count 0 4 1814 49 ConstPointerToArray< ushort >::get_node_ref_count 0 1 9 0
73
inline int ConstPointerToArray< ushort >::get_node_ref_count(void) const;

927 13 __getbuffer__ 0 4 1814 44 ConstPointerToArray< ushort >::__getbuffer__ 0 1 10 0
99
int ConstPointerToArray< ushort >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

928 17 __releasebuffer__ 0 4 1814 48 ConstPointerToArray< ushort >::__releasebuffer__ 0 1 11 0
93
void ConstPointerToArray< ushort >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

929 20 ~ConstPointerToArray 0 4 1814 51 ConstPointerToArray< ushort >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< ushort >::~ConstPointerToArray(void);

930 14 PointerToArray 0 4 1818 40 PointerToArray< ushort >::PointerToArray 0 3 14 15 16 0
279
inline PointerToArray< ushort >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((ushort const *)(0))));
inline PointerToArray< ushort >::PointerToArray(PointerToArray< ushort > const &copy);
PointerToArray< ushort >::PointerToArray(PyObject *self, PyObject *source);

931 11 empty_array 0 4 1818 37 PointerToArray< ushort >::empty_array 0 1 17 0
171
static inline PointerToArray< ushort > PointerToArray< ushort >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((ushort const *)(0))));

932 4 size 0 4 1818 30 PointerToArray< ushort >::size 0 1 18 0
73
inline unsigned long long int PointerToArray< ushort >::size(void) const;

933 9 push_back 0 4 1818 35 PointerToArray< ushort >::push_back 0 1 19 0
65
inline void PointerToArray< ushort >::push_back(ushort const &x);

934 8 pop_back 0 4 1818 34 PointerToArray< ushort >::pop_back 0 1 20 0
53
inline void PointerToArray< ushort >::pop_back(void);

935 11 get_element 0 4 1818 37 PointerToArray< ushort >::get_element 0 1 21 0
91
inline ushort const &PointerToArray< ushort >::get_element(unsigned long long int n) const;

936 11 set_element 0 4 1818 37 PointerToArray< ushort >::set_element 0 1 22 0
97
inline void PointerToArray< ushort >::set_element(unsigned long long int n, ushort const &value);

937 11 __getitem__ 0 4 1818 37 PointerToArray< ushort >::__getitem__ 0 1 23 0
84
ushort const &PointerToArray< ushort >::__getitem__(unsigned long long int n) const;

938 11 __setitem__ 0 4 1818 37 PointerToArray< ushort >::__setitem__ 0 1 24 0
90
void PointerToArray< ushort >::__setitem__(unsigned long long int n, ushort const &value);

939 8 get_data 0 4 1818 34 PointerToArray< ushort >::get_data 0 1 25 0
57
PyObject *PointerToArray< ushort >::get_data(void) const;

940 8 set_data 0 4 1818 34 PointerToArray< ushort >::set_data 0 1 26 0
56
void PointerToArray< ushort >::set_data(PyObject *data);

941 11 get_subdata 0 4 1818 37 PointerToArray< ushort >::get_subdata 0 1 27 0
110
PyObject *PointerToArray< ushort >::get_subdata(unsigned long long int n, unsigned long long int count) const;

942 11 set_subdata 0 4 1818 37 PointerToArray< ushort >::set_subdata 0 1 28 0
145
inline void PointerToArray< ushort >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

943 13 get_ref_count 0 4 1818 39 PointerToArray< ushort >::get_ref_count 0 1 29 0
63
inline int PointerToArray< ushort >::get_ref_count(void) const;

944 18 get_node_ref_count 0 4 1818 44 PointerToArray< ushort >::get_node_ref_count 0 1 30 0
68
inline int PointerToArray< ushort >::get_node_ref_count(void) const;

945 13 __getbuffer__ 0 4 1818 39 PointerToArray< ushort >::__getbuffer__ 0 1 31 0
88
int PointerToArray< ushort >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

946 17 __releasebuffer__ 0 4 1818 43 PointerToArray< ushort >::__releasebuffer__ 0 1 32 0
88
void PointerToArray< ushort >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

947 15 ~PointerToArray 0 4 1818 41 PointerToArray< ushort >::~PointerToArray 0 0 0
48
PointerToArray< ushort >::~PointerToArray(void);

948 14 ~AnimInterface 0 6 1819 29 AnimInterface::~AnimInterface 0 0 10
/**
 *
 */
44
virtual AnimInterface::~AnimInterface(void);

949 4 play 0 4 1819 19 AnimInterface::play 0 2 33 34 477
/**
 * Runs the entire animation from beginning to end and stops.
 */

/**
 * Runs the animation from the frame "from" to and including the frame "to",
 * at which point the animation is stopped.  Both "from" and "to" frame
 * numbers may be outside the range (0, get_num_frames()) and the animation
 * will follow the range correctly, reporting numbers modulo get_num_frames().
 * For instance, play(0, get_num_frames() * 2) will play the animation twice
 * and then stop.
 */
95
inline void AnimInterface::play(void);
inline void AnimInterface::play(double from, double to);

950 4 loop 0 4 1819 19 AnimInterface::loop 0 2 35 36 392
/**
 * Starts the entire animation looping.  If restart is true, the animation is
 * restarted from the beginning; otherwise, it continues from the current
 * frame.
 */

/**
 * Loops the animation from the frame "from" to and including the frame "to",
 * indefinitely.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */
117
inline void AnimInterface::loop(bool restart);
inline void AnimInterface::loop(bool restart, double from, double to);

951 8 pingpong 0 4 1819 23 AnimInterface::pingpong 0 2 37 38 369
/**
 * Starts the entire animation bouncing back and forth between its first frame
 * and last frame.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */

/**
 * Loops the animation from the frame "from" to and including the frame "to",
 * and then back in the opposite direction, indefinitely.
 */
125
inline void AnimInterface::pingpong(bool restart);
inline void AnimInterface::pingpong(bool restart, double from, double to);

952 4 stop 0 4 1819 19 AnimInterface::stop 0 1 39 130
/**
 * Stops a currently playing or looping animation right where it is.  The
 * animation remains posed at the current frame.
 */
38
inline void AnimInterface::stop(void);

953 4 pose 0 4 1819 19 AnimInterface::pose 0 1 40 72
/**
 * Sets the animation to the indicated frame and holds it there.
 */
46
inline void AnimInterface::pose(double frame);

954 13 set_play_rate 0 4 1819 28 AnimInterface::set_play_rate 0 1 41 243
/**
 * Changes the rate at which the animation plays.  1.0 is the normal speed,
 * 2.0 is twice normal speed, and 0.5 is half normal speed.  0.0 is legal to
 * pause the animation, and a negative value will play the animation
 * backwards.
 */
59
inline void AnimInterface::set_play_rate(double play_rate);

955 13 get_play_rate 0 4 1819 28 AnimInterface::get_play_rate 0 1 42 79
/**
 * Returns the rate at which the animation plays.  See set_play_rate().
 */
55
inline double AnimInterface::get_play_rate(void) const;

956 14 get_frame_rate 0 4 1819 29 AnimInterface::get_frame_rate 0 1 43 234
/**
 * Returns the native frame rate of the animation.  This is the number of
 * frames per second that will elapse when the play_rate is set to 1.0.  It is
 * a fixed property of the animation and may not be adjusted by the user.
 */
56
inline double AnimInterface::get_frame_rate(void) const;

957 14 get_num_frames 0 6 1819 29 AnimInterface::get_num_frames 0 1 44 278
/**
 * Returns the number of frames in the animation.  This is a property of the
 * animation and may not be directly adjusted by the user (although it may
 * change without warning with certain kinds of animations, since this is a
 * virtual method that may be overridden).
 */
54
virtual int AnimInterface::get_num_frames(void) const;

958 9 get_frame 0 4 1819 24 AnimInterface::get_frame 0 1 45 116
/**
 * Returns the current integer frame number.  This number will be in the range
 * 0 <= f < get_num_frames().
 */
48
inline int AnimInterface::get_frame(void) const;

959 14 get_next_frame 0 4 1819 29 AnimInterface::get_next_frame 0 1 46 330
/**
 * Returns the current integer frame number + 1, constrained to the range 0 <=
 * f < get_num_frames().
 *
 * If the play mode is PM_play, this will clamp to the same value as
 * get_frame() at the end of the animation.  If the play mode is any other
 * value, this will wrap around to frame 0 at the end of the animation.
 */
53
inline int AnimInterface::get_next_frame(void) const;

960 8 get_frac 0 4 1819 23 AnimInterface::get_frac 0 1 47 314
/**
 * Returns the fractional part of the current frame.  Normally, this is in the
 * range 0.0 <= f < 1.0, but in the one special case of an animation playing
 * to its end frame and stopping, it might exactly equal 1.0.
 *
 * It will always be true that get_full_frame() + get_frac() ==
 * get_full_fframe().
 */
50
inline double AnimInterface::get_frac(void) const;

961 14 get_full_frame 0 4 1819 29 AnimInterface::get_full_frame 0 1 48 372
/**
 * Returns the current integer frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_fframe(), this return value will
 * never exceed the value passed to to_frame in the play() method.
 */
53
inline int AnimInterface::get_full_frame(void) const;

962 15 get_full_fframe 0 4 1819 30 AnimInterface::get_full_fframe 0 1 49 490
/**
 * Returns the current floating-point frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_frame(), this return value may equal
 * (to_frame + 1.0), when the animation has played to its natural end.
 * However, in this case the return value of get_full_frame() will be
 * to_frame, not (to_frame + 1).
 */
57
inline double AnimInterface::get_full_fframe(void) const;

963 10 is_playing 0 4 1819 25 AnimInterface::is_playing 0 1 50 208
/**
 * Returns true if the animation is currently playing, false if it is stopped
 * (e.g.  because stop() or pose() was called, or because it reached the end
 * of the animation after play() was called).
 */
50
inline bool AnimInterface::is_playing(void) const;

964 6 output 0 6 1819 21 AnimInterface::output 0 1 51 10
/**
 *
 */
55
virtual void AnimInterface::output(ostream &out) const;

965 14 get_class_type 0 4 1819 29 AnimInterface::get_class_type 0 1 52 0
54
static TypeHandle AnimInterface::get_class_type(void);

966 9 UpdateSeq 0 4 1824 20 UpdateSeq::UpdateSeq 0 2 53 54 132
/**
 * Creates an UpdateSeq in the given state.
 */

/**
 * Creates an UpdateSeq in the 'initial' state.
 */

/**
 *
 */

/**
 *
 */
89
constexpr UpdateSeq::UpdateSeq(void);
inline UpdateSeq::UpdateSeq(UpdateSeq const &copy);

967 7 initial 0 4 1824 18 UpdateSeq::initial 0 1 55 55
/**
 * Returns an UpdateSeq in the 'initial' state.
 */
52
static constexpr UpdateSeq UpdateSeq::initial(void);

968 3 old 0 4 1824 14 UpdateSeq::old 0 1 56 51
/**
 * Returns an UpdateSeq in the 'old' state.
 */
48
static constexpr UpdateSeq UpdateSeq::old(void);

969 5 fresh 0 4 1824 16 UpdateSeq::fresh 0 1 57 53
/**
 * Returns an UpdateSeq in the 'fresh' state.
 */
50
static constexpr UpdateSeq UpdateSeq::fresh(void);

970 10 operator = 0 4 1824 21 UpdateSeq::operator = 0 1 58 10
/**
 *
 */
63
inline UpdateSeq &UpdateSeq::operator =(UpdateSeq const &copy);

971 5 clear 0 4 1824 16 UpdateSeq::clear 0 1 59 55
/**
 * Resets the UpdateSeq to the 'initial' state.
 */
35
inline void UpdateSeq::clear(void);

972 10 is_initial 0 4 1824 21 UpdateSeq::is_initial 0 1 60 67
/**
 * Returns true if the UpdateSeq is in the 'initial' state.
 */
46
inline bool UpdateSeq::is_initial(void) const;

973 6 is_old 0 4 1824 17 UpdateSeq::is_old 0 1 61 63
/**
 * Returns true if the UpdateSeq is in the 'old' state.
 */
42
inline bool UpdateSeq::is_old(void) const;

974 8 is_fresh 0 4 1824 19 UpdateSeq::is_fresh 0 1 62 65
/**
 * Returns true if the UpdateSeq is in the 'fresh' state.
 */
44
inline bool UpdateSeq::is_fresh(void) const;

975 10 is_special 0 4 1824 21 UpdateSeq::is_special 0 1 63 105
/**
 * Returns true if the UpdateSeq is in any special states, i.e.  'initial',
 * 'old', or 'fresh'.
 */
46
inline bool UpdateSeq::is_special(void) const;

976 11 operator == 0 4 1824 22 UpdateSeq::operator == 0 1 64 0
65
inline bool UpdateSeq::operator ==(UpdateSeq const &other) const;

977 11 operator != 0 4 1824 22 UpdateSeq::operator != 0 1 65 0
65
inline bool UpdateSeq::operator !=(UpdateSeq const &other) const;

978 10 operator < 0 4 1824 21 UpdateSeq::operator < 0 1 66 0
64
inline bool UpdateSeq::operator <(UpdateSeq const &other) const;

979 11 operator <= 0 4 1824 22 UpdateSeq::operator <= 0 1 67 0
65
inline bool UpdateSeq::operator <=(UpdateSeq const &other) const;

980 10 operator > 0 4 1824 21 UpdateSeq::operator > 0 1 68 0
64
inline bool UpdateSeq::operator >(UpdateSeq const &other) const;

981 11 operator >= 0 4 1824 22 UpdateSeq::operator >= 0 1 69 0
65
inline bool UpdateSeq::operator >=(UpdateSeq const &other) const;

982 11 operator ++ 0 68 1824 22 UpdateSeq::operator ++ 0 1 70 0
46
inline UpdateSeq UpdateSeq::operator ++(void);

983 11 operator ++ 0 4 1824 22 UpdateSeq::operator ++ 0 1 71 0
46
inline UpdateSeq UpdateSeq::operator ++(int );

984 7 get_seq 0 4 1824 18 UpdateSeq::get_seq 0 1 72 107
/**
 * Returns the internal integer value associated with the UpdateSeq.  Useful
 * for debugging only.
 */
60
inline AtomicAdjust::Integer UpdateSeq::get_seq(void) const;

985 6 output 0 4 1824 17 UpdateSeq::output 0 1 73 10
/**
 *
 */
50
inline void UpdateSeq::output(ostream &out) const;

986 10 ~UpdateSeq 0 4 1824 21 UpdateSeq::~UpdateSeq 0 0 0
28
UpdateSeq::~UpdateSeq(void);

987 6 fillin 0 6 1828 21 TypedWritable::fillin 0 1 74 308
/**
 * This internal function is intended to be called by each class's
 * make_from_bam() method to read in all of the relevant data from the BamFile
 * for the new object.  It is also called directly by the BamReader to re-read
 * the data for an object that has been placed on the stream for an update.
 */
79
virtual void TypedWritable::fillin(DatagramIterator &scan, BamReader *manager);

988 17 mark_bam_modified 0 4 1828 32 TypedWritable::mark_bam_modified 0 1 75 345
/**
 * Increments the bam_modified counter, so that this object will be
 * invalidated and retransmitted on any open bam streams.  This should
 * normally not need to be called by user code; it should be called internally
 * when the object has been changed in a way that legitimately requires its
 * retransmission to any connected clients.
 */
51
inline void TypedWritable::mark_bam_modified(void);

989 16 get_bam_modified 0 4 1828 31 TypedWritable::get_bam_modified 0 1 76 140
/**
 * Returns the current bam_modified counter.  This counter is normally
 * incremented automatically whenever the object is modified.
 */
61
inline UpdateSeq TypedWritable::get_bam_modified(void) const;

990 10 __reduce__ 0 4 1828 25 TypedWritable::__reduce__ 0 1 77 0
58
PyObject *TypedWritable::__reduce__(PyObject *self) const;

991 18 __reduce_persist__ 0 4 1828 33 TypedWritable::__reduce_persist__ 0 1 78 0
85
PyObject *TypedWritable::__reduce_persist__(PyObject *self, PyObject *pickler) const;

992 20 encode_to_bam_stream 0 4 1828 35 TypedWritable::encode_to_bam_stream 0 1 79 846
/**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and returns that data as a string string.  Returns empty string
 * on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */

/**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and stores that data in the indicated string.  Returns true on
 * success, false on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */
160
inline std::string TypedWritable::encode_to_bam_stream(void) const;
bool TypedWritable::encode_to_bam_stream(std::string &data, BamWriter *writer = NULL) const;

993 26 decode_raw_from_bam_stream 0 4 1828 41 TypedWritable::decode_raw_from_bam_stream 0 0 957
/**
 * Reads the string created by a previous call to encode_to_bam_stream(), and
 * extracts the single object on that string.  Returns true on success, false
 * on on error.
 *
 * This variant sets the TypedWritable and ReferenceCount pointers separately;
 * both are pointers to the same object.  The reference count is not
 * incremented; it is the caller's responsibility to manage the reference
 * count.
 *
 * Note that this method cannot be used to retrieve objects that do not
 * inherit from ReferenceCount, because these objects cannot persist beyond
 * the lifetime of the BamReader that reads them.  To retrieve these objects
 * from a bam stream, you must construct a BamReader directly.
 *
 * If you happen to know that the particular object in question inherits from
 * TypedWritableReferenceCount or PandaNode, consider calling the variant of
 * decode_from_bam_stream() defined for those methods, which presents a
 * simpler interface.
 */
152
static bool TypedWritable::decode_raw_from_bam_stream(TypedWritable *&ptr, ReferenceCount *&ref_ptr, std::string const &data, BamReader *reader = NULL);

994 14 get_class_type 0 4 1828 29 TypedWritable::get_class_type 0 1 80 0
54
static TypeHandle TypedWritable::get_class_type(void);

995 23 upcast_to_TypedWritable 0 12 1830 52 TypedWritableReferenceCount::upcast_to_TypedWritable 0 1 83 56
upcast from TypedWritableReferenceCount to TypedWritable
74
TypedWritable *TypedWritableReferenceCount::upcast_to_TypedWritable(void);

996 39 downcast_to_TypedWritableReferenceCount 0 12 1828 54 TypedWritable::downcast_to_TypedWritableReferenceCount 0 1 84 58
downcast from TypedWritable to TypedWritableReferenceCount
90
TypedWritableReferenceCount *TypedWritable::downcast_to_TypedWritableReferenceCount(void);

997 24 upcast_to_ReferenceCount 0 12 1830 53 TypedWritableReferenceCount::upcast_to_ReferenceCount 0 1 85 57
upcast from TypedWritableReferenceCount to ReferenceCount
76
ReferenceCount *TypedWritableReferenceCount::upcast_to_ReferenceCount(void);

998 39 downcast_to_TypedWritableReferenceCount 0 12 1831 55 ReferenceCount::downcast_to_TypedWritableReferenceCount 0 1 86 59
downcast from ReferenceCount to TypedWritableReferenceCount
91
TypedWritableReferenceCount *ReferenceCount::downcast_to_TypedWritableReferenceCount(void);

999 22 decode_from_bam_stream 0 4 1830 51 TypedWritableReferenceCount::decode_from_bam_stream 0 1 81 492
/**
 * Reads the string created by a previous call to encode_to_bam_stream(), and
 * extracts and returns the single object on that string.  Returns NULL on
 * error.
 *
 * This method is intended to replace decode_raw_from_bam_stream() when you
 * know the stream in question returns an object of type
 * TypedWritableReferenceCount, allowing for easier reference count
 * management.  Note that the caller is still responsible for maintaining the
 * reference count on the return value.
 */
151
static PointerTo< TypedWritableReferenceCount > TypedWritableReferenceCount::decode_from_bam_stream(std::string const &data, BamReader *reader = NULL);

1000 14 get_class_type 0 4 1830 43 TypedWritableReferenceCount::get_class_type 0 1 82 0
68
static TypeHandle TypedWritableReferenceCount::get_class_type(void);

1001 28 ~TypedWritableReferenceCount 0 4 1830 57 TypedWritableReferenceCount::~TypedWritableReferenceCount 0 0 0
64
TypedWritableReferenceCount::~TypedWritableReferenceCount(void);

1002 37 upcast_to_TypedWritableReferenceCount 0 12 1832 53 BamCacheRecord::upcast_to_TypedWritableReferenceCount 0 1 109 57
upcast from BamCacheRecord to TypedWritableReferenceCount
89
TypedWritableReferenceCount *BamCacheRecord::upcast_to_TypedWritableReferenceCount(void);

1003 26 downcast_to_BamCacheRecord 0 12 1830 55 TypedWritableReferenceCount::downcast_to_BamCacheRecord 0 1 110 59
downcast from TypedWritableReferenceCount to BamCacheRecord
78
BamCacheRecord *TypedWritableReferenceCount::downcast_to_BamCacheRecord(void);

1004 24 upcast_to_LinkedListNode 0 12 1832 40 BamCacheRecord::upcast_to_LinkedListNode 0 0 44
upcast from BamCacheRecord to LinkedListNode
63
LinkedListNode *BamCacheRecord::upcast_to_LinkedListNode(void);

1005 26 downcast_to_BamCacheRecord 0 12 1833 42 LinkedListNode::downcast_to_BamCacheRecord 0 0 46
downcast from LinkedListNode to BamCacheRecord
65
BamCacheRecord *LinkedListNode::downcast_to_BamCacheRecord(void);

1006 15 ~BamCacheRecord 0 6 1832 31 BamCacheRecord::~BamCacheRecord 0 0 10
/**
 *
 */
46
virtual BamCacheRecord::~BamCacheRecord(void);

1007 9 make_copy 0 4 1832 25 BamCacheRecord::make_copy 0 1 87 179
/**
 * Returns a duplicate of the BamCacheRecord.  The duplicate will not have a
 * data pointer set, even though one may have been assigned to the original
 * via set_data().
 */
73
inline PointerTo< BamCacheRecord > BamCacheRecord::make_copy(void) const;

1008 11 operator == 0 4 1832 27 BamCacheRecord::operator == 0 1 88 0
75
inline bool BamCacheRecord::operator ==(BamCacheRecord const &other) const;

1009 19 get_source_pathname 0 4 1832 35 BamCacheRecord::get_source_pathname 0 1 89 237
/**
 * Returns the full pathname to the source file that originally generated this
 * cache request.  In some cases, for instance in the case of a of a multipage
 * texture like "cube_#.png", this may not not a true filename on disk.
 */
71
inline Filename const &BamCacheRecord::get_source_pathname(void) const;

1010 18 get_cache_filename 0 4 1832 34 BamCacheRecord::get_cache_filename 0 1 90 230
/**
 * Returns the name of the cache file as hashed from the source_pathname.
 * This will be relative to the root of the cache directory, and it will not
 * include any suffixes that may be appended to resolve hash conflicts.
 */
70
inline Filename const &BamCacheRecord::get_cache_filename(void) const;

1011 20 get_source_timestamp 0 4 1832 36 BamCacheRecord::get_source_timestamp 0 1 91 204
/**
 * Returns the file timestamp of the original source file that generated this
 * cache record, if available.  In some cases the original file timestamp is
 * not available, and this will return 0.
 */
63
inline time_t BamCacheRecord::get_source_timestamp(void) const;

1012 17 get_recorded_time 0 4 1832 33 BamCacheRecord::get_recorded_time 0 1 92 84
/**
 * Returns the time at which this particular record was recorded or updated.
 */
60
inline time_t BamCacheRecord::get_recorded_time(void) const;

1013 23 get_num_dependent_files 0 4 1832 39 BamCacheRecord::get_num_dependent_files 0 1 93 75
/**
 * Returns the number of source files that contribute to the cache.
 */
63
inline int BamCacheRecord::get_num_dependent_files(void) const;

1014 22 get_dependent_pathname 0 4 1832 38 BamCacheRecord::get_dependent_pathname 0 1 94 94
/**
 * Returns the full pathname of the nth source files that contributes to the
 * cache.
 */
75
inline Filename const &BamCacheRecord::get_dependent_pathname(int n) const;

1015 20 dependents_unchanged 0 4 1832 36 BamCacheRecord::dependents_unchanged 0 1 95 124
/**
 * Returns true if all of the dependent files are still the same as when the
 * cache was recorded, false otherwise.
 */
54
bool BamCacheRecord::dependents_unchanged(void) const;

1016 21 clear_dependent_files 0 4 1832 37 BamCacheRecord::clear_dependent_files 0 1 96 80
/**
 * Empties the list of files that contribute to the data in this record.
 */
49
void BamCacheRecord::clear_dependent_files(void);

1017 18 add_dependent_file 0 4 1832 34 BamCacheRecord::add_dependent_file 0 2 97 98 309
/**
 * Adds the indicated file to the list of files that will be loaded to
 * generate the data in this record.  This should be called once for the
 * primary source file, and again for each secondary source file, if any.
 */

/**
 * Variant of add_dependent_file that takes an already opened VirtualFile.
 */
132
void BamCacheRecord::add_dependent_file(Filename const &pathname);
void BamCacheRecord::add_dependent_file(VirtualFile const *file);

1018 8 has_data 0 4 1832 24 BamCacheRecord::has_data 0 1 99 130
/**
 * Returns true if this cache record has an in-memory data object associated--
 * that is, the object stored in the cache.
 */
49
inline bool BamCacheRecord::has_data(void) const;

1019 10 clear_data 0 4 1832 26 BamCacheRecord::clear_data 0 1 100 147
/**
 * Removes the in-memory data object associated with this record, if any.
 * This does not affect the on-disk representation of the record.
 */
45
inline void BamCacheRecord::clear_data(void);

1020 8 get_data 0 4 1832 24 BamCacheRecord::get_data 0 1 101 139
/**
 * Returns a pointer to the data stored in the record, or NULL if there is no
 * data.  The pointer is not removed from the record.
 */
59
inline TypedWritable *BamCacheRecord::get_data(void) const;

1021 12 extract_data 0 4 1832 28 BamCacheRecord::extract_data 0 0 416
/**
 * Fills ptr and ref_ptr with the two different-typed pointers to the same
 * object, the data stored within this record.  This transfers ownership of
 * the data pointer; the caller will be responsible for managing the reference
 * counts on this object subsequently.
 *
 * Returns true if the record contained any data (and the pointers have been
 * filled), false if it didn't (and the pointers are NULL).
 */
88
inline bool BamCacheRecord::extract_data(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1022 8 set_data 0 4 1832 24 BamCacheRecord::set_data 0 4 102 103 104 105 916
/**
 * Stores a new data object on the record.  You should pass the same pointer
 * twice, to both parameters; this allows the C++ typecasting to automatically
 * convert the pointer into both a TypedWritable and a ReferenceCount pointer,
 * so that the BamCacheRecord object can reliably manage the reference counts.
 *
 * You may pass 0 or NULL as the second parameter.  If you do this, the
 * BamCacheRecord will not manage the object's reference count; it will be up
 * to you to ensure the object is not deleted during the lifetime of the
 * BamCacheRecord object.
 */

/**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritable.
 */

/**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritableReferenceCount.
 */

/**
 * This variant on set_data() is provided just to allow Python code to pass a
 * 0 as the second parameter.
 */
281
inline void BamCacheRecord::set_data(TypedWritable *ptr, ReferenceCount *ref_ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr);
inline void BamCacheRecord::set_data(TypedWritableReferenceCount *ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr, int dummy);

1023 6 output 0 4 1832 22 BamCacheRecord::output 0 1 106 10
/**
 *
 */
48
void BamCacheRecord::output(ostream &out) const;

1024 5 write 0 4 1832 21 BamCacheRecord::write 0 1 107 10
/**
 *
 */
69
void BamCacheRecord::write(ostream &out, int indent_level = 0) const;

1025 14 get_class_type 0 4 1832 30 BamCacheRecord::get_class_type 0 1 108 0
55
static TypeHandle BamCacheRecord::get_class_type(void);

1026 8 BamCache 0 4 1838 18 BamCache::BamCache 0 1 111 10
/**
 *
 */
25
BamCache::BamCache(void);

1027 9 ~BamCache 0 4 1838 19 BamCache::~BamCache 0 0 10
/**
 *
 */
26
BamCache::~BamCache(void);

1028 10 set_active 0 4 1838 20 BamCache::set_active 0 1 112 347
/**
 * Changes the state of the active flag.  "active" means that the cache should
 * be consulted automatically on loads, "not active" means that objects should
 * be loaded directly without consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */
44
inline void BamCache::set_active(bool flag);

1029 10 get_active 0 4 1838 20 BamCache::get_active 0 1 113 381
/**
 * Returns true if the BamCache is currently active, false if it is not.
 * "active" means that the cache should be consulted automatically on loads,
 * "not active" means that objects should be loaded directly without
 * consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */
45
inline bool BamCache::get_active(void) const;

1030 16 set_cache_models 0 4 1838 26 BamCache::set_cache_models 0 1 114 118
/**
 * Indicates whether model files (e.g.  egg files and bam files) will be
 * stored in the cache, as bam files.
 */
50
inline void BamCache::set_cache_models(bool flag);

1031 16 get_cache_models 0 4 1838 26 BamCache::get_cache_models 0 1 115 172
/**
 * Returns whether model files (e.g.  egg files and bam files) will be stored
 * in the cache, as bam files.
 *
 * This also returns false if get_active() is false.
 */
51
inline bool BamCache::get_cache_models(void) const;

1032 18 set_cache_textures 0 4 1838 28 BamCache::set_cache_textures 0 1 116 101
/**
 * Indicates whether texture files will be stored in the cache, as
 * uncompressed txo files.
 */
52
inline void BamCache::set_cache_textures(bool flag);

1033 18 get_cache_textures 0 4 1838 28 BamCache::get_cache_textures 0 1 117 174
/**
 * Returns whether texture files (e.g.  egg files and bam files) will be
 * stored in the cache, as txo files.
 *
 * This also returns false if get_active() is false.
 */
53
inline bool BamCache::get_cache_textures(void) const;

1034 29 set_cache_compressed_textures 0 4 1838 39 BamCache::set_cache_compressed_textures 0 1 118 722
/**
 * Indicates whether compressed texture files will be stored in the cache, as
 * compressed txo files.  The compressed data may either be generated in-CPU,
 * via the squish library, or it may be extracted from the GSG after the
 * texture has been loaded.
 *
 * This may be set in conjunction with set_cache_textures(), or independently
 * of it.  If set_cache_textures() is true and this is false, all textures
 * will be cached in their uncompressed form.  If set_cache_textures() is
 * false and this is true, only compressed textures will be cached, and they
 * will be cached in their compressed form.  If both are true, all textures
 * will be cached, in their uncompressed or compressed form appropriately.
 */
63
inline void BamCache::set_cache_compressed_textures(bool flag);

1035 29 get_cache_compressed_textures 0 4 1838 39 BamCache::get_cache_compressed_textures 0 1 119 202
/**
 * Returns whether compressed texture files will be stored in the cache, as
 * compressed txo files.  See set_cache_compressed_textures().
 *
 * This also returns false if get_active() is false.
 */
64
inline bool BamCache::get_cache_compressed_textures(void) const;

1036 26 set_cache_compiled_shaders 0 4 1838 36 BamCache::set_cache_compiled_shaders 0 1 120 184
/**
 * Indicates whether compiled shader programs will be stored in the cache, as
 * binary .sho files.  This may not be supported by all shader languages or
 * graphics renderers.
 */
60
inline void BamCache::set_cache_compiled_shaders(bool flag);

1037 26 get_cache_compiled_shaders 0 4 1838 36 BamCache::get_cache_compiled_shaders 0 1 121 196
/**
 * Returns whether compiled shader programs will be stored in the cache, as
 * binary .txo files.  See set_cache_compiled_shaders().
 *
 * This also returns false if get_active() is false.
 */
61
inline bool BamCache::get_cache_compiled_shaders(void) const;

1038 8 set_root 0 4 1838 18 BamCache::set_root 0 1 122 372
/**
 * Changes the current root pathname of the cache.  This specifies where the
 * cache files are stored on disk.  This should name a directory that is on a
 * disk local to the machine (not on a network-mounted disk), for instance,
 * /tmp/panda-cache or /c/panda-cache.
 *
 * If the directory does not already exist, it will be created as a result of
 * this call.
 */
46
void BamCache::set_root(Filename const &root);

1039 8 get_root 0 4 1838 18 BamCache::get_root 0 1 123 75
/**
 * Returns the current root pathname of the cache.  See set_root().
 */
47
inline Filename BamCache::get_root(void) const;

1040 14 set_flush_time 0 4 1838 24 BamCache::set_flush_time 0 1 124 86
/**
 * Specifies the time in seconds between automatic flushes of the cache index.
 */
53
inline void BamCache::set_flush_time(int flush_time);

1041 14 get_flush_time 0 4 1838 24 BamCache::get_flush_time 0 1 125 84
/**
 * Returns the time in seconds between automatic flushes of the cache index.
 */
48
inline int BamCache::get_flush_time(void) const;

1042 20 set_cache_max_kbytes 0 4 1838 30 BamCache::set_cache_max_kbytes 0 1 126 430
/**
 * Specifies the maximum size, in kilobytes, which the cache is allowed to
 * grow to.  If a newly cached file would exceed this size, an older file is
 * removed from the cache.
 *
 * Note that in the case of multiple different processes simultaneously
 * operating on the same cache directory, the actual cache size may slightly
 * exceed this value from time to time due to latency in checking between the
 * processes.
 */
59
inline void BamCache::set_cache_max_kbytes(int max_kbytes);

1043 20 get_cache_max_kbytes 0 4 1838 30 BamCache::get_cache_max_kbytes 0 1 127 121
/**
 * Returns the maximum size, in kilobytes, which the cache is allowed to grow
 * to.  See set_cache_max_kbytes().
 */
54
inline int BamCache::get_cache_max_kbytes(void) const;

1044 13 set_read_only 0 4 1838 23 BamCache::set_read_only 0 1 128 252
/**
 * Can be used to put the cache in read-only mode, or take it out of read-only
 * mode.  Note that if you put it into read-write mode, and it discovers that
 * it does not have write access, it will put itself right back into read-only
 * mode.
 */
45
inline void BamCache::set_read_only(bool ro);

1045 13 get_read_only 0 4 1838 23 BamCache::get_read_only 0 1 129 230
/**
 * Returns true if the cache is in read-only mode.  Normally, the cache starts
 * in read-write mode.  It can put itself into read-only mode automatically if
 * it discovers that it does not have write access to the cache.
 */
48
inline bool BamCache::get_read_only(void) const;

1046 6 lookup 0 4 1838 16 BamCache::lookup 0 1 130 782
/**
 * Looks up a file in the cache.
 *
 * If the file is cacheable, then regardless of whether the file is found in
 * the cache or not, this returns a BamCacheRecord.  On the other hand, if the
 * file cannot be cached, returns NULL.
 *
 * If record->has_data() returns true, then the file was found in the cache,
 * and you may call record->extract_data() to get the object.  If
 * record->has_data() returns false, then the file was not found in the cache
 * or the cache was stale; and you should reload the source file (calling
 * record->add_dependent_file() for each file loaded, including the original
 * source file), and then call record->set_data() to record the resulting
 * loaded object; and finally, you should call store() to write the cached
 * record to disk.
 */
114
PointerTo< BamCacheRecord > BamCache::lookup(Filename const &source_filename, std::string const &cache_extension);

1047 5 store 0 4 1838 15 BamCache::store 0 1 131 212
/**
 * Flushes a cache entry to disk.  You must have retrieved the cache record
 * via a prior call to lookup(), and then stored the data via
 * record->set_data().  Returns true on success, false on failure.
 */
45
bool BamCache::store(BamCacheRecord *record);

1048 20 consider_flush_index 0 4 1838 30 BamCache::consider_flush_index 0 1 132 92
/**
 * Flushes the index if enough time has elapsed since the index was last
 * flushed.
 */
42
void BamCache::consider_flush_index(void);

1049 11 flush_index 0 4 1838 21 BamCache::flush_index 0 1 133 48
/**
 * Ensures the index is written to disk.
 */
33
void BamCache::flush_index(void);

1050 10 list_index 0 4 1838 20 BamCache::list_index 0 1 134 63
/**
 * Writes the contents of the index to standard output.
 */
68
void BamCache::list_index(ostream &out, int indent_level = 0) const;

1051 14 get_global_ptr 0 4 1838 24 BamCache::get_global_ptr 0 1 135 124
/**
 * Returns a pointer to the global BamCache object, which is used
 * automatically by the ModelPool and TexturePool.
 */
55
static inline BamCache *BamCache::get_global_ptr(void);

1052 27 consider_flush_global_index 0 4 1838 37 BamCache::consider_flush_global_index 0 1 136 84
/**
 * If there is a global BamCache object, calls consider_flush_index() on it.
 */
63
static inline void BamCache::consider_flush_global_index(void);

1053 18 flush_global_index 0 4 1838 28 BamCache::flush_global_index 0 1 137 75
/**
 * If there is a global BamCache object, calls flush_index() on it.
 */
54
static inline void BamCache::flush_global_index(void);

1054 8 BamEnums 0 4 1839 18 BamEnums::BamEnums 0 2 138 139 0
97
inline BamEnums::BamEnums(void) = default;
inline BamEnums::BamEnums(BamEnums const &) = default;

1055 9 ~BamEnums 0 4 1839 19 BamEnums::~BamEnums 0 0 0
26
BamEnums::~BamEnums(void);

1056 13 LoaderOptions 0 4 1843 28 LoaderOptions::LoaderOptions 0 3 140 141 142 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
238
LoaderOptions::LoaderOptions(int flags = (::LoaderOptions::LF_search | ::LoaderOptions::LF_report_errors));
inline LoaderOptions::LoaderOptions(int flags, int texture_flags);
inline LoaderOptions::LoaderOptions(LoaderOptions const &copy);

1057 10 operator = 0 4 1843 25 LoaderOptions::operator = 0 1 143 0
65
inline void LoaderOptions::operator =(LoaderOptions const &copy);

1058 9 set_flags 0 4 1843 24 LoaderOptions::set_flags 0 1 144 10
/**
 *
 */
48
inline void LoaderOptions::set_flags(int flags);

1059 9 get_flags 0 4 1843 24 LoaderOptions::get_flags 0 1 145 10
/**
 *
 */
48
inline int LoaderOptions::get_flags(void) const;

1060 17 set_texture_flags 0 4 1843 32 LoaderOptions::set_texture_flags 0 1 146 10
/**
 *
 */
56
inline void LoaderOptions::set_texture_flags(int flags);

1061 17 get_texture_flags 0 4 1843 32 LoaderOptions::get_texture_flags 0 1 147 10
/**
 *
 */
56
inline int LoaderOptions::get_texture_flags(void) const;

1062 21 set_texture_num_views 0 4 1843 36 LoaderOptions::set_texture_num_views 0 1 148 459
/**
 * Specifies the expected number of views to load for the texture.  This is
 * ignored unless TF_multiview is included in texture_flags.  This must be
 * specified when loading a 3-d multiview texture or 2-d texture array, in
 * which case it is used to differentiate z levels from separate views; it
 * may be zero in the case of 2-d textures or cube maps, in which case the
 * number of views can be inferred from the number of images found on disk.
 */
64
inline void LoaderOptions::set_texture_num_views(int num_views);

1063 21 get_texture_num_views 0 4 1843 36 LoaderOptions::get_texture_num_views 0 1 149 39
/**
 * See set_texture_num_views().
 */
60
inline int LoaderOptions::get_texture_num_views(void) const;

1064 22 set_auto_texture_scale 0 4 1843 37 LoaderOptions::set_auto_texture_scale 0 1 150 209
/**
 * Set this flag to ATS_none, ATS_up, ATS_down, or ATS_pad to control how a
 * texture is scaled from disk when it is subsequently loaded.  Set it to
 * ATS_unspecified to restore the default behavior.
 */
74
inline void LoaderOptions::set_auto_texture_scale(AutoTextureScale scale);

1065 22 get_auto_texture_scale 0 4 1843 37 LoaderOptions::get_auto_texture_scale 0 1 151 40
/**
 * See set_auto_texture_scale().
 */
74
inline AutoTextureScale LoaderOptions::get_auto_texture_scale(void) const;

1066 6 output 0 4 1843 21 LoaderOptions::output 0 1 152 10
/**
 *
 */
47
void LoaderOptions::output(ostream &out) const;

1067 14 ~LoaderOptions 0 4 1843 29 LoaderOptions::~LoaderOptions 0 0 0
36
LoaderOptions::~LoaderOptions(void);

1068 9 BamReader 0 4 1846 20 BamReader::BamReader 0 1 153 50
// The primary interface for a caller.

/**
 *
 */
55
BamReader::BamReader(DatagramGenerator *source = NULL);

1069 10 ~BamReader 0 4 1846 21 BamReader::~BamReader 0 0 10
/**
 *
 */
28
BamReader::~BamReader(void);

1070 10 set_source 0 4 1846 21 BamReader::set_source 0 1 154 142
/**
 * Changes the source of future datagrams for this BamReader.  This also
 * implicitly calls init() if it has not already been called.
 */
54
void BamReader::set_source(DatagramGenerator *source);

1071 10 get_source 0 4 1846 21 BamReader::get_source 0 1 155 100
/**
 * Returns the current source of the BamReader as set by set_source() or the
 * constructor.
 */
54
inline DatagramGenerator *BamReader::get_source(void);

1072 4 init 0 4 1846 15 BamReader::init 0 1 156 210
/**
 * Initializes the BamReader prior to reading any objects from its source.
 * This includes reading the Bam header.
 *
 * This returns true if the BamReader successfully initialized, false
 * otherwise.
 */
27
bool BamReader::init(void);

1073 12 set_aux_data 0 4 1846 23 BamReader::set_aux_data 0 1 157 1007
/**
 * Associates an arbitrary block of data with the indicated object (or NULL),
 * and the indicated name.
 *
 * This is intended to provide a place for temporary storage for objects
 * reading themselves from the bam file.  To use it, inherit from
 * BamReader::AuxData and store whatever data you like there.  Then associate
 * your AuxData with the object as it is being read with set_aux_data().  You
 * may later set the aux data to NULL to remove it; or it will automatically
 * be removed (and deleted) after finalize() is called for the object in
 * question.
 *
 * If the TypedWritable pointer is NULL, the the aux data is stored globally
 * for the BamReader in general.  This pointer is available to any bam
 * objects, and will not be automatically removed until the BamReader itself
 * destructs.
 *
 * In either case, the name is just an arbitrary user-defined key.  If there
 * is already a data pointer stored for the obj/name pair, that data pointer
 * will be replaced (and deleted).
 */
100
void BamReader::set_aux_data(TypedWritable *obj, std::string const &name, BamReader::AuxData *data);

1074 12 get_aux_data 0 4 1846 23 BamReader::get_aux_data 0 1 158 173
/**
 * Returns the pointer previously associated with the bam reader by a previous
 * call to set_aux_data(), or NULL if data with the indicated key has not been
 * set.
 */
95
BamReader::AuxData *BamReader::get_aux_data(TypedWritable *obj, std::string const &name) const;

1075 12 get_filename 0 4 1846 23 BamReader::get_filename 0 1 159 199
/**
 * If a BAM is a file, then the BamReader should contain the name of the file.
 * This enables the reader to interpret pathnames in the BAM as relative to
 * the directory containing the BAM.
 */
59
inline Filename const &BamReader::get_filename(void) const;

1076 18 get_loader_options 0 4 1846 29 BamReader::get_loader_options 0 1 160 98
/**
 * Returns the LoaderOptions passed to the loader when the model was
 * requested, if any.
 */
70
inline LoaderOptions const &BamReader::get_loader_options(void) const;

1077 18 set_loader_options 0 4 1846 29 BamReader::set_loader_options 0 1 161 58
/**
 * Specifies the LoaderOptions for this BamReader.
 */
72
inline void BamReader::set_loader_options(LoaderOptions const &options);

1078 11 read_object 0 4 1846 22 BamReader::read_object 0 1 162 1393
/**
 * Reads a single object from the Bam file.  If the object type is known, a
 * new object of the appropriate type is created and returned; otherwise, NULL
 * is returned.  NULL is also returned when the end of the file is reached.
 * is_eof() may be called to differentiate between these two cases.
 *
 * This may be called repeatedly to extract out all the objects in the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is retrieved directly from the Bam file:
 * the root of the scene graph.  The remaining objects will all be retrieved
 * recursively by the first object.
 *
 * Note that the object returned may not yet be complete.  In particular, some
 * of its pointers may not be filled in; you must call resolve() to fill in
 * all the available pointers before you can safely use any objects returned
 * by read_object().
 *
 * This flavor of read_object() requires the caller to know what type of
 * object it has received in order to properly manage the reference counts.
 */

/**
 * Reads a single object from the Bam file.
 *
 * This flavor of read_object() returns both a TypedWritable and a
 * ReferenceCount pointer to the same object, so the reference count may be
 * tracked reliably, without having to know precisely what type of object we
 * have.
 * @return true on success, or false on failure.
 */
120
TypedWritable *BamReader::read_object(void);
bool BamReader::read_object(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1079 6 is_eof 0 4 1846 17 BamReader::is_eof 0 1 163 138
/**
 * Returns true if the reader has reached end-of-file, false otherwise.  This
 * call is only valid after a call to read_object().
 */
42
inline bool BamReader::is_eof(void) const;

1080 7 resolve 0 4 1846 18 BamReader::resolve 0 1 164 565
/**
 * This may be called at any time during processing of the Bam file to resolve
 * all the known pointers so far.  It is usually called at the end of the
 * processing, after all objects have been read, which is generally the best
 * time to call it.
 *
 * This must be called at least once after reading a particular object via
 * get_object() in order to validate that object.
 *
 * The return value is true if all objects have been resolved, or false if
 * some objects are still outstanding (in which case you will need to call
 * resolve() again later).
 */
30
bool BamReader::resolve(void);

1081 14 change_pointer 0 4 1846 25 BamReader::change_pointer 0 1 165 406
/**
 * Indicates that an object recently read from the bam stream should be
 * replaced with a new object.  Any future occurrences of the original object
 * in the stream will henceforth return the new object instead.
 *
 * The return value is true if the replacement was successfully made, or false
 * if the object was not read from the stream (or if change_pointer had
 * already been called on it).
 */
100
bool BamReader::change_pointer(TypedWritable const *orig_pointer, TypedWritable const *new_pointer);

1082 18 get_file_major_ver 0 4 1846 29 BamReader::get_file_major_ver 0 1 166 81
/**
 * Returns the major version number of the Bam file currently being read.
 */
53
inline int BamReader::get_file_major_ver(void) const;

1083 18 get_file_minor_ver 0 4 1846 29 BamReader::get_file_minor_ver 0 1 167 81
/**
 * Returns the minor version number of the Bam file currently being read.
 */
53
inline int BamReader::get_file_minor_ver(void) const;

1084 15 get_file_endian 0 4 1846 26 BamReader::get_file_endian 0 1 168 254
/**
 * Returns the endian preference indicated by the Bam file currently being
 * read.  This does not imply that every number is stored using the indicated
 * convention, but individual objects may choose to respect this flag when
 * recording data.
 */
66
inline BamEnums::BamEndian BamReader::get_file_endian(void) const;

1085 24 get_file_stdfloat_double 0 4 1846 35 BamReader::get_file_stdfloat_double 0 1 169 220
/**
 * Returns true if the file stores all "standard" floats as 64-bit doubles, or
 * false if they are 32-bit floats.  This is determined by the compilation
 * flags of the version of Panda that generated this file.
 */
60
inline bool BamReader::get_file_stdfloat_double(void) const;

1086 21 get_current_major_ver 0 4 1846 32 BamReader::get_current_major_ver 0 1 170 174
/**
 * Returns the major version number of Bam files supported by the current code
 * base.  This must match get_file_major_ver() in order to successfully read a
 * file.
 */
56
inline int BamReader::get_current_major_ver(void) const;

1087 21 get_current_minor_ver 0 4 1846 32 BamReader::get_current_minor_ver 0 1 171 184
/**
 * Returns the minor version number of Bam files supported by the current code
 * base.  This must match or exceed get_file_minor_ver() in order to
 * successfully read a file.
 */
56
inline int BamReader::get_current_minor_ver(void) const;

1088 16 get_file_version 0 4 1846 27 BamReader::get_file_version 0 1 172 0
50
PyObject *BamReader::get_file_version(void) const;

1089 16 register_factory 0 4 1846 27 BamReader::register_factory 0 1 173 208
/**
 * Registers a factory function that is called when an object of the given
 * type is encountered within the .bam stream.
 *
 * @param user_data an optional pointer to be passed along to the function.
 */
75
static void BamReader::register_factory(TypeHandle handle, PyObject *func);

1090 9 BamWriter 0 4 1853 20 BamWriter::BamWriter 0 2 174 175 10
/**
 *
 */
108
BamWriter::BamWriter(DatagramSink *target = NULL);
inline BamWriter::BamWriter(BamWriter const &) = default;

1091 10 ~BamWriter 0 4 1853 21 BamWriter::~BamWriter 0 0 10
/**
 *
 */
28
BamWriter::~BamWriter(void);

1092 10 set_target 0 4 1853 21 BamWriter::set_target 0 1 176 153
/**
 * Changes the destination of future datagrams written by the BamWriter.  This
 * also implicitly calls init() if it has not already been called.
 */
49
void BamWriter::set_target(DatagramSink *target);

1093 10 get_target 0 4 1853 21 BamWriter::get_target 0 1 177 100
/**
 * Returns the current target of the BamWriter as set by set_target() or the
 * constructor.
 */
49
inline DatagramSink *BamWriter::get_target(void);

1094 4 init 0 4 1853 15 BamWriter::init 0 1 178 220
/**
 * Initializes the BamWriter prior to writing any objects to its output
 * stream.  This includes writing out the Bam header.
 *
 * This returns true if the BamWriter successfully initialized, false
 * otherwise.
 */
27
bool BamWriter::init(void);

1095 12 get_filename 0 4 1853 23 BamWriter::get_filename 0 1 179 197
/**
 * If a BAM is a file, then the BamWriter should contain the name of the file.
 * This enables the writer to convert pathnames in the BAM to relative to the
 * directory containing the BAM.
 */
59
inline Filename const &BamWriter::get_filename(void) const;

1096 12 write_object 0 4 1853 23 BamWriter::write_object 0 1 180 736
/**
 * Writes a single object to the Bam file, so that the
 * BamReader::read_object() can later correctly restore the object and all its
 * pointers.
 *
 * This implicitly also writes any additional objects this object references
 * (if they haven't already been written), so that pointers may be fully
 * resolved.
 *
 * This may be called repeatedly to write a sequence of objects to the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is written directly from the Bam file: the
 * root of the scene graph.  The remaining objects will all be written
 * recursively by the first object.
 *
 * Returns true if the object is successfully written, false otherwise.
 */
55
bool BamWriter::write_object(TypedWritable const *obj);

1097 10 has_object 0 4 1853 21 BamWriter::has_object 0 1 181 170
/**
 * Returns true if the object has previously been written (or at least
 * requested to be written) to the bam file, or false if we've never heard of
 * it before.
 */
59
bool BamWriter::has_object(TypedWritable const *obj) const;

1098 5 flush 0 4 1853 16 BamWriter::flush 0 1 182 85
/**
 * Ensures that all data written thus far is manifested on the output stream.
 */
28
void BamWriter::flush(void);

1099 18 get_file_major_ver 0 4 1853 29 BamWriter::get_file_major_ver 0 1 183 84
/**
 * Returns the major version number of the Bam file currently being written.
 */
53
inline int BamWriter::get_file_major_ver(void) const;

1100 18 get_file_minor_ver 0 4 1853 29 BamWriter::get_file_minor_ver 0 1 184 84
/**
 * Returns the minor version number of the Bam file currently being written.
 */
53
inline int BamWriter::get_file_minor_ver(void) const;

1101 18 set_file_minor_ver 0 4 1853 29 BamWriter::set_file_minor_ver 0 1 185 232
/**
 * Changes the minor .bam version to write.  This should be called before
 * init().  Each Panda version has only a fairly narrow range of versions it
 * is able to write; consult the .bam documentation for more information.
 */
57
inline void BamWriter::set_file_minor_ver(int minor_ver);

1102 15 get_file_endian 0 4 1853 26 BamWriter::get_file_endian 0 1 186 257
/**
 * Returns the endian preference indicated by the Bam file currently being
 * written.  This does not imply that every number is stored using the
 * indicated convention, but individual objects may choose to respect this
 * flag when recording data.
 */
66
inline BamEnums::BamEndian BamWriter::get_file_endian(void) const;

1103 24 get_file_stdfloat_double 0 4 1853 35 BamWriter::get_file_stdfloat_double 0 1 187 248
/**
 * Returns true if the file will store all "standard" floats as 64-bit
 * doubles, or false if they are 32-bit floats.  This isn't runtime settable;
 * it's based on the compilation flags of the version of Panda that generated
 * this file.
 */
60
inline bool BamWriter::get_file_stdfloat_double(void) const;

1104 21 get_file_texture_mode 0 4 1853 32 BamWriter::get_file_texture_mode 0 1 188 196
/**
 * Returns the BamTextureMode preference indicated by the Bam file currently
 * being written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */
77
inline BamEnums::BamTextureMode BamWriter::get_file_texture_mode(void) const;

1105 21 set_file_texture_mode 0 4 1853 32 BamWriter::set_file_texture_mode 0 1 189 187
/**
 * Changes the BamTextureMode preference for the Bam file currently being
 * written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */
89
inline void BamWriter::set_file_texture_mode(BamEnums::BamTextureMode file_texture_mode);

1106 13 get_root_node 0 4 1853 24 BamWriter::get_root_node 0 1 190 165
/**
 * Returns the root node of the part of the scene graph we are currently
 * writing out.  This is used for determining what to make NodePaths relative
 * to.
 */
59
inline TypedWritable *BamWriter::get_root_node(void) const;

1107 13 set_root_node 0 4 1853 24 BamWriter::set_root_node 0 1 191 160
/**
 * Sets the root node of the part of the scene graph we are currently writing
 * out.  NodePaths written to this bam file will be relative to this node.
 */
63
inline void BamWriter::set_root_node(TypedWritable *root_node);

1108 7 BitMask 0 4 1856 32 BitMask< uint16_t, 16 >::BitMask 0 3 192 193 194 0
192
inline BitMask< uint16_t, 16 >::BitMask(void);
inline BitMask< uint16_t, 16 >::BitMask(uint16_t init_value);
inline BitMask< uint16_t, 16 >::BitMask(BitMask< uint16_t, 16 > const &) = default;

1109 6 all_on 0 4 1856 31 BitMask< uint16_t, 16 >::all_on 0 1 195 0
76
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::all_on(void);

1110 7 all_off 0 4 1856 32 BitMask< uint16_t, 16 >::all_off 0 1 196 0
77
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::all_off(void);

1111 8 lower_on 0 4 1856 33 BitMask< uint16_t, 16 >::lower_on 0 1 197 0
85
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::lower_on(int on_bits);

1112 3 bit 0 4 1856 28 BitMask< uint16_t, 16 >::bit 0 1 198 0
78
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::bit(int index);

1113 5 range 0 4 1856 30 BitMask< uint16_t, 16 >::range 0 1 199 0
92
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::range(int low_bit, int size);

1114 16 has_max_num_bits 0 4 1856 41 BitMask< uint16_t, 16 >::has_max_num_bits 0 1 200 0
70
static constexpr bool BitMask< uint16_t, 16 >::has_max_num_bits(void);

1115 16 get_max_num_bits 0 4 1856 41 BitMask< uint16_t, 16 >::get_max_num_bits 0 1 201 0
69
static constexpr int BitMask< uint16_t, 16 >::get_max_num_bits(void);

1116 12 get_num_bits 0 4 1856 37 BitMask< uint16_t, 16 >::get_num_bits 0 1 202 0
65
static constexpr int BitMask< uint16_t, 16 >::get_num_bits(void);

1117 7 get_bit 0 4 1856 32 BitMask< uint16_t, 16 >::get_bit 0 1 203 0
62
inline bool BitMask< uint16_t, 16 >::get_bit(int index) const;

1118 7 set_bit 0 4 1856 32 BitMask< uint16_t, 16 >::set_bit 0 1 204 0
56
inline void BitMask< uint16_t, 16 >::set_bit(int index);

1119 9 clear_bit 0 4 1856 34 BitMask< uint16_t, 16 >::clear_bit 0 1 205 0
58
inline void BitMask< uint16_t, 16 >::clear_bit(int index);

1120 10 set_bit_to 0 4 1856 35 BitMask< uint16_t, 16 >::set_bit_to 0 1 206 0
71
inline void BitMask< uint16_t, 16 >::set_bit_to(int index, bool value);

1121 7 is_zero 0 4 1856 32 BitMask< uint16_t, 16 >::is_zero 0 1 207 0
57
inline bool BitMask< uint16_t, 16 >::is_zero(void) const;

1122 9 is_all_on 0 4 1856 34 BitMask< uint16_t, 16 >::is_all_on 0 1 208 0
59
inline bool BitMask< uint16_t, 16 >::is_all_on(void) const;

1123 7 extract 0 4 1856 32 BitMask< uint16_t, 16 >::extract 0 1 209 0
78
inline uint16_t BitMask< uint16_t, 16 >::extract(int low_bit, int size) const;

1124 5 store 0 4 1856 30 BitMask< uint16_t, 16 >::store 0 1 210 0
82
inline void BitMask< uint16_t, 16 >::store(uint16_t value, int low_bit, int size);

1125 10 has_any_of 0 4 1856 35 BitMask< uint16_t, 16 >::has_any_of 0 1 211 0
77
inline bool BitMask< uint16_t, 16 >::has_any_of(int low_bit, int size) const;

1126 10 has_all_of 0 4 1856 35 BitMask< uint16_t, 16 >::has_all_of 0 1 212 0
77
inline bool BitMask< uint16_t, 16 >::has_all_of(int low_bit, int size) const;

1127 9 set_range 0 4 1856 34 BitMask< uint16_t, 16 >::set_range 0 1 213 0
70
inline void BitMask< uint16_t, 16 >::set_range(int low_bit, int size);

1128 11 clear_range 0 4 1856 36 BitMask< uint16_t, 16 >::clear_range 0 1 214 0
72
inline void BitMask< uint16_t, 16 >::clear_range(int low_bit, int size);

1129 12 set_range_to 0 4 1856 37 BitMask< uint16_t, 16 >::set_range_to 0 1 215 0
85
inline void BitMask< uint16_t, 16 >::set_range_to(bool value, int low_bit, int size);

1130 8 get_word 0 4 1856 33 BitMask< uint16_t, 16 >::get_word 0 1 216 0
62
inline uint16_t BitMask< uint16_t, 16 >::get_word(void) const;

1131 8 set_word 0 4 1856 33 BitMask< uint16_t, 16 >::set_word 0 1 217 0
62
inline void BitMask< uint16_t, 16 >::set_word(uint16_t value);

1132 15 get_num_on_bits 0 4 1856 40 BitMask< uint16_t, 16 >::get_num_on_bits 0 1 218 0
64
inline int BitMask< uint16_t, 16 >::get_num_on_bits(void) const;

1133 16 get_num_off_bits 0 4 1856 41 BitMask< uint16_t, 16 >::get_num_off_bits 0 1 219 0
65
inline int BitMask< uint16_t, 16 >::get_num_off_bits(void) const;

1134 17 get_lowest_on_bit 0 4 1856 42 BitMask< uint16_t, 16 >::get_lowest_on_bit 0 1 220 0
66
inline int BitMask< uint16_t, 16 >::get_lowest_on_bit(void) const;

1135 18 get_lowest_off_bit 0 4 1856 43 BitMask< uint16_t, 16 >::get_lowest_off_bit 0 1 221 0
67
inline int BitMask< uint16_t, 16 >::get_lowest_off_bit(void) const;

1136 18 get_highest_on_bit 0 4 1856 43 BitMask< uint16_t, 16 >::get_highest_on_bit 0 1 222 0
67
inline int BitMask< uint16_t, 16 >::get_highest_on_bit(void) const;

1137 19 get_highest_off_bit 0 4 1856 44 BitMask< uint16_t, 16 >::get_highest_off_bit 0 1 223 0
68
inline int BitMask< uint16_t, 16 >::get_highest_off_bit(void) const;

1138 29 get_next_higher_different_bit 0 4 1856 54 BitMask< uint16_t, 16 >::get_next_higher_different_bit 0 1 224 0
85
inline int BitMask< uint16_t, 16 >::get_next_higher_different_bit(int low_bit) const;

1139 15 invert_in_place 0 4 1856 40 BitMask< uint16_t, 16 >::invert_in_place 0 1 225 0
59
inline void BitMask< uint16_t, 16 >::invert_in_place(void);

1140 18 has_bits_in_common 0 4 1856 43 BitMask< uint16_t, 16 >::has_bits_in_common 0 1 226 0
100
inline bool BitMask< uint16_t, 16 >::has_bits_in_common(BitMask< uint16_t, 16 > const &other) const;

1141 5 clear 0 4 1856 30 BitMask< uint16_t, 16 >::clear 0 1 227 0
49
inline void BitMask< uint16_t, 16 >::clear(void);

1142 6 output 0 4 1856 31 BitMask< uint16_t, 16 >::output 0 1 228 0
57
void BitMask< uint16_t, 16 >::output(ostream &out) const;

1143 13 output_binary 0 4 1856 38 BitMask< uint16_t, 16 >::output_binary 0 1 229 0
86
void BitMask< uint16_t, 16 >::output_binary(ostream &out, int spaces_every = 4) const;

1144 10 output_hex 0 4 1856 35 BitMask< uint16_t, 16 >::output_hex 0 1 230 0
83
void BitMask< uint16_t, 16 >::output_hex(ostream &out, int spaces_every = 4) const;

1145 5 write 0 4 1856 30 BitMask< uint16_t, 16 >::write 0 1 231 0
78
void BitMask< uint16_t, 16 >::write(ostream &out, int indent_level = 0) const;

1146 11 operator == 0 4 1856 36 BitMask< uint16_t, 16 >::operator == 0 1 232 0
93
inline bool BitMask< uint16_t, 16 >::operator ==(BitMask< uint16_t, 16 > const &other) const;

1147 11 operator != 0 4 1856 36 BitMask< uint16_t, 16 >::operator != 0 1 233 0
93
inline bool BitMask< uint16_t, 16 >::operator !=(BitMask< uint16_t, 16 > const &other) const;

1148 10 operator < 0 4 1856 35 BitMask< uint16_t, 16 >::operator < 0 1 234 0
92
inline bool BitMask< uint16_t, 16 >::operator <(BitMask< uint16_t, 16 > const &other) const;

1149 10 compare_to 0 4 1856 35 BitMask< uint16_t, 16 >::compare_to 0 1 235 0
91
inline int BitMask< uint16_t, 16 >::compare_to(BitMask< uint16_t, 16 > const &other) const;

1150 10 operator & 0 4 1856 35 BitMask< uint16_t, 16 >::operator & 0 1 236 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator &(BitMask< uint16_t, 16 > const &other) const;

1151 10 operator | 0 4 1856 35 BitMask< uint16_t, 16 >::operator | 0 1 237 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator |(BitMask< uint16_t, 16 > const &other) const;

1152 10 operator ^ 0 4 1856 35 BitMask< uint16_t, 16 >::operator ^ 0 1 238 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator ^(BitMask< uint16_t, 16 > const &other) const;

1153 10 operator ~ 0 68 1856 35 BitMask< uint16_t, 16 >::operator ~ 0 1 239 0
79
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator ~(void) const;

1154 11 operator << 0 4 1856 36 BitMask< uint16_t, 16 >::operator << 0 1 240 0
85
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator <<(int shift) const;

1155 11 operator >> 0 4 1856 36 BitMask< uint16_t, 16 >::operator >> 0 1 241 0
85
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator >>(int shift) const;

1156 11 operator &= 0 4 1856 36 BitMask< uint16_t, 16 >::operator &= 0 1 242 0
87
inline void BitMask< uint16_t, 16 >::operator &=(BitMask< uint16_t, 16 > const &other);

1157 11 operator |= 0 4 1856 36 BitMask< uint16_t, 16 >::operator |= 0 1 243 0
87
inline void BitMask< uint16_t, 16 >::operator |=(BitMask< uint16_t, 16 > const &other);

1158 11 operator ^= 0 4 1856 36 BitMask< uint16_t, 16 >::operator ^= 0 1 244 0
87
inline void BitMask< uint16_t, 16 >::operator ^=(BitMask< uint16_t, 16 > const &other);

1159 12 operator <<= 0 4 1856 37 BitMask< uint16_t, 16 >::operator <<= 0 1 245 0
61
inline void BitMask< uint16_t, 16 >::operator <<=(int shift);

1160 12 operator >>= 0 4 1856 37 BitMask< uint16_t, 16 >::operator >>= 0 1 246 0
61
inline void BitMask< uint16_t, 16 >::operator >>=(int shift);

1161 19 flood_down_in_place 0 4 1856 44 BitMask< uint16_t, 16 >::flood_down_in_place 0 1 247 0
63
inline void BitMask< uint16_t, 16 >::flood_down_in_place(void);

1162 17 flood_up_in_place 0 4 1856 42 BitMask< uint16_t, 16 >::flood_up_in_place 0 1 248 0
61
inline void BitMask< uint16_t, 16 >::flood_up_in_place(void);

1163 15 flood_bits_down 0 4 1856 40 BitMask< uint16_t, 16 >::flood_bits_down 0 1 249 0
84
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::flood_bits_down(void) const;

1164 13 flood_bits_up 0 4 1856 38 BitMask< uint16_t, 16 >::flood_bits_up 0 1 250 0
82
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::flood_bits_up(void) const;

1165 21 keep_next_highest_bit 0 4 1856 46 BitMask< uint16_t, 16 >::keep_next_highest_bit 0 3 251 252 253 0
309
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(void) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(int index) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(BitMask< uint16_t, 16 > const &other) const;

1166 20 keep_next_lowest_bit 0 4 1856 45 BitMask< uint16_t, 16 >::keep_next_lowest_bit 0 3 254 255 256 0
306
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(void) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(BitMask< uint16_t, 16 > const &other) const;

1167 7 get_key 0 4 1856 32 BitMask< uint16_t, 16 >::get_key 0 1 257 0
56
inline int BitMask< uint16_t, 16 >::get_key(void) const;

1168 11 __nonzero__ 0 4 1856 36 BitMask< uint16_t, 16 >::__nonzero__ 0 1 258 0
61
inline bool BitMask< uint16_t, 16 >::__nonzero__(void) const;

1169 14 get_class_type 0 4 1856 39 BitMask< uint16_t, 16 >::get_class_type 0 1 259 0
64
static TypeHandle BitMask< uint16_t, 16 >::get_class_type(void);

1170 8 ~BitMask 0 4 1856 33 BitMask< uint16_t, 16 >::~BitMask 0 0 0
40
BitMask< uint16_t, 16 >::~BitMask(void);

1171 7 BitMask 0 4 1858 32 BitMask< uint32_t, 32 >::BitMask 0 3 260 261 262 0
192
inline BitMask< uint32_t, 32 >::BitMask(void);
inline BitMask< uint32_t, 32 >::BitMask(uint32_t init_value);
inline BitMask< uint32_t, 32 >::BitMask(BitMask< uint32_t, 32 > const &) = default;

1172 6 all_on 0 4 1858 31 BitMask< uint32_t, 32 >::all_on 0 1 263 0
76
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::all_on(void);

1173 7 all_off 0 4 1858 32 BitMask< uint32_t, 32 >::all_off 0 1 264 0
77
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::all_off(void);

1174 8 lower_on 0 4 1858 33 BitMask< uint32_t, 32 >::lower_on 0 1 265 0
85
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::lower_on(int on_bits);

1175 3 bit 0 4 1858 28 BitMask< uint32_t, 32 >::bit 0 1 266 0
78
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::bit(int index);

1176 5 range 0 4 1858 30 BitMask< uint32_t, 32 >::range 0 1 267 0
92
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::range(int low_bit, int size);

1177 16 has_max_num_bits 0 4 1858 41 BitMask< uint32_t, 32 >::has_max_num_bits 0 1 268 0
70
static constexpr bool BitMask< uint32_t, 32 >::has_max_num_bits(void);

1178 16 get_max_num_bits 0 4 1858 41 BitMask< uint32_t, 32 >::get_max_num_bits 0 1 269 0
69
static constexpr int BitMask< uint32_t, 32 >::get_max_num_bits(void);

1179 12 get_num_bits 0 4 1858 37 BitMask< uint32_t, 32 >::get_num_bits 0 1 270 0
65
static constexpr int BitMask< uint32_t, 32 >::get_num_bits(void);

1180 7 get_bit 0 4 1858 32 BitMask< uint32_t, 32 >::get_bit 0 1 271 0
62
inline bool BitMask< uint32_t, 32 >::get_bit(int index) const;

1181 7 set_bit 0 4 1858 32 BitMask< uint32_t, 32 >::set_bit 0 1 272 0
56
inline void BitMask< uint32_t, 32 >::set_bit(int index);

1182 9 clear_bit 0 4 1858 34 BitMask< uint32_t, 32 >::clear_bit 0 1 273 0
58
inline void BitMask< uint32_t, 32 >::clear_bit(int index);

1183 10 set_bit_to 0 4 1858 35 BitMask< uint32_t, 32 >::set_bit_to 0 1 274 0
71
inline void BitMask< uint32_t, 32 >::set_bit_to(int index, bool value);

1184 7 is_zero 0 4 1858 32 BitMask< uint32_t, 32 >::is_zero 0 1 275 0
57
inline bool BitMask< uint32_t, 32 >::is_zero(void) const;

1185 9 is_all_on 0 4 1858 34 BitMask< uint32_t, 32 >::is_all_on 0 1 276 0
59
inline bool BitMask< uint32_t, 32 >::is_all_on(void) const;

1186 7 extract 0 4 1858 32 BitMask< uint32_t, 32 >::extract 0 1 277 0
78
inline uint32_t BitMask< uint32_t, 32 >::extract(int low_bit, int size) const;

1187 5 store 0 4 1858 30 BitMask< uint32_t, 32 >::store 0 1 278 0
82
inline void BitMask< uint32_t, 32 >::store(uint32_t value, int low_bit, int size);

1188 10 has_any_of 0 4 1858 35 BitMask< uint32_t, 32 >::has_any_of 0 1 279 0
77
inline bool BitMask< uint32_t, 32 >::has_any_of(int low_bit, int size) const;

1189 10 has_all_of 0 4 1858 35 BitMask< uint32_t, 32 >::has_all_of 0 1 280 0
77
inline bool BitMask< uint32_t, 32 >::has_all_of(int low_bit, int size) const;

1190 9 set_range 0 4 1858 34 BitMask< uint32_t, 32 >::set_range 0 1 281 0
70
inline void BitMask< uint32_t, 32 >::set_range(int low_bit, int size);

1191 11 clear_range 0 4 1858 36 BitMask< uint32_t, 32 >::clear_range 0 1 282 0
72
inline void BitMask< uint32_t, 32 >::clear_range(int low_bit, int size);

1192 12 set_range_to 0 4 1858 37 BitMask< uint32_t, 32 >::set_range_to 0 1 283 0
85
inline void BitMask< uint32_t, 32 >::set_range_to(bool value, int low_bit, int size);

1193 8 get_word 0 4 1858 33 BitMask< uint32_t, 32 >::get_word 0 1 284 0
62
inline uint32_t BitMask< uint32_t, 32 >::get_word(void) const;

1194 8 set_word 0 4 1858 33 BitMask< uint32_t, 32 >::set_word 0 1 285 0
62
inline void BitMask< uint32_t, 32 >::set_word(uint32_t value);

1195 15 get_num_on_bits 0 4 1858 40 BitMask< uint32_t, 32 >::get_num_on_bits 0 1 286 0
64
inline int BitMask< uint32_t, 32 >::get_num_on_bits(void) const;

1196 16 get_num_off_bits 0 4 1858 41 BitMask< uint32_t, 32 >::get_num_off_bits 0 1 287 0
65
inline int BitMask< uint32_t, 32 >::get_num_off_bits(void) const;

1197 17 get_lowest_on_bit 0 4 1858 42 BitMask< uint32_t, 32 >::get_lowest_on_bit 0 1 288 0
66
inline int BitMask< uint32_t, 32 >::get_lowest_on_bit(void) const;

1198 18 get_lowest_off_bit 0 4 1858 43 BitMask< uint32_t, 32 >::get_lowest_off_bit 0 1 289 0
67
inline int BitMask< uint32_t, 32 >::get_lowest_off_bit(void) const;

1199 18 get_highest_on_bit 0 4 1858 43 BitMask< uint32_t, 32 >::get_highest_on_bit 0 1 290 0
67
inline int BitMask< uint32_t, 32 >::get_highest_on_bit(void) const;

1200 19 get_highest_off_bit 0 4 1858 44 BitMask< uint32_t, 32 >::get_highest_off_bit 0 1 291 0
68
inline int BitMask< uint32_t, 32 >::get_highest_off_bit(void) const;

1201 29 get_next_higher_different_bit 0 4 1858 54 BitMask< uint32_t, 32 >::get_next_higher_different_bit 0 1 292 0
85
inline int BitMask< uint32_t, 32 >::get_next_higher_different_bit(int low_bit) const;

1202 15 invert_in_place 0 4 1858 40 BitMask< uint32_t, 32 >::invert_in_place 0 1 293 0
59
inline void BitMask< uint32_t, 32 >::invert_in_place(void);

1203 18 has_bits_in_common 0 4 1858 43 BitMask< uint32_t, 32 >::has_bits_in_common 0 1 294 0
100
inline bool BitMask< uint32_t, 32 >::has_bits_in_common(BitMask< uint32_t, 32 > const &other) const;

1204 5 clear 0 4 1858 30 BitMask< uint32_t, 32 >::clear 0 1 295 0
49
inline void BitMask< uint32_t, 32 >::clear(void);

1205 6 output 0 4 1858 31 BitMask< uint32_t, 32 >::output 0 1 296 0
57
void BitMask< uint32_t, 32 >::output(ostream &out) const;

1206 13 output_binary 0 4 1858 38 BitMask< uint32_t, 32 >::output_binary 0 1 297 0
86
void BitMask< uint32_t, 32 >::output_binary(ostream &out, int spaces_every = 4) const;

1207 10 output_hex 0 4 1858 35 BitMask< uint32_t, 32 >::output_hex 0 1 298 0
83
void BitMask< uint32_t, 32 >::output_hex(ostream &out, int spaces_every = 4) const;

1208 5 write 0 4 1858 30 BitMask< uint32_t, 32 >::write 0 1 299 0
78
void BitMask< uint32_t, 32 >::write(ostream &out, int indent_level = 0) const;

1209 11 operator == 0 4 1858 36 BitMask< uint32_t, 32 >::operator == 0 1 300 0
93
inline bool BitMask< uint32_t, 32 >::operator ==(BitMask< uint32_t, 32 > const &other) const;

1210 11 operator != 0 4 1858 36 BitMask< uint32_t, 32 >::operator != 0 1 301 0
93
inline bool BitMask< uint32_t, 32 >::operator !=(BitMask< uint32_t, 32 > const &other) const;

1211 10 operator < 0 4 1858 35 BitMask< uint32_t, 32 >::operator < 0 1 302 0
92
inline bool BitMask< uint32_t, 32 >::operator <(BitMask< uint32_t, 32 > const &other) const;

1212 10 compare_to 0 4 1858 35 BitMask< uint32_t, 32 >::compare_to 0 1 303 0
91
inline int BitMask< uint32_t, 32 >::compare_to(BitMask< uint32_t, 32 > const &other) const;

1213 10 operator & 0 4 1858 35 BitMask< uint32_t, 32 >::operator & 0 1 304 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator &(BitMask< uint32_t, 32 > const &other) const;

1214 10 operator | 0 4 1858 35 BitMask< uint32_t, 32 >::operator | 0 1 305 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator |(BitMask< uint32_t, 32 > const &other) const;

1215 10 operator ^ 0 4 1858 35 BitMask< uint32_t, 32 >::operator ^ 0 1 306 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator ^(BitMask< uint32_t, 32 > const &other) const;

1216 10 operator ~ 0 68 1858 35 BitMask< uint32_t, 32 >::operator ~ 0 1 307 0
79
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator ~(void) const;

1217 11 operator << 0 4 1858 36 BitMask< uint32_t, 32 >::operator << 0 1 308 0
85
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator <<(int shift) const;

1218 11 operator >> 0 4 1858 36 BitMask< uint32_t, 32 >::operator >> 0 1 309 0
85
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator >>(int shift) const;

1219 11 operator &= 0 4 1858 36 BitMask< uint32_t, 32 >::operator &= 0 1 310 0
87
inline void BitMask< uint32_t, 32 >::operator &=(BitMask< uint32_t, 32 > const &other);

1220 11 operator |= 0 4 1858 36 BitMask< uint32_t, 32 >::operator |= 0 1 311 0
87
inline void BitMask< uint32_t, 32 >::operator |=(BitMask< uint32_t, 32 > const &other);

1221 11 operator ^= 0 4 1858 36 BitMask< uint32_t, 32 >::operator ^= 0 1 312 0
87
inline void BitMask< uint32_t, 32 >::operator ^=(BitMask< uint32_t, 32 > const &other);

1222 12 operator <<= 0 4 1858 37 BitMask< uint32_t, 32 >::operator <<= 0 1 313 0
61
inline void BitMask< uint32_t, 32 >::operator <<=(int shift);

1223 12 operator >>= 0 4 1858 37 BitMask< uint32_t, 32 >::operator >>= 0 1 314 0
61
inline void BitMask< uint32_t, 32 >::operator >>=(int shift);

1224 19 flood_down_in_place 0 4 1858 44 BitMask< uint32_t, 32 >::flood_down_in_place 0 1 315 0
63
inline void BitMask< uint32_t, 32 >::flood_down_in_place(void);

1225 17 flood_up_in_place 0 4 1858 42 BitMask< uint32_t, 32 >::flood_up_in_place 0 1 316 0
61
inline void BitMask< uint32_t, 32 >::flood_up_in_place(void);

1226 15 flood_bits_down 0 4 1858 40 BitMask< uint32_t, 32 >::flood_bits_down 0 1 317 0
84
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::flood_bits_down(void) const;

1227 13 flood_bits_up 0 4 1858 38 BitMask< uint32_t, 32 >::flood_bits_up 0 1 318 0
82
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::flood_bits_up(void) const;

1228 21 keep_next_highest_bit 0 4 1858 46 BitMask< uint32_t, 32 >::keep_next_highest_bit 0 3 319 320 321 0
309
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(void) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(int index) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(BitMask< uint32_t, 32 > const &other) const;

1229 20 keep_next_lowest_bit 0 4 1858 45 BitMask< uint32_t, 32 >::keep_next_lowest_bit 0 3 322 323 324 0
306
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(void) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(BitMask< uint32_t, 32 > const &other) const;

1230 7 get_key 0 4 1858 32 BitMask< uint32_t, 32 >::get_key 0 1 325 0
56
inline int BitMask< uint32_t, 32 >::get_key(void) const;

1231 11 __nonzero__ 0 4 1858 36 BitMask< uint32_t, 32 >::__nonzero__ 0 1 326 0
61
inline bool BitMask< uint32_t, 32 >::__nonzero__(void) const;

1232 14 get_class_type 0 4 1858 39 BitMask< uint32_t, 32 >::get_class_type 0 1 327 0
64
static TypeHandle BitMask< uint32_t, 32 >::get_class_type(void);

1233 8 ~BitMask 0 4 1858 33 BitMask< uint32_t, 32 >::~BitMask 0 0 0
40
BitMask< uint32_t, 32 >::~BitMask(void);

1234 7 BitMask 0 4 1860 32 BitMask< uint64_t, 64 >::BitMask 0 3 328 329 330 0
192
inline BitMask< uint64_t, 64 >::BitMask(void);
inline BitMask< uint64_t, 64 >::BitMask(uint64_t init_value);
inline BitMask< uint64_t, 64 >::BitMask(BitMask< uint64_t, 64 > const &) = default;

1235 6 all_on 0 4 1860 31 BitMask< uint64_t, 64 >::all_on 0 1 331 0
76
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::all_on(void);

1236 7 all_off 0 4 1860 32 BitMask< uint64_t, 64 >::all_off 0 1 332 0
77
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::all_off(void);

1237 8 lower_on 0 4 1860 33 BitMask< uint64_t, 64 >::lower_on 0 1 333 0
85
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::lower_on(int on_bits);

1238 3 bit 0 4 1860 28 BitMask< uint64_t, 64 >::bit 0 1 334 0
78
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::bit(int index);

1239 5 range 0 4 1860 30 BitMask< uint64_t, 64 >::range 0 1 335 0
92
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::range(int low_bit, int size);

1240 16 has_max_num_bits 0 4 1860 41 BitMask< uint64_t, 64 >::has_max_num_bits 0 1 336 0
70
static constexpr bool BitMask< uint64_t, 64 >::has_max_num_bits(void);

1241 16 get_max_num_bits 0 4 1860 41 BitMask< uint64_t, 64 >::get_max_num_bits 0 1 337 0
69
static constexpr int BitMask< uint64_t, 64 >::get_max_num_bits(void);

1242 12 get_num_bits 0 4 1860 37 BitMask< uint64_t, 64 >::get_num_bits 0 1 338 0
65
static constexpr int BitMask< uint64_t, 64 >::get_num_bits(void);

1243 7 get_bit 0 4 1860 32 BitMask< uint64_t, 64 >::get_bit 0 1 339 0
62
inline bool BitMask< uint64_t, 64 >::get_bit(int index) const;

1244 7 set_bit 0 4 1860 32 BitMask< uint64_t, 64 >::set_bit 0 1 340 0
56
inline void BitMask< uint64_t, 64 >::set_bit(int index);

1245 9 clear_bit 0 4 1860 34 BitMask< uint64_t, 64 >::clear_bit 0 1 341 0
58
inline void BitMask< uint64_t, 64 >::clear_bit(int index);

1246 10 set_bit_to 0 4 1860 35 BitMask< uint64_t, 64 >::set_bit_to 0 1 342 0
71
inline void BitMask< uint64_t, 64 >::set_bit_to(int index, bool value);

1247 7 is_zero 0 4 1860 32 BitMask< uint64_t, 64 >::is_zero 0 1 343 0
57
inline bool BitMask< uint64_t, 64 >::is_zero(void) const;

1248 9 is_all_on 0 4 1860 34 BitMask< uint64_t, 64 >::is_all_on 0 1 344 0
59
inline bool BitMask< uint64_t, 64 >::is_all_on(void) const;

1249 7 extract 0 4 1860 32 BitMask< uint64_t, 64 >::extract 0 1 345 0
78
inline uint64_t BitMask< uint64_t, 64 >::extract(int low_bit, int size) const;

1250 5 store 0 4 1860 30 BitMask< uint64_t, 64 >::store 0 1 346 0
82
inline void BitMask< uint64_t, 64 >::store(uint64_t value, int low_bit, int size);

1251 10 has_any_of 0 4 1860 35 BitMask< uint64_t, 64 >::has_any_of 0 1 347 0
77
inline bool BitMask< uint64_t, 64 >::has_any_of(int low_bit, int size) const;

1252 10 has_all_of 0 4 1860 35 BitMask< uint64_t, 64 >::has_all_of 0 1 348 0
77
inline bool BitMask< uint64_t, 64 >::has_all_of(int low_bit, int size) const;

1253 9 set_range 0 4 1860 34 BitMask< uint64_t, 64 >::set_range 0 1 349 0
70
inline void BitMask< uint64_t, 64 >::set_range(int low_bit, int size);

1254 11 clear_range 0 4 1860 36 BitMask< uint64_t, 64 >::clear_range 0 1 350 0
72
inline void BitMask< uint64_t, 64 >::clear_range(int low_bit, int size);

1255 12 set_range_to 0 4 1860 37 BitMask< uint64_t, 64 >::set_range_to 0 1 351 0
85
inline void BitMask< uint64_t, 64 >::set_range_to(bool value, int low_bit, int size);

1256 8 get_word 0 4 1860 33 BitMask< uint64_t, 64 >::get_word 0 1 352 0
62
inline uint64_t BitMask< uint64_t, 64 >::get_word(void) const;

1257 8 set_word 0 4 1860 33 BitMask< uint64_t, 64 >::set_word 0 1 353 0
62
inline void BitMask< uint64_t, 64 >::set_word(uint64_t value);

1258 15 get_num_on_bits 0 4 1860 40 BitMask< uint64_t, 64 >::get_num_on_bits 0 1 354 0
64
inline int BitMask< uint64_t, 64 >::get_num_on_bits(void) const;

1259 16 get_num_off_bits 0 4 1860 41 BitMask< uint64_t, 64 >::get_num_off_bits 0 1 355 0
65
inline int BitMask< uint64_t, 64 >::get_num_off_bits(void) const;

1260 17 get_lowest_on_bit 0 4 1860 42 BitMask< uint64_t, 64 >::get_lowest_on_bit 0 1 356 0
66
inline int BitMask< uint64_t, 64 >::get_lowest_on_bit(void) const;

1261 18 get_lowest_off_bit 0 4 1860 43 BitMask< uint64_t, 64 >::get_lowest_off_bit 0 1 357 0
67
inline int BitMask< uint64_t, 64 >::get_lowest_off_bit(void) const;

1262 18 get_highest_on_bit 0 4 1860 43 BitMask< uint64_t, 64 >::get_highest_on_bit 0 1 358 0
67
inline int BitMask< uint64_t, 64 >::get_highest_on_bit(void) const;

1263 19 get_highest_off_bit 0 4 1860 44 BitMask< uint64_t, 64 >::get_highest_off_bit 0 1 359 0
68
inline int BitMask< uint64_t, 64 >::get_highest_off_bit(void) const;

1264 29 get_next_higher_different_bit 0 4 1860 54 BitMask< uint64_t, 64 >::get_next_higher_different_bit 0 1 360 0
85
inline int BitMask< uint64_t, 64 >::get_next_higher_different_bit(int low_bit) const;

1265 15 invert_in_place 0 4 1860 40 BitMask< uint64_t, 64 >::invert_in_place 0 1 361 0
59
inline void BitMask< uint64_t, 64 >::invert_in_place(void);

1266 18 has_bits_in_common 0 4 1860 43 BitMask< uint64_t, 64 >::has_bits_in_common 0 1 362 0
100
inline bool BitMask< uint64_t, 64 >::has_bits_in_common(BitMask< uint64_t, 64 > const &other) const;

1267 5 clear 0 4 1860 30 BitMask< uint64_t, 64 >::clear 0 1 363 0
49
inline void BitMask< uint64_t, 64 >::clear(void);

1268 6 output 0 4 1860 31 BitMask< uint64_t, 64 >::output 0 1 364 0
57
void BitMask< uint64_t, 64 >::output(ostream &out) const;

1269 13 output_binary 0 4 1860 38 BitMask< uint64_t, 64 >::output_binary 0 1 365 0
86
void BitMask< uint64_t, 64 >::output_binary(ostream &out, int spaces_every = 4) const;

1270 10 output_hex 0 4 1860 35 BitMask< uint64_t, 64 >::output_hex 0 1 366 0
83
void BitMask< uint64_t, 64 >::output_hex(ostream &out, int spaces_every = 4) const;

1271 5 write 0 4 1860 30 BitMask< uint64_t, 64 >::write 0 1 367 0
78
void BitMask< uint64_t, 64 >::write(ostream &out, int indent_level = 0) const;

1272 11 operator == 0 4 1860 36 BitMask< uint64_t, 64 >::operator == 0 1 368 0
93
inline bool BitMask< uint64_t, 64 >::operator ==(BitMask< uint64_t, 64 > const &other) const;

1273 11 operator != 0 4 1860 36 BitMask< uint64_t, 64 >::operator != 0 1 369 0
93
inline bool BitMask< uint64_t, 64 >::operator !=(BitMask< uint64_t, 64 > const &other) const;

1274 10 operator < 0 4 1860 35 BitMask< uint64_t, 64 >::operator < 0 1 370 0
92
inline bool BitMask< uint64_t, 64 >::operator <(BitMask< uint64_t, 64 > const &other) const;

1275 10 compare_to 0 4 1860 35 BitMask< uint64_t, 64 >::compare_to 0 1 371 0
91
inline int BitMask< uint64_t, 64 >::compare_to(BitMask< uint64_t, 64 > const &other) const;

1276 10 operator & 0 4 1860 35 BitMask< uint64_t, 64 >::operator & 0 1 372 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator &(BitMask< uint64_t, 64 > const &other) const;

1277 10 operator | 0 4 1860 35 BitMask< uint64_t, 64 >::operator | 0 1 373 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator |(BitMask< uint64_t, 64 > const &other) const;

1278 10 operator ^ 0 4 1860 35 BitMask< uint64_t, 64 >::operator ^ 0 1 374 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator ^(BitMask< uint64_t, 64 > const &other) const;

1279 10 operator ~ 0 68 1860 35 BitMask< uint64_t, 64 >::operator ~ 0 1 375 0
79
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator ~(void) const;

1280 11 operator << 0 4 1860 36 BitMask< uint64_t, 64 >::operator << 0 1 376 0
85
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator <<(int shift) const;

1281 11 operator >> 0 4 1860 36 BitMask< uint64_t, 64 >::operator >> 0 1 377 0
85
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator >>(int shift) const;

1282 11 operator &= 0 4 1860 36 BitMask< uint64_t, 64 >::operator &= 0 1 378 0
87
inline void BitMask< uint64_t, 64 >::operator &=(BitMask< uint64_t, 64 > const &other);

1283 11 operator |= 0 4 1860 36 BitMask< uint64_t, 64 >::operator |= 0 1 379 0
87
inline void BitMask< uint64_t, 64 >::operator |=(BitMask< uint64_t, 64 > const &other);

1284 11 operator ^= 0 4 1860 36 BitMask< uint64_t, 64 >::operator ^= 0 1 380 0
87
inline void BitMask< uint64_t, 64 >::operator ^=(BitMask< uint64_t, 64 > const &other);

1285 12 operator <<= 0 4 1860 37 BitMask< uint64_t, 64 >::operator <<= 0 1 381 0
61
inline void BitMask< uint64_t, 64 >::operator <<=(int shift);

1286 12 operator >>= 0 4 1860 37 BitMask< uint64_t, 64 >::operator >>= 0 1 382 0
61
inline void BitMask< uint64_t, 64 >::operator >>=(int shift);

1287 19 flood_down_in_place 0 4 1860 44 BitMask< uint64_t, 64 >::flood_down_in_place 0 1 383 0
63
inline void BitMask< uint64_t, 64 >::flood_down_in_place(void);

1288 17 flood_up_in_place 0 4 1860 42 BitMask< uint64_t, 64 >::flood_up_in_place 0 1 384 0
61
inline void BitMask< uint64_t, 64 >::flood_up_in_place(void);

1289 15 flood_bits_down 0 4 1860 40 BitMask< uint64_t, 64 >::flood_bits_down 0 1 385 0
84
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::flood_bits_down(void) const;

1290 13 flood_bits_up 0 4 1860 38 BitMask< uint64_t, 64 >::flood_bits_up 0 1 386 0
82
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::flood_bits_up(void) const;

1291 21 keep_next_highest_bit 0 4 1860 46 BitMask< uint64_t, 64 >::keep_next_highest_bit 0 3 387 388 389 0
309
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(void) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(int index) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(BitMask< uint64_t, 64 > const &other) const;

1292 20 keep_next_lowest_bit 0 4 1860 45 BitMask< uint64_t, 64 >::keep_next_lowest_bit 0 3 390 391 392 0
306
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(void) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(BitMask< uint64_t, 64 > const &other) const;

1293 7 get_key 0 4 1860 32 BitMask< uint64_t, 64 >::get_key 0 1 393 0
56
inline int BitMask< uint64_t, 64 >::get_key(void) const;

1294 11 __nonzero__ 0 4 1860 36 BitMask< uint64_t, 64 >::__nonzero__ 0 1 394 0
61
inline bool BitMask< uint64_t, 64 >::__nonzero__(void) const;

1295 14 get_class_type 0 4 1860 39 BitMask< uint64_t, 64 >::get_class_type 0 1 395 0
64
static TypeHandle BitMask< uint64_t, 64 >::get_class_type(void);

1296 8 ~BitMask 0 4 1860 33 BitMask< uint64_t, 64 >::~BitMask 0 0 0
40
BitMask< uint64_t, 64 >::~BitMask(void);

1297 8 BitArray 0 4 1863 18 BitArray::BitArray 0 4 396 397 398 399 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
190
inline BitArray::BitArray(void);
inline BitArray::BitArray(BitArray::WordType init_value);
BitArray::BitArray(SparseArray const &from);
inline BitArray::BitArray(BitArray const &) = default;

1298 6 all_on 0 4 1863 16 BitArray::all_on 0 1 400 69
/**
 * Returns a BitArray with an infinite array of bits, all on.
 */
46
static inline BitArray BitArray::all_on(void);

1299 7 all_off 0 4 1863 17 BitArray::all_off 0 1 401 53
/**
 * Returns a BitArray whose bits are all off.
 */
47
static inline BitArray BitArray::all_off(void);

1300 8 lower_on 0 4 1863 18 BitArray::lower_on 0 1 402 62
/**
 * Returns a BitArray whose lower on_bits bits are on.
 */
55
static inline BitArray BitArray::lower_on(int on_bits);

1301 3 bit 0 4 1863 13 BitArray::bit 0 1 403 61
/**
 * Returns a BitArray with only the indicated bit on.
 */
48
static inline BitArray BitArray::bit(int index);

1302 5 range 0 4 1863 15 BitArray::range 0 1 404 76
/**
 * Returns a BitArray whose size bits, beginning at low_bit, are on.
 */
62
static inline BitArray BitArray::range(int low_bit, int size);

1303 16 has_max_num_bits 0 4 1863 26 BitArray::has_max_num_bits 0 1 405 387
/**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The BitArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or BitArray interchangeably.
 */
55
static constexpr bool BitArray::has_max_num_bits(void);

1304 16 get_max_num_bits 0 4 1863 26 BitArray::get_max_num_bits 0 1 406 422
/**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The BitArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or BitArray interchangeably.
 */
54
static constexpr int BitArray::get_max_num_bits(void);

1305 21 get_num_bits_per_word 0 4 1863 31 BitArray::get_num_bits_per_word 0 1 407 203
/**
 * Returns the number of bits stored per word internally.  This is of interest
 * only in that it limits the maximum number of bits that may be queried or
 * set at once by extract() and store().
 */
59
static constexpr int BitArray::get_num_bits_per_word(void);

1306 12 get_num_bits 0 4 1863 22 BitArray::get_num_bits 0 1 408 300
/**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */
54
inline std::size_t BitArray::get_num_bits(void) const;

1307 7 get_bit 0 4 1863 17 BitArray::get_bit 0 1 409 191
/**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */
47
inline bool BitArray::get_bit(int index) const;

1308 7 set_bit 0 4 1863 17 BitArray::set_bit 0 1 410 97
/**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
41
inline void BitArray::set_bit(int index);

1309 9 clear_bit 0 4 1863 19 BitArray::clear_bit 0 1 411 98
/**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
43
inline void BitArray::clear_bit(int index);

1310 10 set_bit_to 0 4 1863 20 BitArray::set_bit_to 0 1 412 84
/**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */
56
inline void BitArray::set_bit_to(int index, bool value);

1311 16 get_highest_bits 0 4 1863 26 BitArray::get_highest_bits 0 1 413 118
/**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */
51
inline bool BitArray::get_highest_bits(void) const;

1312 7 is_zero 0 4 1863 17 BitArray::is_zero 0 1 414 71
/**
 * Returns true if the entire bitmask is zero, false otherwise.
 */
35
bool BitArray::is_zero(void) const;

1313 9 is_all_on 0 4 1863 19 BitArray::is_all_on 0 1 415 70
/**
 * Returns true if the entire bitmask is one, false otherwise.
 */
37
bool BitArray::is_all_on(void) const;

1314 7 extract 0 4 1863 17 BitArray::extract 0 1 416 187
/**
 * Returns a word that represents only the indicated range of bits within this
 * BitArray, shifted to the least-significant position.  size must be <=
 * get_num_bits_per_word().
 */
73
inline BitArray::WordType BitArray::extract(int low_bit, int size) const;

1315 5 store 0 4 1863 15 BitArray::store 0 1 417 92
/**
 * Stores the indicated word into the indicated range of bits with this
 * BitArray.
 */
77
inline void BitArray::store(BitArray::WordType value, int low_bit, int size);

1316 10 has_any_of 0 4 1863 20 BitArray::has_any_of 0 1 418 82
/**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */
55
bool BitArray::has_any_of(int low_bit, int size) const;

1317 10 has_all_of 0 4 1863 20 BitArray::has_all_of 0 1 419 84
/**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */
55
bool BitArray::has_all_of(int low_bit, int size) const;

1318 9 set_range 0 4 1863 19 BitArray::set_range 0 1 420 47
/**
 * Sets the indicated range of bits on.
 */
48
void BitArray::set_range(int low_bit, int size);

1319 11 clear_range 0 4 1863 21 BitArray::clear_range 0 1 421 48
/**
 * Sets the indicated range of bits off.
 */
50
void BitArray::clear_range(int low_bit, int size);

1320 12 set_range_to 0 4 1863 22 BitArray::set_range_to 0 1 422 64
/**
 * Sets the indicated range of bits to either on or off.
 */
70
inline void BitArray::set_range_to(bool value, int low_bit, int size);

1321 15 get_num_on_bits 0 4 1863 25 BitArray::get_num_on_bits 0 1 423 127
/**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */
42
int BitArray::get_num_on_bits(void) const;

1322 16 get_num_off_bits 0 4 1863 26 BitArray::get_num_off_bits 0 1 424 127
/**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */
43
int BitArray::get_num_off_bits(void) const;

1323 17 get_lowest_on_bit 0 4 1863 27 BitArray::get_lowest_on_bit 0 1 425 101
/**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits.
 */
44
int BitArray::get_lowest_on_bit(void) const;

1324 18 get_lowest_off_bit 0 4 1863 28 BitArray::get_lowest_off_bit 0 1 426 101
/**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits.
 */
45
int BitArray::get_lowest_off_bit(void) const;

1325 18 get_highest_on_bit 0 4 1863 28 BitArray::get_highest_on_bit 0 1 427 143
/**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */
45
int BitArray::get_highest_on_bit(void) const;

1326 19 get_highest_off_bit 0 4 1863 29 BitArray::get_highest_off_bit 0 1 428 143
/**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */
46
int BitArray::get_highest_off_bit(void) const;

1327 29 get_next_higher_different_bit 0 4 1863 39 BitArray::get_next_higher_different_bit 0 1 429 287
/**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */
63
int BitArray::get_next_higher_different_bit(int low_bit) const;

1328 13 get_num_words 0 4 1863 23 BitArray::get_num_words 0 1 430 75
/**
 * Returns the number of possibly-unique words stored in the array.
 */
55
inline std::size_t BitArray::get_num_words(void) const;

1329 8 get_word 0 4 1863 18 BitArray::get_word 0 1 431 175
/**
 * Returns the nth word in the array.  It is valid for n to be greater than
 * get_num_words(), but the return value beyond get_num_words() will always be
 * the same.
 */
66
inline BitArray::MaskType BitArray::get_word(std::size_t n) const;

1330 8 set_word 0 4 1863 18 BitArray::set_word 0 1 432 113
/**
 * Replaces the nth word in the array.  If n >= get_num_words(), this
 * automatically extends the array.
 */
72
inline void BitArray::set_word(std::size_t n, BitArray::WordType value);

1331 15 invert_in_place 0 4 1863 25 BitArray::invert_in_place 0 1 433 90
/**
 * Inverts all the bits in the BitArray.  This is equivalent to array =
 * ~array.
 */
37
void BitArray::invert_in_place(void);

1332 18 has_bits_in_common 0 4 1863 28 BitArray::has_bits_in_common 0 1 434 178
/**
 * Returns true if this BitArray has any "one" bits in common with the other
 * one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */
63
bool BitArray::has_bits_in_common(BitArray const &other) const;

1333 5 clear 0 4 1863 15 BitArray::clear 0 1 435 49
/**
 * Sets all the bits in the BitArray off.
 */
34
inline void BitArray::clear(void);

1334 6 output 0 4 1863 16 BitArray::output 0 1 436 193
/**
 * Writes the BitArray out as a hex number.  For a BitArray, this is always
 * the same as output_hex(); it's too confusing for the output format to
 * change back and forth at runtime.
 */
42
void BitArray::output(ostream &out) const;

1335 13 output_binary 0 4 1863 23 BitArray::output_binary 0 1 437 83
/**
 * Writes the BitArray out as a binary number, with spaces every four bits.
 */
71
void BitArray::output_binary(ostream &out, int spaces_every = 4) const;

1336 10 output_hex 0 4 1863 20 BitArray::output_hex 0 1 438 93
/**
 * Writes the BitArray out as a hexadecimal number, with spaces every four
 * digits.
 */
68
void BitArray::output_hex(ostream &out, int spaces_every = 4) const;

1337 5 write 0 4 1863 15 BitArray::write 0 1 439 99
/**
 * Writes the BitArray out as a binary or a hex number, according to the
 * number of bits.
 */
63
void BitArray::write(ostream &out, int indent_level = 0) const;

1338 11 operator == 0 4 1863 21 BitArray::operator == 0 1 440 0
63
inline bool BitArray::operator ==(BitArray const &other) const;

1339 11 operator != 0 4 1863 21 BitArray::operator != 0 1 441 0
63
inline bool BitArray::operator !=(BitArray const &other) const;

1340 10 operator < 0 4 1863 20 BitArray::operator < 0 1 442 0
62
inline bool BitArray::operator <(BitArray const &other) const;

1341 10 compare_to 0 4 1863 20 BitArray::compare_to 0 1 443 233
/**
 * Returns a number less than zero if this BitArray sorts before the indicated
 * other BitArray, greater than zero if it sorts after, or 0 if they are
 * equivalent.  This is based on the same ordering defined by operator <.
 */
54
int BitArray::compare_to(BitArray const &other) const;

1342 10 operator & 0 4 1863 20 BitArray::operator & 0 1 444 0
66
inline BitArray BitArray::operator &(BitArray const &other) const;

1343 10 operator | 0 4 1863 20 BitArray::operator | 0 1 445 0
66
inline BitArray BitArray::operator |(BitArray const &other) const;

1344 10 operator ^ 0 4 1863 20 BitArray::operator ^ 0 1 446 0
66
inline BitArray BitArray::operator ^(BitArray const &other) const;

1345 10 operator ~ 0 68 1863 20 BitArray::operator ~ 0 1 447 0
49
inline BitArray BitArray::operator ~(void) const;

1346 11 operator << 0 4 1863 21 BitArray::operator << 0 1 448 0
55
inline BitArray BitArray::operator <<(int shift) const;

1347 11 operator >> 0 4 1863 21 BitArray::operator >> 0 1 449 0
55
inline BitArray BitArray::operator >>(int shift) const;

1348 11 operator &= 0 4 1863 21 BitArray::operator &= 0 1 450 0
50
void BitArray::operator &=(BitArray const &other);

1349 11 operator |= 0 4 1863 21 BitArray::operator |= 0 1 451 0
50
void BitArray::operator |=(BitArray const &other);

1350 11 operator ^= 0 4 1863 21 BitArray::operator ^= 0 1 452 0
50
void BitArray::operator ^=(BitArray const &other);

1351 12 operator <<= 0 4 1863 22 BitArray::operator <<= 0 1 453 0
39
void BitArray::operator <<=(int shift);

1352 12 operator >>= 0 4 1863 22 BitArray::operator >>= 0 1 454 0
39
void BitArray::operator >>=(int shift);

1353 14 get_class_type 0 4 1863 24 BitArray::get_class_type 0 1 455 0
49
static TypeHandle BitArray::get_class_type(void);

1354 9 ~BitArray 0 4 1863 19 BitArray::~BitArray 0 0 0
26
BitArray::~BitArray(void);

1355 12 ButtonHandle 0 4 1865 26 ButtonHandle::ButtonHandle 0 4 456 457 458 459 758
// The default constructor must do nothing, because we can't guarantee
// ordering of static initializers.  If the constructor tried to initialize
// its value, it  might happen after the value had already been set
// previously by another static initializer!

/**
 * Constructs a ButtonHandle with the corresponding index number, which may
 * have been returned by an earlier call to ButtonHandle::get_index().
 */

/**
 * Constructs a ButtonHandle with the corresponding name, which is looked up
 * in the ButtonRegistry.  This exists for the purpose of being able to
 * automatically coerce a string into a ButtonHandle; for most purposes, you
 * should use either the static KeyboardButton/MouseButton getters or
 * ButtonRegistry::register_button().
 */
219
inline ButtonHandle::ButtonHandle(void) = default;
constexpr ButtonHandle::ButtonHandle(int index);
ButtonHandle::ButtonHandle(std::string const &name);
inline ButtonHandle::ButtonHandle(ButtonHandle const &) = default;

1356 11 operator == 0 4 1865 25 ButtonHandle::operator == 0 1 460 0
71
inline bool ButtonHandle::operator ==(ButtonHandle const &other) const;

1357 11 operator != 0 4 1865 25 ButtonHandle::operator != 0 1 461 0
71
inline bool ButtonHandle::operator !=(ButtonHandle const &other) const;

1358 10 operator < 0 4 1865 24 ButtonHandle::operator < 0 1 462 0
70
inline bool ButtonHandle::operator <(ButtonHandle const &other) const;

1359 11 operator <= 0 4 1865 25 ButtonHandle::operator <= 0 1 463 0
71
inline bool ButtonHandle::operator <=(ButtonHandle const &other) const;

1360 10 operator > 0 4 1865 24 ButtonHandle::operator > 0 1 464 0
70
inline bool ButtonHandle::operator >(ButtonHandle const &other) const;

1361 11 operator >= 0 4 1865 25 ButtonHandle::operator >= 0 1 465 0
71
inline bool ButtonHandle::operator >=(ButtonHandle const &other) const;

1362 10 compare_to 0 4 1865 24 ButtonHandle::compare_to 0 1 466 209
/**
 * Sorts ButtonHandles arbitrarily (according to <, >, etc.).  Returns a
 * number less than 0 if this type sorts before the other one, greater than
 * zero if it sorts after, 0 if they are equivalent.
 */
69
inline int ButtonHandle::compare_to(ButtonHandle const &other) const;

1363 8 get_hash 0 4 1865 22 ButtonHandle::get_hash 0 1 467 54
/**
 * Returns a hash code suitable for phash_map.
 */
54
inline std::size_t ButtonHandle::get_hash(void) const;

1364 8 get_name 0 4 1865 22 ButtonHandle::get_name 0 1 468 42
/**
 * Returns the name of the button.
 */
47
std::string ButtonHandle::get_name(void) const;

1365 20 has_ascii_equivalent 0 4 1865 34 ButtonHandle::has_ascii_equivalent 0 1 469 121
/**
 * Returns true if the button was created with an ASCII equivalent code (e.g.
 * for a standard keyboard button).
 */
59
inline bool ButtonHandle::has_ascii_equivalent(void) const;

1366 20 get_ascii_equivalent 0 4 1865 34 ButtonHandle::get_ascii_equivalent 0 1 470 109
/**
 * Returns the character code associated with the button, or '\0' if no ASCII
 * code was associated.
 */
59
inline char ButtonHandle::get_ascii_equivalent(void) const;

1367 9 get_alias 0 4 1865 23 ButtonHandle::get_alias 0 1 471 373
/**
 * Returns the alias (alternate name) associated with the button, if any, or
 * ButtonHandle::none() if the button has no alias.
 *
 * Each button is allowed to have one alias, and multiple different buttons
 * can refer to the same alias.  The alias should be the more general name for
 * the button, for instance, shift is an alias for lshift, but not vice-versa.
 */
49
ButtonHandle ButtonHandle::get_alias(void) const;

1368 7 matches 0 4 1865 21 ButtonHandle::matches 0 1 472 263
/**
 * Returns true if this ButtonHandle is the same as the other one, or if the
 * other one is an alias for this one.  (Does not return true if this button
 * is an alias for the other one, however.)
 *
 * This is a more general comparison than operator ==.
 */
67
inline bool ButtonHandle::matches(ButtonHandle const &other) const;

1369 9 get_index 0 4 1865 23 ButtonHandle::get_index 0 1 473 363
/**
 * Returns the integer index associated with this ButtonHandle.  Each
 * different ButtonHandle will have a different index.  However, you probably
 * shouldn't be using this method; you should just treat the ButtonHandles as
 * opaque classes.  This is provided for the convenience of non-C++ scripting
 * languages to build a hashtable of ButtonHandles.
 */
50
constexpr int ButtonHandle::get_index(void) const;

1370 6 output 0 4 1865 20 ButtonHandle::output 0 1 474 10
/**
 *
 */
53
inline void ButtonHandle::output(ostream &out) const;

1371 4 none 0 4 1865 18 ButtonHandle::none 0 1 475 92
/**
 * Returns a special zero-valued ButtonHandle that is used to indicate no
 * button.
 */
52
static inline ButtonHandle ButtonHandle::none(void);

1372 22 operator typecast bool 0 132 1865 36 ButtonHandle::operator typecast bool 0 1 477 0
61
inline bool ButtonHandle::operator typecast bool(void) const;

1373 14 get_class_type 0 4 1865 28 ButtonHandle::get_class_type 0 1 476 0
53
static TypeHandle ButtonHandle::get_class_type(void);

1374 13 ~ButtonHandle 0 4 1865 27 ButtonHandle::~ButtonHandle 0 0 0
34
ButtonHandle::~ButtonHandle(void);

1375 10 get_button 0 4 1869 26 ButtonRegistry::get_button 0 1 479 150
/**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, registers a new one and returns it.
 */
65
ButtonHandle ButtonRegistry::get_button(std::string const &name);

1376 11 find_button 0 4 1869 27 ButtonRegistry::find_button 0 1 480 144
/**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, returns ButtonHandle::none().
 */
66
ButtonHandle ButtonRegistry::find_button(std::string const &name);

1377 17 find_ascii_button 0 4 1869 33 ButtonRegistry::find_ascii_button 0 1 481 169
/**
 * Finds a ButtonHandle in the registry matching the indicated ASCII
 * equivalent character.  If there is no such ButtonHandle, returns
 * ButtonHandle::none().
 */
76
ButtonHandle ButtonRegistry::find_ascii_button(char ascii_equivalent) const;

1378 5 write 0 4 1869 21 ButtonRegistry::write 0 1 482 10
/**
 *
 */
47
void ButtonRegistry::write(ostream &out) const;

1379 3 ptr 0 4 1869 19 ButtonRegistry::ptr 0 1 483 134
// ptr() returns the pointer to the global ButtonRegistry object.

/**
 * Returns the pointer to the global ButtonRegistry object.
 */
56
static inline ButtonRegistry *ButtonRegistry::ptr(void);

1380 14 ButtonRegistry 0 4 1869 30 ButtonRegistry::ButtonRegistry 0 1 478 10
/**
 *
 */
72
inline ButtonRegistry::ButtonRegistry(ButtonRegistry const &) = default;

1381 15 ~ButtonRegistry 0 4 1869 31 ButtonRegistry::~ButtonRegistry 0 0 0
38
ButtonRegistry::~ButtonRegistry(void);

1382 15 get_num_buttons 0 4 1870 26 ButtonMap::get_num_buttons 0 1 486 76
/**
 * Returns the number of buttons that this button mapping specifies.
 */
58
inline std::size_t ButtonMap::get_num_buttons(void) const;

1383 14 get_raw_button 0 4 1870 25 ButtonMap::get_raw_button 0 1 487 76
/**
 * Returns the underlying raw button associated with the nth button.
 */
67
inline ButtonHandle ButtonMap::get_raw_button(std::size_t i) const;

1384 17 get_mapped_button 0 4 1870 28 ButtonMap::get_mapped_button 0 3 488 489 490 437
/**
 * Returns the nth mapped button, meaning the button that the nth raw button
 * is mapped to.
 */

/**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */

/**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */
229
inline ButtonHandle ButtonMap::get_mapped_button(std::size_t i) const;
inline ButtonHandle ButtonMap::get_mapped_button(ButtonHandle raw) const;
inline ButtonHandle ButtonMap::get_mapped_button(std::string const &raw_name) const;

1385 23 get_mapped_button_label 0 4 1870 34 ButtonMap::get_mapped_button_label 0 3 491 492 493 837
/**
 * Returns the label associated with the nth mapped button, meaning the button
 * that the nth raw button is mapped to.
 */

/**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */

/**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */
265
inline std::string const &ButtonMap::get_mapped_button_label(std::size_t i) const;
inline std::string const &ButtonMap::get_mapped_button_label(ButtonHandle raw) const;
inline std::string const &ButtonMap::get_mapped_button_label(std::string const &raw_name) const;

1386 6 output 0 4 1870 17 ButtonMap::output 0 1 494 10
/**
 *
 */
43
void ButtonMap::output(ostream &out) const;

1387 5 write 0 4 1870 16 ButtonMap::write 0 1 495 10
/**
 *
 */
64
void ButtonMap::write(ostream &out, int indent_level = 0) const;

1388 14 get_class_type 0 4 1870 25 ButtonMap::get_class_type 0 1 496 0
50
static TypeHandle ButtonMap::get_class_type(void);

1389 9 ButtonMap 0 4 1870 20 ButtonMap::ButtonMap 0 2 484 485 0
102
inline ButtonMap::ButtonMap(void) = default;
inline ButtonMap::ButtonMap(ButtonMap const &) = default;

1390 10 ~ButtonMap 0 4 1870 21 ButtonMap::~ButtonMap 0 0 0
28
ButtonMap::~ButtonMap(void);

1391 6 output 0 6 1872 22 CallbackObject::output 0 1 498 10
/**
 *
 */
56
virtual void CallbackObject::output(ostream &out) const;

1392 4 make 0 4 1872 20 CallbackObject::make 0 1 499 0
76
static PointerTo< CallbackObject > CallbackObject::make(PyObject *function);

1393 14 get_class_type 0 4 1872 30 CallbackObject::get_class_type 0 1 500 0
55
static TypeHandle CallbackObject::get_class_type(void);

1394 14 CallbackObject 0 4 1872 30 CallbackObject::CallbackObject 0 1 497 10
/**
 *
 */
72
inline CallbackObject::CallbackObject(CallbackObject const &) = default;

1395 15 ~CallbackObject 0 4 1872 31 CallbackObject::~CallbackObject 0 0 0
38
CallbackObject::~CallbackObject(void);

1396 19 get_cache_ref_count 0 4 1873 54 CachedTypedWritableReferenceCount::get_cache_ref_count 0 1 501 47
/**
 * Returns the current reference count.
 */
78
inline int CachedTypedWritableReferenceCount::get_cache_ref_count(void) const;

1397 9 cache_ref 0 4 1873 44 CachedTypedWritableReferenceCount::cache_ref 0 1 502 108
/**
 * Explicitly increments the cache reference count and the normal reference
 * count simultaneously.
 */
69
inline void CachedTypedWritableReferenceCount::cache_ref(void) const;

1398 11 cache_unref 0 4 1873 46 CachedTypedWritableReferenceCount::cache_unref 0 1 503 202
/**
 * Explicitly decrements the cache reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
71
inline bool CachedTypedWritableReferenceCount::cache_unref(void) const;

1399 24 test_ref_count_integrity 0 4 1873 59 CachedTypedWritableReferenceCount::test_ref_count_integrity 0 1 504 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
84
inline bool CachedTypedWritableReferenceCount::test_ref_count_integrity(void) const;

1400 14 get_class_type 0 4 1873 49 CachedTypedWritableReferenceCount::get_class_type 0 1 505 0
74
static TypeHandle CachedTypedWritableReferenceCount::get_class_type(void);

1401 6 output 0 6 1874 20 CallbackData::output 0 1 506 10
/**
 *
 */
54
virtual void CallbackData::output(ostream &out) const;

1402 6 upcall 0 6 1874 20 CallbackData::upcall 0 1 507 159
/**
 * You should make this call during the callback if you want to continue the
 * normal function that would have been done in the absence of a callback.
 */
40
virtual void CallbackData::upcall(void);

1403 14 get_class_type 0 4 1874 28 CallbackData::get_class_type 0 1 508 0
53
static TypeHandle CallbackData::get_class_type(void);

1404 13 ~CallbackData 0 4 1874 27 CallbackData::~CallbackData 0 0 0
34
CallbackData::~CallbackData(void);

1405 20 PythonCallbackObject 0 4 1875 42 PythonCallbackObject::PythonCallbackObject 0 2 509 510 10
/**
 *
 */
177
PythonCallbackObject::PythonCallbackObject(PyObject *function = (& ::_Py_NoneStruct));
inline PythonCallbackObject::PythonCallbackObject(PythonCallbackObject const &) = default;

1406 12 operator new 0 4 1875 34 PythonCallbackObject::operator new 0 1 511 0
144
inline void *PythonCallbackObject::operator new(std::size_t size);
inline void *PythonCallbackObject::operator new(std::size_t size, void *ptr);

1407 15 operator delete 0 4 1875 37 PythonCallbackObject::operator delete 0 0 0
128
inline void PythonCallbackObject::operator delete(void *ptr);
inline void PythonCallbackObject::operator delete(void *, void *);

1408 12 validate_ptr 0 4 1875 34 PythonCallbackObject::validate_ptr 0 0 0
71
static inline bool PythonCallbackObject::validate_ptr(void const *ptr);

1409 12 set_function 0 4 1875 34 PythonCallbackObject::set_function 0 1 512 126
/**
 * Replaces the function that is called for the callback.  runs.  The
 * parameter should be a Python callable object.
 */
60
void PythonCallbackObject::set_function(PyObject *function);

1410 12 get_function 0 4 1875 34 PythonCallbackObject::get_function 0 1 513 64
/**
 * Returns the function that is called for the callback.
 */
51
PyObject *PythonCallbackObject::get_function(void);

1411 14 get_class_type 0 4 1875 36 PythonCallbackObject::get_class_type 0 1 514 0
61
static TypeHandle PythonCallbackObject::get_class_type(void);

1412 7 TimeVal 0 4 1876 16 TimeVal::TimeVal 0 1 515 10
/**
 *
 */
30
inline TimeVal::TimeVal(void);

1413 7 get_sec 0 4 1876 16 TimeVal::get_sec 0 1 516 10
/**
 *
 */
42
inline ulong TimeVal::get_sec(void) const;

1414 8 get_usec 0 4 1876 17 TimeVal::get_usec 0 1 517 10
/**
 *
 */
43
inline ulong TimeVal::get_usec(void) const;

1415 6 get_tv 0 20 1876 15 TimeVal::get_tv 0 0 32
getter for ulong TimeVal::tv[2];
35
ulong *TimeVal::get_tv(void) const;

1416 6 set_tv 0 36 1876 15 TimeVal::set_tv 0 0 32
setter for ulong TimeVal::tv[2];
37
void TimeVal::set_tv(ulong value[2]);

1417 8 ~TimeVal 0 4 1876 17 TimeVal::~TimeVal 0 0 0
24
TimeVal::~TimeVal(void);

1418 11 ClockObject 0 4 1880 24 ClockObject::ClockObject 0 2 518 519 22
/**
 *
 */

/**
 *
 */
82
ClockObject::ClockObject(void);
ClockObject::ClockObject(ClockObject const &copy);

1419 8 set_mode 0 4 1880 21 ClockObject::set_mode 0 1 520 1841
/**
 * Changes the mode of the clock.  Normally, the clock is in mode M_normal.
 * In this mode, each call to tick() will set the value returned by
 * get_frame_time() to the current real time; thus, the clock simply reports
 * time advancing.
 *
 * Other possible modes:
 *
 * M_non_real_time - the clock ignores real time completely; at each call to
 * tick(), it pretends that exactly dt seconds have elapsed since the last
 * call to tick().  You may set the value of dt with set_dt() or
 * set_frame_rate().
 *
 * M_limited - the clock will run as fast as it can, as in M_normal, but will
 * not run faster than the rate specified by set_frame_rate().  If the
 * application would run faster than this rate, the clock will slow down the
 * application.
 *
 * M_integer - the clock will run as fast as it can, but the rate will be
 * constrained to be an integer multiple or divisor of the rate specified by
 * set_frame_rate().  The clock will slow down the application a bit to
 * guarantee this.
 *
 * M_integer_limited - a combination of M_limited and M_integer; the clock
 * will not run faster than set_frame_rate(), and if it runs slower, it will
 * run at a integer divisor of that rate.
 *
 * M_forced - the clock forces the application to run at the rate specified by
 * set_frame_rate().  If the application would run faster than this rate, the
 * clock will slow down the application; if the application would run slower
 * than this rate, the clock slows down time so that the application believes
 * it is running at the given rate.
 *
 * M_degrade - the clock runs at real time, but the application is slowed down
 * by a set factor of its frame rate, specified by set_degrade_factor().
 *
 * M_slave - the clock does not advance, but relies on the user to call
 * set_frame_time() and/or set_frame_count() each frame.
 */
51
void ClockObject::set_mode(ClockObject::Mode mode);

1420 8 get_mode 0 4 1880 21 ClockObject::get_mode 0 1 521 66
/**
 * Returns the current mode of the clock.  See set_mode().
 */
59
inline ClockObject::Mode ClockObject::get_mode(void) const;

1421 14 get_frame_time 0 4 1880 27 ClockObject::get_frame_time 0 1 522 350
/**
 * Returns the time in seconds as of the last time tick() was called
 * (typically, this will be as of the start of the current frame).
 *
 * This is generally the kind of time you want to ask for in most rendering
 * and animation contexts, since it's important that all of the animation for
 * a given frame remains in sync with each other.
 */
105
inline double ClockObject::get_frame_time(Thread *current_thread = ::Thread::get_current_thread()) const;

1422 13 get_real_time 0 4 1880 26 ClockObject::get_real_time 0 1 523 434
/**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.  This is useful for doing real timing
 * measurements, e.g.  for performance statistics.
 *
 * This returns the most precise timer we have for short time intervals, but
 * it may tend to drift over the long haul.  If more accurate timekeeping is
 * needed over a long period of time, use get_long_time() instead.
 */
53
inline double ClockObject::get_real_time(void) const;

1423 13 get_long_time 0 4 1880 26 ClockObject::get_long_time 0 1 524 440
/**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.
 *
 * This is similar to get_real_time(), except that it uses the most accurate
 * counter we have over a long period of time, and so it is less likely to
 * drift.  However, it may not be very precise for measuring short intervals.
 * On Windows, for instace, this is only accurate to within about 55
 * milliseconds.
 */
53
inline double ClockObject::get_long_time(void) const;

1424 5 reset 0 4 1880 18 ClockObject::reset 0 1 525 75
/**
 * Simultaneously resets both the time and the frame count to zero.
 */
37
inline void ClockObject::reset(void);

1425 13 set_real_time 0 4 1880 26 ClockObject::set_real_time 0 1 526 316
/**
 * Resets the clock to the indicated time.  This changes only the real time of
 * the clock as reported by get_real_time(), but does not immediately change
 * the time reported by get_frame_time()--that will change after the next call
 * to tick().  Also see reset(), set_frame_time(), and set_frame_count().
 */
45
void ClockObject::set_real_time(double time);

1426 14 set_frame_time 0 4 1880 27 ClockObject::set_frame_time 0 1 527 215
/**
 * Changes the time as reported for the current frame to the indicated time.
 * Normally, the way to adjust the frame time is via tick(); this function is
 * provided only for occasional special adjustments.
 */
103
void ClockObject::set_frame_time(double time, Thread *current_thread = ::Thread::get_current_thread());

1427 15 set_frame_count 0 4 1880 28 ClockObject::set_frame_count 0 1 528 132
/**
 * Resets the number of frames counted to the indicated number.  Also see
 * reset(), set_real_time(), and set_frame_time().
 */
108
void ClockObject::set_frame_count(int frame_count, Thread *current_thread = ::Thread::get_current_thread());

1428 15 get_frame_count 0 4 1880 28 ClockObject::get_frame_count 0 1 529 195
/**
 * Returns the number of times tick() has been called since the ClockObject
 * was created, or since it was last reset.  This is generally the number of
 * frames that have been rendered.
 */
103
inline int ClockObject::get_frame_count(Thread *current_thread = ::Thread::get_current_thread()) const;

1429 18 get_net_frame_rate 0 4 1880 31 ClockObject::get_net_frame_rate 0 1 530 245
/**
 * Returns the average frame rate since the last reset.  This is simply the
 * total number of frames divided by the total elapsed time.  This reports the
 * virtual frame rate if the clock is in (or has been in) M_non_real_time
 * mode.
 */
109
inline double ClockObject::get_net_frame_rate(Thread *current_thread = ::Thread::get_current_thread()) const;

1430 6 get_dt 0 4 1880 19 ClockObject::get_dt 0 1 531 130
/**
 * Returns the elapsed time for the previous frame: the number of seconds
 * elapsed between the last two calls to tick().
 */
97
inline double ClockObject::get_dt(Thread *current_thread = ::Thread::get_current_thread()) const;

1431 6 set_dt 0 4 1880 19 ClockObject::set_dt 0 1 532 291
/**
 * In non-real-time mode, sets the number of seconds that should appear to
 * elapse between frames.  In forced mode or limited mode, sets our target dt.
 * In normal mode, this has no effect.
 *
 * Also see set_frame_rate(), which is a different way to specify the same
 * quantity.
 */
36
void ClockObject::set_dt(double dt);

1432 14 set_frame_rate 0 4 1880 27 ClockObject::set_frame_rate 0 1 533 291
/**
 * In non-real-time mode, sets the number of frames per second that we should
 * appear to be running.  In forced mode or limited mode, sets our target
 * frame rate.  In normal mode, this has no effect.
 *
 * Also see set_dt(), which is a different way to specify the same quantity.
 */
52
void ClockObject::set_frame_rate(double frame_rate);

1433 10 get_max_dt 0 4 1880 23 ClockObject::get_max_dt 0 1 534 106
/**
 * Returns the current maximum allowable time elapsed between any two frames.
 * See set_max_dt().
 */
50
inline double ClockObject::get_max_dt(void) const;

1434 10 set_max_dt 0 4 1880 23 ClockObject::set_max_dt 0 1 535 511
/**
 * Sets a limit on the value returned by get_dt().  If this value is less than
 * zero, no limit is imposed; otherwise, this is the maximum value that will
 * ever be returned by get_dt(), regardless of how much time has actually
 * elapsed between frames.
 *
 * This limit is only imposed in real-time mode; in non-real-time mode, the dt
 * is fixed anyway and max_dt is ignored.
 *
 * This is generally used to guarantee reasonable behavior even in the
 * presence of a very slow or chuggy frame rame.
 */
51
inline void ClockObject::set_max_dt(double max_dt);

1435 18 get_degrade_factor 0 4 1880 31 ClockObject::get_degrade_factor 0 1 536 265
/**
 * In degrade mode, returns the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */
58
inline double ClockObject::get_degrade_factor(void) const;

1436 18 set_degrade_factor 0 4 1880 31 ClockObject::set_degrade_factor 0 1 537 262
/**
 * In degrade mode, sets the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */
67
inline void ClockObject::set_degrade_factor(double degrade_factor);

1437 31 set_average_frame_rate_interval 0 4 1880 44 ClockObject::set_average_frame_rate_interval 0 1 538 393
/**
 * Specifies the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.  Changing this does not necessarily immediately
 * change the result of get_average_frame_rate(), until this interval of time
 * has elapsed again.
 *
 * Setting this to zero disables the computation of get_average_frame_rate().
 */
70
inline void ClockObject::set_average_frame_rate_interval(double time);

1438 31 get_average_frame_rate_interval 0 4 1880 44 ClockObject::get_average_frame_rate_interval 0 1 539 162
/**
 * Returns the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.
 */
71
inline double ClockObject::get_average_frame_rate_interval(void) const;

1439 22 get_average_frame_rate 0 4 1880 35 ClockObject::get_average_frame_rate 0 1 540 214
/**
 * Returns the average frame rate in number of frames per second over the last
 * get_average_frame_rate_interval() seconds.  This measures the virtual frame
 * rate if the clock is in M_non_real_time mode.
 */
106
double ClockObject::get_average_frame_rate(Thread *current_thread = ::Thread::get_current_thread()) const;

1440 22 get_max_frame_duration 0 4 1880 35 ClockObject::get_max_frame_duration 0 1 541 105
/**
 * Returns the maximum frame duration over the last
 * get_average_frame_rate_interval() seconds.
 */
106
double ClockObject::get_max_frame_duration(Thread *current_thread = ::Thread::get_current_thread()) const;

1441 25 calc_frame_rate_deviation 0 4 1880 38 ClockObject::calc_frame_rate_deviation 0 1 542 539
/**
 * Returns the standard deviation of the frame times of the frames rendered
 * over the past get_average_frame_rate_interval() seconds.  This number gives
 * an estimate of the chugginess of the frame rate; if it is large, there is a
 * large variation in the frame rate; if is small, all of the frames are
 * consistent in length.
 *
 * A large value might also represent just a recent change in frame rate, for
 * instance, because the camera has just rotated from looking at a simple
 * scene to looking at a more complex scene.
 */
109
double ClockObject::calc_frame_rate_deviation(Thread *current_thread = ::Thread::get_current_thread()) const;

1442 4 tick 0 4 1880 17 ClockObject::tick 0 1 543 285
/**
 * Instructs the clock that a new frame has just begun.  In normal, real-time
 * mode, get_frame_time() will henceforth report the time as of this instant
 * as the current start-of-frame time.  In non-real-time mode,
 * get_frame_time() will be incremented by the value of dt.
 */
80
void ClockObject::tick(Thread *current_thread = ::Thread::get_current_thread());

1443 15 sync_frame_time 0 4 1880 28 ClockObject::sync_frame_time 0 1 544 417
/**
 * Resets the frame time to the current real time.  This is similar to tick(),
 * except that it does not advance the frame counter and does not affect dt.
 * This is intended to be used in the middle of a particularly long frame to
 * compensate for the time that has already elapsed.
 *
 * In non-real-time mode, this function has no effect (because in this mode
 * all frames take the same length of time).
 */
91
void ClockObject::sync_frame_time(Thread *current_thread = ::Thread::get_current_thread());

1444 12 check_errors 0 4 1880 25 ClockObject::check_errors 0 1 545 322
/**
 * Returns true if a clock error was detected since the last time
 * check_errors() was called.  A clock error means that something happened, an
 * OS or BIOS bug, for instance, that makes the current value of the clock
 * somewhat suspect, and an application may wish to resynchronize with any
 * external clocks.
 */
62
inline bool ClockObject::check_errors(Thread *current_thread);

1445 16 get_global_clock 0 4 1880 29 ClockObject::get_global_clock 0 1 546 159
/**
 * Returns a pointer to the global ClockObject.  This is the ClockObject that
 * most code should use for handling scene graph rendering and animation.
 */
63
static inline ClockObject *ClockObject::get_global_clock(void);

1446 14 get_class_type 0 4 1880 27 ClockObject::get_class_type 0 1 547 0
52
static TypeHandle ClockObject::get_class_type(void);

1447 24 parse_color_space_string 0 1 0 24 parse_color_space_string 0 1 906 0
60
ColorSpace parse_color_space_string(std::string const &str);

1448 18 format_color_space 0 1 0 18 format_color_space 0 1 907 0
46
std::string format_color_space(ColorSpace cs);

1449 14 get_model_path 0 1 0 14 get_model_path 0 1 908 0
47
ConfigVariableSearchPath &get_model_path(void);

1450 15 get_plugin_path 0 1 0 15 get_plugin_path 0 1 909 0
48
ConfigVariableSearchPath &get_plugin_path(void);

1451 9 cache_ref 0 4 1884 28 CopyOnWriteObject::cache_ref 0 1 548 62
/**
 * @see CachedTypedWritableReferenceCount::cache_ref()
 */
53
inline void CopyOnWriteObject::cache_ref(void) const;

1452 11 cache_unref 0 4 1884 30 CopyOnWriteObject::cache_unref 0 1 549 64
/**
 * @see CachedTypedWritableReferenceCount::cache_unref()
 */
55
inline bool CopyOnWriteObject::cache_unref(void) const;

1453 14 get_class_type 0 4 1884 33 CopyOnWriteObject::get_class_type 0 1 550 0
58
static TypeHandle CopyOnWriteObject::get_class_type(void);

1454 18 ~CopyOnWriteObject 0 4 1884 37 CopyOnWriteObject::~CopyOnWriteObject 0 0 0
44
CopyOnWriteObject::~CopyOnWriteObject(void);

1455 17 DatagramInputFile 0 4 1885 36 DatagramInputFile::DatagramInputFile 0 1 551 10
/**
 *
 */
50
inline DatagramInputFile::DatagramInputFile(void);

1456 4 open 0 4 1885 23 DatagramInputFile::open 0 3 552 553 554 432
/**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */

/**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */

/**
 * Starts reading from the indicated stream.  Returns true on success, false
 * on failure.  The DatagramInputFile does not take ownership of the stream;
 * you are responsible for closing or deleting it when you are done.
 */
201
bool DatagramInputFile::open(FileReference const *file);
inline bool DatagramInputFile::open(Filename const &filename);
bool DatagramInputFile::open(istream &in, Filename const &filename = Filename());

1457 10 get_stream 0 4 1885 29 DatagramInputFile::get_stream 0 1 555 61
/**
 * Returns the istream represented by the input file.
 */
52
inline istream &DatagramInputFile::get_stream(void);

1458 5 close 0 4 1885 24 DatagramInputFile::close 0 1 556 98
/**
 * Closes the file.  This is also implicitly done when the DatagramInputFile
 * destructs.
 */
36
void DatagramInputFile::close(void);

1459 11 read_header 0 4 1885 30 DatagramInputFile::read_header 0 0 257
/**
 * Reads a sequence of bytes from the beginning of the datagram file.  This
 * may be called any number of times after the file has been opened and before
 * the first datagram is read.  It may not be called once the first datagram
 * has been read.
 */
80
bool DatagramInputFile::read_header(std::string &header, std::size_t num_bytes);

1460 18 DatagramOutputFile 0 4 1886 38 DatagramOutputFile::DatagramOutputFile 0 1 557 10
/**
 *
 */
52
inline DatagramOutputFile::DatagramOutputFile(void);

1461 4 open 0 4 1886 24 DatagramOutputFile::open 0 3 558 559 560 434
/**
 * Opens the indicated filename for writing.  Returns true on success, false
 * on failure.
 */

/**
 * Opens the indicated filename for writing.  Returns true if successful,
 * false on failure.
 */

/**
 * Starts writing to the indicated stream.  Returns true on success, false on
 * failure.  The DatagramOutputFile does not take ownership of the stream; you
 * are responsible for closing or deleting it when you are done.
 */
205
bool DatagramOutputFile::open(FileReference const *file);
inline bool DatagramOutputFile::open(Filename const &filename);
bool DatagramOutputFile::open(ostream &out, Filename const &filename = Filename());

1462 5 close 0 4 1886 25 DatagramOutputFile::close 0 1 561 99
/**
 * Closes the file.  This is also implicitly done when the DatagramOutputFile
 * destructs.
 */
37
void DatagramOutputFile::close(void);

1463 12 write_header 0 4 1886 32 DatagramOutputFile::write_header 0 1 562 256
/**
 * Writes a sequence of bytes to the beginning of the datagram file.  This may
 * be called any number of times after the file has been opened and before the
 * first datagram is written.  It may not be called once the first datagram is
 * written.
 */
65
bool DatagramOutputFile::write_header(std::string const &header);

1464 10 get_stream 0 4 1886 30 DatagramOutputFile::get_stream 0 0 62
/**
 * Returns the ostream represented by the output file.
 */
53
inline ostream &DatagramOutputFile::get_stream(void);

1465 13 DoubleBitMask 0 4 1888 45 DoubleBitMask< BitMaskNative >::DoubleBitMask 0 2 563 564 0
157
inline DoubleBitMask< BitMaskNative >::DoubleBitMask(void);
inline DoubleBitMask< BitMaskNative >::DoubleBitMask(DoubleBitMask< BitMaskNative > const &copy);

1466 10 operator = 0 4 1888 42 DoubleBitMask< BitMaskNative >::operator = 0 1 565 0
126
inline DoubleBitMask< BitMaskNative > &DoubleBitMask< BitMaskNative >::operator =(DoubleBitMask< BitMaskNative > const &copy);

1467 6 all_on 0 4 1888 38 DoubleBitMask< BitMaskNative >::all_on 0 1 566 0
90
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::all_on(void);

1468 7 all_off 0 4 1888 39 DoubleBitMask< BitMaskNative >::all_off 0 1 567 0
91
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::all_off(void);

1469 8 lower_on 0 4 1888 40 DoubleBitMask< BitMaskNative >::lower_on 0 1 568 0
99
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::lower_on(int on_bits);

1470 3 bit 0 4 1888 35 DoubleBitMask< BitMaskNative >::bit 0 1 569 0
92
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::bit(int index);

1471 5 range 0 4 1888 37 DoubleBitMask< BitMaskNative >::range 0 1 570 0
106
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::range(int low_bit, int size);

1472 14 ~DoubleBitMask 0 4 1888 46 DoubleBitMask< BitMaskNative >::~DoubleBitMask 0 0 0
60
inline DoubleBitMask< BitMaskNative >::~DoubleBitMask(void);

1473 16 has_max_num_bits 0 4 1888 48 DoubleBitMask< BitMaskNative >::has_max_num_bits 0 1 571 0
77
static constexpr bool DoubleBitMask< BitMaskNative >::has_max_num_bits(void);

1474 16 get_max_num_bits 0 4 1888 48 DoubleBitMask< BitMaskNative >::get_max_num_bits 0 1 572 0
76
static constexpr int DoubleBitMask< BitMaskNative >::get_max_num_bits(void);

1475 12 get_num_bits 0 4 1888 44 DoubleBitMask< BitMaskNative >::get_num_bits 0 1 573 0
72
static constexpr int DoubleBitMask< BitMaskNative >::get_num_bits(void);

1476 7 get_bit 0 4 1888 39 DoubleBitMask< BitMaskNative >::get_bit 0 1 574 0
69
inline bool DoubleBitMask< BitMaskNative >::get_bit(int index) const;

1477 7 set_bit 0 4 1888 39 DoubleBitMask< BitMaskNative >::set_bit 0 1 575 0
63
inline void DoubleBitMask< BitMaskNative >::set_bit(int index);

1478 9 clear_bit 0 4 1888 41 DoubleBitMask< BitMaskNative >::clear_bit 0 1 576 0
65
inline void DoubleBitMask< BitMaskNative >::clear_bit(int index);

1479 10 set_bit_to 0 4 1888 42 DoubleBitMask< BitMaskNative >::set_bit_to 0 1 577 0
78
inline void DoubleBitMask< BitMaskNative >::set_bit_to(int index, bool value);

1480 7 is_zero 0 4 1888 39 DoubleBitMask< BitMaskNative >::is_zero 0 1 578 0
64
inline bool DoubleBitMask< BitMaskNative >::is_zero(void) const;

1481 9 is_all_on 0 4 1888 41 DoubleBitMask< BitMaskNative >::is_all_on 0 1 579 0
66
inline bool DoubleBitMask< BitMaskNative >::is_all_on(void) const;

1482 7 extract 0 4 1888 39 DoubleBitMask< BitMaskNative >::extract 0 1 580 0
85
inline uint64_t DoubleBitMask< BitMaskNative >::extract(int low_bit, int size) const;

1483 5 store 0 4 1888 37 DoubleBitMask< BitMaskNative >::store 0 1 581 0
89
inline void DoubleBitMask< BitMaskNative >::store(uint64_t value, int low_bit, int size);

1484 10 has_any_of 0 4 1888 42 DoubleBitMask< BitMaskNative >::has_any_of 0 1 582 0
84
inline bool DoubleBitMask< BitMaskNative >::has_any_of(int low_bit, int size) const;

1485 10 has_all_of 0 4 1888 42 DoubleBitMask< BitMaskNative >::has_all_of 0 1 583 0
84
inline bool DoubleBitMask< BitMaskNative >::has_all_of(int low_bit, int size) const;

1486 9 set_range 0 4 1888 41 DoubleBitMask< BitMaskNative >::set_range 0 1 584 0
77
inline void DoubleBitMask< BitMaskNative >::set_range(int low_bit, int size);

1487 11 clear_range 0 4 1888 43 DoubleBitMask< BitMaskNative >::clear_range 0 1 585 0
79
inline void DoubleBitMask< BitMaskNative >::clear_range(int low_bit, int size);

1488 12 set_range_to 0 4 1888 44 DoubleBitMask< BitMaskNative >::set_range_to 0 1 586 0
92
inline void DoubleBitMask< BitMaskNative >::set_range_to(bool value, int low_bit, int size);

1489 15 get_num_on_bits 0 4 1888 47 DoubleBitMask< BitMaskNative >::get_num_on_bits 0 1 587 0
71
inline int DoubleBitMask< BitMaskNative >::get_num_on_bits(void) const;

1490 16 get_num_off_bits 0 4 1888 48 DoubleBitMask< BitMaskNative >::get_num_off_bits 0 1 588 0
72
inline int DoubleBitMask< BitMaskNative >::get_num_off_bits(void) const;

1491 17 get_lowest_on_bit 0 4 1888 49 DoubleBitMask< BitMaskNative >::get_lowest_on_bit 0 1 589 0
73
inline int DoubleBitMask< BitMaskNative >::get_lowest_on_bit(void) const;

1492 18 get_lowest_off_bit 0 4 1888 50 DoubleBitMask< BitMaskNative >::get_lowest_off_bit 0 1 590 0
74
inline int DoubleBitMask< BitMaskNative >::get_lowest_off_bit(void) const;

1493 18 get_highest_on_bit 0 4 1888 50 DoubleBitMask< BitMaskNative >::get_highest_on_bit 0 1 591 0
74
inline int DoubleBitMask< BitMaskNative >::get_highest_on_bit(void) const;

1494 19 get_highest_off_bit 0 4 1888 51 DoubleBitMask< BitMaskNative >::get_highest_off_bit 0 1 592 0
75
inline int DoubleBitMask< BitMaskNative >::get_highest_off_bit(void) const;

1495 29 get_next_higher_different_bit 0 4 1888 61 DoubleBitMask< BitMaskNative >::get_next_higher_different_bit 0 1 593 0
92
inline int DoubleBitMask< BitMaskNative >::get_next_higher_different_bit(int low_bit) const;

1496 15 invert_in_place 0 4 1888 47 DoubleBitMask< BitMaskNative >::invert_in_place 0 1 594 0
66
inline void DoubleBitMask< BitMaskNative >::invert_in_place(void);

1497 18 has_bits_in_common 0 4 1888 50 DoubleBitMask< BitMaskNative >::has_bits_in_common 0 1 595 0
114
inline bool DoubleBitMask< BitMaskNative >::has_bits_in_common(DoubleBitMask< BitMaskNative > const &other) const;

1498 5 clear 0 4 1888 37 DoubleBitMask< BitMaskNative >::clear 0 1 596 0
56
inline void DoubleBitMask< BitMaskNative >::clear(void);

1499 6 output 0 4 1888 38 DoubleBitMask< BitMaskNative >::output 0 1 597 0
64
void DoubleBitMask< BitMaskNative >::output(ostream &out) const;

1500 13 output_binary 0 4 1888 45 DoubleBitMask< BitMaskNative >::output_binary 0 1 598 0
93
void DoubleBitMask< BitMaskNative >::output_binary(ostream &out, int spaces_every = 4) const;

1501 10 output_hex 0 4 1888 42 DoubleBitMask< BitMaskNative >::output_hex 0 1 599 0
90
void DoubleBitMask< BitMaskNative >::output_hex(ostream &out, int spaces_every = 4) const;

1502 5 write 0 4 1888 37 DoubleBitMask< BitMaskNative >::write 0 1 600 0
85
void DoubleBitMask< BitMaskNative >::write(ostream &out, int indent_level = 0) const;

1503 11 operator == 0 4 1888 43 DoubleBitMask< BitMaskNative >::operator == 0 1 601 0
107
inline bool DoubleBitMask< BitMaskNative >::operator ==(DoubleBitMask< BitMaskNative > const &other) const;

1504 11 operator != 0 4 1888 43 DoubleBitMask< BitMaskNative >::operator != 0 1 602 0
107
inline bool DoubleBitMask< BitMaskNative >::operator !=(DoubleBitMask< BitMaskNative > const &other) const;

1505 10 operator < 0 4 1888 42 DoubleBitMask< BitMaskNative >::operator < 0 1 603 0
106
inline bool DoubleBitMask< BitMaskNative >::operator <(DoubleBitMask< BitMaskNative > const &other) const;

1506 10 compare_to 0 4 1888 42 DoubleBitMask< BitMaskNative >::compare_to 0 1 604 0
105
inline int DoubleBitMask< BitMaskNative >::compare_to(DoubleBitMask< BitMaskNative > const &other) const;

1507 10 operator & 0 4 1888 42 DoubleBitMask< BitMaskNative >::operator & 0 1 605 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator &(DoubleBitMask< BitMaskNative > const &other) const;

1508 10 operator | 0 4 1888 42 DoubleBitMask< BitMaskNative >::operator | 0 1 606 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator |(DoubleBitMask< BitMaskNative > const &other) const;

1509 10 operator ^ 0 4 1888 42 DoubleBitMask< BitMaskNative >::operator ^ 0 1 607 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator ^(DoubleBitMask< BitMaskNative > const &other) const;

1510 10 operator ~ 0 68 1888 42 DoubleBitMask< BitMaskNative >::operator ~ 0 1 608 0
93
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator ~(void) const;

1511 11 operator << 0 4 1888 43 DoubleBitMask< BitMaskNative >::operator << 0 1 609 0
99
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator <<(int shift) const;

1512 11 operator >> 0 4 1888 43 DoubleBitMask< BitMaskNative >::operator >> 0 1 610 0
99
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator >>(int shift) const;

1513 11 operator &= 0 4 1888 43 DoubleBitMask< BitMaskNative >::operator &= 0 1 611 0
101
inline void DoubleBitMask< BitMaskNative >::operator &=(DoubleBitMask< BitMaskNative > const &other);

1514 11 operator |= 0 4 1888 43 DoubleBitMask< BitMaskNative >::operator |= 0 1 612 0
101
inline void DoubleBitMask< BitMaskNative >::operator |=(DoubleBitMask< BitMaskNative > const &other);

1515 11 operator ^= 0 4 1888 43 DoubleBitMask< BitMaskNative >::operator ^= 0 1 613 0
101
inline void DoubleBitMask< BitMaskNative >::operator ^=(DoubleBitMask< BitMaskNative > const &other);

1516 12 operator <<= 0 4 1888 44 DoubleBitMask< BitMaskNative >::operator <<= 0 1 614 0
68
inline void DoubleBitMask< BitMaskNative >::operator <<=(int shift);

1517 12 operator >>= 0 4 1888 44 DoubleBitMask< BitMaskNative >::operator >>= 0 1 615 0
68
inline void DoubleBitMask< BitMaskNative >::operator >>=(int shift);

1518 14 get_class_type 0 4 1888 46 DoubleBitMask< BitMaskNative >::get_class_type 0 1 616 0
71
static TypeHandle DoubleBitMask< BitMaskNative >::get_class_type(void);

1519 13 DoubleBitMask 0 4 1890 51 DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask 0 2 617 618 0
175
inline DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(void);
inline DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(DoubleBitMask< DoubleBitMaskNative > const &copy);

1520 10 operator = 0 4 1890 48 DoubleBitMask< DoubleBitMaskNative >::operator = 0 1 619 0
144
inline DoubleBitMask< DoubleBitMaskNative > &DoubleBitMask< DoubleBitMaskNative >::operator =(DoubleBitMask< DoubleBitMaskNative > const &copy);

1521 6 all_on 0 4 1890 44 DoubleBitMask< DoubleBitMaskNative >::all_on 0 1 620 0
102
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::all_on(void);

1522 7 all_off 0 4 1890 45 DoubleBitMask< DoubleBitMaskNative >::all_off 0 1 621 0
103
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::all_off(void);

1523 8 lower_on 0 4 1890 46 DoubleBitMask< DoubleBitMaskNative >::lower_on 0 1 622 0
111
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::lower_on(int on_bits);

1524 3 bit 0 4 1890 41 DoubleBitMask< DoubleBitMaskNative >::bit 0 1 623 0
104
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::bit(int index);

1525 5 range 0 4 1890 43 DoubleBitMask< DoubleBitMaskNative >::range 0 1 624 0
118
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::range(int low_bit, int size);

1526 14 ~DoubleBitMask 0 4 1890 52 DoubleBitMask< DoubleBitMaskNative >::~DoubleBitMask 0 0 0
66
inline DoubleBitMask< DoubleBitMaskNative >::~DoubleBitMask(void);

1527 16 has_max_num_bits 0 4 1890 54 DoubleBitMask< DoubleBitMaskNative >::has_max_num_bits 0 1 625 0
83
static constexpr bool DoubleBitMask< DoubleBitMaskNative >::has_max_num_bits(void);

1528 16 get_max_num_bits 0 4 1890 54 DoubleBitMask< DoubleBitMaskNative >::get_max_num_bits 0 1 626 0
82
static constexpr int DoubleBitMask< DoubleBitMaskNative >::get_max_num_bits(void);

1529 12 get_num_bits 0 4 1890 50 DoubleBitMask< DoubleBitMaskNative >::get_num_bits 0 1 627 0
78
static constexpr int DoubleBitMask< DoubleBitMaskNative >::get_num_bits(void);

1530 7 get_bit 0 4 1890 45 DoubleBitMask< DoubleBitMaskNative >::get_bit 0 1 628 0
75
inline bool DoubleBitMask< DoubleBitMaskNative >::get_bit(int index) const;

1531 7 set_bit 0 4 1890 45 DoubleBitMask< DoubleBitMaskNative >::set_bit 0 1 629 0
69
inline void DoubleBitMask< DoubleBitMaskNative >::set_bit(int index);

1532 9 clear_bit 0 4 1890 47 DoubleBitMask< DoubleBitMaskNative >::clear_bit 0 1 630 0
71
inline void DoubleBitMask< DoubleBitMaskNative >::clear_bit(int index);

1533 10 set_bit_to 0 4 1890 48 DoubleBitMask< DoubleBitMaskNative >::set_bit_to 0 1 631 0
84
inline void DoubleBitMask< DoubleBitMaskNative >::set_bit_to(int index, bool value);

1534 7 is_zero 0 4 1890 45 DoubleBitMask< DoubleBitMaskNative >::is_zero 0 1 632 0
70
inline bool DoubleBitMask< DoubleBitMaskNative >::is_zero(void) const;

1535 9 is_all_on 0 4 1890 47 DoubleBitMask< DoubleBitMaskNative >::is_all_on 0 1 633 0
72
inline bool DoubleBitMask< DoubleBitMaskNative >::is_all_on(void) const;

1536 7 extract 0 4 1890 45 DoubleBitMask< DoubleBitMaskNative >::extract 0 1 634 0
91
inline uint64_t DoubleBitMask< DoubleBitMaskNative >::extract(int low_bit, int size) const;

1537 5 store 0 4 1890 43 DoubleBitMask< DoubleBitMaskNative >::store 0 1 635 0
95
inline void DoubleBitMask< DoubleBitMaskNative >::store(uint64_t value, int low_bit, int size);

1538 10 has_any_of 0 4 1890 48 DoubleBitMask< DoubleBitMaskNative >::has_any_of 0 1 636 0
90
inline bool DoubleBitMask< DoubleBitMaskNative >::has_any_of(int low_bit, int size) const;

1539 10 has_all_of 0 4 1890 48 DoubleBitMask< DoubleBitMaskNative >::has_all_of 0 1 637 0
90
inline bool DoubleBitMask< DoubleBitMaskNative >::has_all_of(int low_bit, int size) const;

1540 9 set_range 0 4 1890 47 DoubleBitMask< DoubleBitMaskNative >::set_range 0 1 638 0
83
inline void DoubleBitMask< DoubleBitMaskNative >::set_range(int low_bit, int size);

1541 11 clear_range 0 4 1890 49 DoubleBitMask< DoubleBitMaskNative >::clear_range 0 1 639 0
85
inline void DoubleBitMask< DoubleBitMaskNative >::clear_range(int low_bit, int size);

1542 12 set_range_to 0 4 1890 50 DoubleBitMask< DoubleBitMaskNative >::set_range_to 0 1 640 0
98
inline void DoubleBitMask< DoubleBitMaskNative >::set_range_to(bool value, int low_bit, int size);

1543 15 get_num_on_bits 0 4 1890 53 DoubleBitMask< DoubleBitMaskNative >::get_num_on_bits 0 1 641 0
77
inline int DoubleBitMask< DoubleBitMaskNative >::get_num_on_bits(void) const;

1544 16 get_num_off_bits 0 4 1890 54 DoubleBitMask< DoubleBitMaskNative >::get_num_off_bits 0 1 642 0
78
inline int DoubleBitMask< DoubleBitMaskNative >::get_num_off_bits(void) const;

1545 17 get_lowest_on_bit 0 4 1890 55 DoubleBitMask< DoubleBitMaskNative >::get_lowest_on_bit 0 1 643 0
79
inline int DoubleBitMask< DoubleBitMaskNative >::get_lowest_on_bit(void) const;

1546 18 get_lowest_off_bit 0 4 1890 56 DoubleBitMask< DoubleBitMaskNative >::get_lowest_off_bit 0 1 644 0
80
inline int DoubleBitMask< DoubleBitMaskNative >::get_lowest_off_bit(void) const;

1547 18 get_highest_on_bit 0 4 1890 56 DoubleBitMask< DoubleBitMaskNative >::get_highest_on_bit 0 1 645 0
80
inline int DoubleBitMask< DoubleBitMaskNative >::get_highest_on_bit(void) const;

1548 19 get_highest_off_bit 0 4 1890 57 DoubleBitMask< DoubleBitMaskNative >::get_highest_off_bit 0 1 646 0
81
inline int DoubleBitMask< DoubleBitMaskNative >::get_highest_off_bit(void) const;

1549 29 get_next_higher_different_bit 0 4 1890 67 DoubleBitMask< DoubleBitMaskNative >::get_next_higher_different_bit 0 1 647 0
98
inline int DoubleBitMask< DoubleBitMaskNative >::get_next_higher_different_bit(int low_bit) const;

1550 15 invert_in_place 0 4 1890 53 DoubleBitMask< DoubleBitMaskNative >::invert_in_place 0 1 648 0
72
inline void DoubleBitMask< DoubleBitMaskNative >::invert_in_place(void);

1551 18 has_bits_in_common 0 4 1890 56 DoubleBitMask< DoubleBitMaskNative >::has_bits_in_common 0 1 649 0
126
inline bool DoubleBitMask< DoubleBitMaskNative >::has_bits_in_common(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1552 5 clear 0 4 1890 43 DoubleBitMask< DoubleBitMaskNative >::clear 0 1 650 0
62
inline void DoubleBitMask< DoubleBitMaskNative >::clear(void);

1553 6 output 0 4 1890 44 DoubleBitMask< DoubleBitMaskNative >::output 0 1 651 0
70
void DoubleBitMask< DoubleBitMaskNative >::output(ostream &out) const;

1554 13 output_binary 0 4 1890 51 DoubleBitMask< DoubleBitMaskNative >::output_binary 0 1 652 0
99
void DoubleBitMask< DoubleBitMaskNative >::output_binary(ostream &out, int spaces_every = 4) const;

1555 10 output_hex 0 4 1890 48 DoubleBitMask< DoubleBitMaskNative >::output_hex 0 1 653 0
96
void DoubleBitMask< DoubleBitMaskNative >::output_hex(ostream &out, int spaces_every = 4) const;

1556 5 write 0 4 1890 43 DoubleBitMask< DoubleBitMaskNative >::write 0 1 654 0
91
void DoubleBitMask< DoubleBitMaskNative >::write(ostream &out, int indent_level = 0) const;

1557 11 operator == 0 4 1890 49 DoubleBitMask< DoubleBitMaskNative >::operator == 0 1 655 0
119
inline bool DoubleBitMask< DoubleBitMaskNative >::operator ==(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1558 11 operator != 0 4 1890 49 DoubleBitMask< DoubleBitMaskNative >::operator != 0 1 656 0
119
inline bool DoubleBitMask< DoubleBitMaskNative >::operator !=(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1559 10 operator < 0 4 1890 48 DoubleBitMask< DoubleBitMaskNative >::operator < 0 1 657 0
118
inline bool DoubleBitMask< DoubleBitMaskNative >::operator <(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1560 10 compare_to 0 4 1890 48 DoubleBitMask< DoubleBitMaskNative >::compare_to 0 1 658 0
117
inline int DoubleBitMask< DoubleBitMaskNative >::compare_to(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1561 10 operator & 0 4 1890 48 DoubleBitMask< DoubleBitMaskNative >::operator & 0 1 659 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator &(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1562 10 operator | 0 4 1890 48 DoubleBitMask< DoubleBitMaskNative >::operator | 0 1 660 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator |(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1563 10 operator ^ 0 4 1890 48 DoubleBitMask< DoubleBitMaskNative >::operator ^ 0 1 661 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator ^(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1564 10 operator ~ 0 68 1890 48 DoubleBitMask< DoubleBitMaskNative >::operator ~ 0 1 662 0
105
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator ~(void) const;

1565 11 operator << 0 4 1890 49 DoubleBitMask< DoubleBitMaskNative >::operator << 0 1 663 0
111
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator <<(int shift) const;

1566 11 operator >> 0 4 1890 49 DoubleBitMask< DoubleBitMaskNative >::operator >> 0 1 664 0
111
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator >>(int shift) const;

1567 11 operator &= 0 4 1890 49 DoubleBitMask< DoubleBitMaskNative >::operator &= 0 1 665 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator &=(DoubleBitMask< DoubleBitMaskNative > const &other);

1568 11 operator |= 0 4 1890 49 DoubleBitMask< DoubleBitMaskNative >::operator |= 0 1 666 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator |=(DoubleBitMask< DoubleBitMaskNative > const &other);

1569 11 operator ^= 0 4 1890 49 DoubleBitMask< DoubleBitMaskNative >::operator ^= 0 1 667 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator ^=(DoubleBitMask< DoubleBitMaskNative > const &other);

1570 12 operator <<= 0 4 1890 50 DoubleBitMask< DoubleBitMaskNative >::operator <<= 0 1 668 0
74
inline void DoubleBitMask< DoubleBitMaskNative >::operator <<=(int shift);

1571 12 operator >>= 0 4 1890 50 DoubleBitMask< DoubleBitMaskNative >::operator >>= 0 1 669 0
74
inline void DoubleBitMask< DoubleBitMaskNative >::operator >>=(int shift);

1572 14 get_class_type 0 4 1890 52 DoubleBitMask< DoubleBitMaskNative >::get_class_type 0 1 670 0
77
static TypeHandle DoubleBitMask< DoubleBitMaskNative >::get_class_type(void);

1573 9 ascii_key 0 4 1893 25 KeyboardButton::ascii_key 0 1 673 144
/**
 * Returns the ButtonHandle associated with the particular ASCII character, if
 * there is one, or ButtonHandle::none() if there is not.
 */
69
static ButtonHandle KeyboardButton::ascii_key(char ascii_equivalent);

1574 5 space 0 4 1893 21 KeyboardButton::space 0 1 674 0
48
static ButtonHandle KeyboardButton::space(void);

1575 9 backspace 0 4 1893 25 KeyboardButton::backspace 0 1 675 0
52
static ButtonHandle KeyboardButton::backspace(void);

1576 3 tab 0 4 1893 19 KeyboardButton::tab 0 1 676 0
46
static ButtonHandle KeyboardButton::tab(void);

1577 5 enter 0 4 1893 21 KeyboardButton::enter 0 1 677 0
48
static ButtonHandle KeyboardButton::enter(void);

1578 6 escape 0 4 1893 22 KeyboardButton::escape 0 1 678 0
49
static ButtonHandle KeyboardButton::escape(void);

1579 2 f1 0 4 1893 18 KeyboardButton::f1 0 1 679 0
45
static ButtonHandle KeyboardButton::f1(void);

1580 2 f2 0 4 1893 18 KeyboardButton::f2 0 1 680 0
45
static ButtonHandle KeyboardButton::f2(void);

1581 2 f3 0 4 1893 18 KeyboardButton::f3 0 1 681 0
45
static ButtonHandle KeyboardButton::f3(void);

1582 2 f4 0 4 1893 18 KeyboardButton::f4 0 1 682 0
45
static ButtonHandle KeyboardButton::f4(void);

1583 2 f5 0 4 1893 18 KeyboardButton::f5 0 1 683 0
45
static ButtonHandle KeyboardButton::f5(void);

1584 2 f6 0 4 1893 18 KeyboardButton::f6 0 1 684 0
45
static ButtonHandle KeyboardButton::f6(void);

1585 2 f7 0 4 1893 18 KeyboardButton::f7 0 1 685 0
45
static ButtonHandle KeyboardButton::f7(void);

1586 2 f8 0 4 1893 18 KeyboardButton::f8 0 1 686 0
45
static ButtonHandle KeyboardButton::f8(void);

1587 2 f9 0 4 1893 18 KeyboardButton::f9 0 1 687 0
45
static ButtonHandle KeyboardButton::f9(void);

1588 3 f10 0 4 1893 19 KeyboardButton::f10 0 1 688 0
46
static ButtonHandle KeyboardButton::f10(void);

1589 3 f11 0 4 1893 19 KeyboardButton::f11 0 1 689 0
46
static ButtonHandle KeyboardButton::f11(void);

1590 3 f12 0 4 1893 19 KeyboardButton::f12 0 1 690 0
46
static ButtonHandle KeyboardButton::f12(void);

1591 3 f13 0 4 1893 19 KeyboardButton::f13 0 1 691 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f13(void);

1592 3 f14 0 4 1893 19 KeyboardButton::f14 0 1 692 0
46
static ButtonHandle KeyboardButton::f14(void);

1593 3 f15 0 4 1893 19 KeyboardButton::f15 0 1 693 0
46
static ButtonHandle KeyboardButton::f15(void);

1594 3 f16 0 4 1893 19 KeyboardButton::f16 0 1 694 0
46
static ButtonHandle KeyboardButton::f16(void);

1595 4 left 0 4 1893 20 KeyboardButton::left 0 1 695 0
47
static ButtonHandle KeyboardButton::left(void);

1596 5 right 0 4 1893 21 KeyboardButton::right 0 1 696 0
48
static ButtonHandle KeyboardButton::right(void);

1597 2 up 0 4 1893 18 KeyboardButton::up 0 1 697 0
45
static ButtonHandle KeyboardButton::up(void);

1598 4 down 0 4 1893 20 KeyboardButton::down 0 1 698 0
47
static ButtonHandle KeyboardButton::down(void);

1599 7 page_up 0 4 1893 23 KeyboardButton::page_up 0 1 699 0
50
static ButtonHandle KeyboardButton::page_up(void);

1600 9 page_down 0 4 1893 25 KeyboardButton::page_down 0 1 700 0
52
static ButtonHandle KeyboardButton::page_down(void);

1601 4 home 0 4 1893 20 KeyboardButton::home 0 1 701 0
47
static ButtonHandle KeyboardButton::home(void);

1602 3 end 0 4 1893 19 KeyboardButton::end 0 1 702 0
46
static ButtonHandle KeyboardButton::end(void);

1603 6 insert 0 4 1893 22 KeyboardButton::insert 0 1 703 0
49
static ButtonHandle KeyboardButton::insert(void);

1604 3 del 0 4 1893 19 KeyboardButton::del 0 1 704 27
// delete is a C++ keyword.
46
static ButtonHandle KeyboardButton::del(void);

1605 4 help 0 4 1893 20 KeyboardButton::help 0 1 705 27
// delete is a C++ keyword.
47
static ButtonHandle KeyboardButton::help(void);

1606 4 menu 0 4 1893 20 KeyboardButton::menu 0 1 706 0
47
static ButtonHandle KeyboardButton::menu(void);

1607 5 shift 0 4 1893 21 KeyboardButton::shift 0 1 707 0
48
static ButtonHandle KeyboardButton::shift(void);

1608 7 control 0 4 1893 23 KeyboardButton::control 0 1 708 0
50
static ButtonHandle KeyboardButton::control(void);

1609 3 alt 0 4 1893 19 KeyboardButton::alt 0 1 709 0
46
static ButtonHandle KeyboardButton::alt(void);

1610 4 meta 0 4 1893 20 KeyboardButton::meta 0 1 710 0
47
static ButtonHandle KeyboardButton::meta(void);

1611 9 caps_lock 0 4 1893 25 KeyboardButton::caps_lock 0 1 711 0
52
static ButtonHandle KeyboardButton::caps_lock(void);

1612 10 shift_lock 0 4 1893 26 KeyboardButton::shift_lock 0 1 712 0
53
static ButtonHandle KeyboardButton::shift_lock(void);

1613 8 num_lock 0 4 1893 24 KeyboardButton::num_lock 0 1 713 0
51
static ButtonHandle KeyboardButton::num_lock(void);

1614 11 scroll_lock 0 4 1893 27 KeyboardButton::scroll_lock 0 1 714 0
54
static ButtonHandle KeyboardButton::scroll_lock(void);

1615 12 print_screen 0 4 1893 28 KeyboardButton::print_screen 0 1 715 0
55
static ButtonHandle KeyboardButton::print_screen(void);

1616 5 pause 0 4 1893 21 KeyboardButton::pause 0 1 716 0
48
static ButtonHandle KeyboardButton::pause(void);

1617 6 lshift 0 4 1893 22 KeyboardButton::lshift 0 1 717 0
49
static ButtonHandle KeyboardButton::lshift(void);

1618 6 rshift 0 4 1893 22 KeyboardButton::rshift 0 1 718 0
49
static ButtonHandle KeyboardButton::rshift(void);

1619 8 lcontrol 0 4 1893 24 KeyboardButton::lcontrol 0 1 719 0
51
static ButtonHandle KeyboardButton::lcontrol(void);

1620 8 rcontrol 0 4 1893 24 KeyboardButton::rcontrol 0 1 720 0
51
static ButtonHandle KeyboardButton::rcontrol(void);

1621 4 lalt 0 4 1893 20 KeyboardButton::lalt 0 1 721 0
47
static ButtonHandle KeyboardButton::lalt(void);

1622 4 ralt 0 4 1893 20 KeyboardButton::ralt 0 1 722 0
47
static ButtonHandle KeyboardButton::ralt(void);

1623 5 lmeta 0 4 1893 21 KeyboardButton::lmeta 0 1 723 0
48
static ButtonHandle KeyboardButton::lmeta(void);

1624 5 rmeta 0 4 1893 21 KeyboardButton::rmeta 0 1 724 0
48
static ButtonHandle KeyboardButton::rmeta(void);

1625 14 KeyboardButton 0 4 1893 30 KeyboardButton::KeyboardButton 0 2 671 672 0
127
inline KeyboardButton::KeyboardButton(void) = default;
inline KeyboardButton::KeyboardButton(KeyboardButton const &) = default;

1626 15 ~KeyboardButton 0 4 1893 31 KeyboardButton::~KeyboardButton 0 0 0
38
KeyboardButton::~KeyboardButton(void);

1627 13 load_prc_file 0 1 0 13 load_prc_file 0 1 910 1206
/**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */

/**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */
52
ConfigPage *load_prc_file(Filename const &filename);

1628 18 load_prc_file_data 0 1 0 18 load_prc_file_data 0 1 911 794
/**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */

/**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */
81
ConfigPage *load_prc_file_data(std::string const &name, std::string const &data);

1629 15 unload_prc_file 0 1 0 15 unload_prc_file 0 1 912 0
39
bool unload_prc_file(ConfigPage *page);

1630 18 hash_prc_variables 0 1 0 18 hash_prc_variables 0 1 913 0
39
void hash_prc_variables(HashVal &hash);

1631 15 ModifierButtons 0 4 1894 32 ModifierButtons::ModifierButtons 0 2 725 726 22
/**
 *
 */

/**
 *
 */
102
ModifierButtons::ModifierButtons(void);
ModifierButtons::ModifierButtons(ModifierButtons const &copy);

1632 16 ~ModifierButtons 0 4 1894 33 ModifierButtons::~ModifierButtons 0 0 10
/**
 *
 */
40
ModifierButtons::~ModifierButtons(void);

1633 10 operator = 0 4 1894 27 ModifierButtons::operator = 0 1 727 0
69
inline void ModifierButtons::operator =(ModifierButtons const &copy);

1634 11 operator == 0 4 1894 28 ModifierButtons::operator == 0 1 728 0
77
inline bool ModifierButtons::operator ==(ModifierButtons const &other) const;

1635 11 operator != 0 4 1894 28 ModifierButtons::operator != 0 1 729 0
77
inline bool ModifierButtons::operator !=(ModifierButtons const &other) const;

1636 10 operator < 0 4 1894 27 ModifierButtons::operator < 0 1 730 0
76
inline bool ModifierButtons::operator <(ModifierButtons const &other) const;

1637 10 operator & 0 4 1894 27 ModifierButtons::operator & 0 1 731 0
87
inline ModifierButtons ModifierButtons::operator &(ModifierButtons const &other) const;

1638 10 operator | 0 4 1894 27 ModifierButtons::operator | 0 1 732 0
87
inline ModifierButtons ModifierButtons::operator |(ModifierButtons const &other) const;

1639 11 operator &= 0 4 1894 28 ModifierButtons::operator &= 0 1 733 0
64
void ModifierButtons::operator &=(ModifierButtons const &other);

1640 11 operator |= 0 4 1894 28 ModifierButtons::operator |= 0 1 734 0
64
void ModifierButtons::operator |=(ModifierButtons const &other);

1641 15 set_button_list 0 4 1894 32 ModifierButtons::set_button_list 0 1 735 374
/**
 * Sets the list of buttons to watch to be the same as that of the other
 * ModifierButtons object.  This makes the lists pointer equivalent (until one
 * or the other is later modified).
 *
 * This will preserve the state of any button that was on the original list
 * and is also on the new lists.  Any other buttons will get reset to the
 * default state of "up".
 */
68
void ModifierButtons::set_button_list(ModifierButtons const &other);

1642 7 matches 0 4 1894 24 ModifierButtons::matches 0 1 736 232
/**
 * Returns true if the set of buttons indicated as down by this
 * ModifierButtons object is the same set of buttons indicated as down by the
 * other ModifierButtons object.  The buttons indicated as up are not
 * relevant.
 */
66
bool ModifierButtons::matches(ModifierButtons const &other) const;

1643 10 add_button 0 4 1894 27 ModifierButtons::add_button 0 1 737 248
/**
 * Adds the indicated button to the set of buttons that will be monitored for
 * upness and downness.  Returns true if the button was added, false if it was
 * already being monitored or if too many buttons are currently being
 * monitored.
 */
54
bool ModifierButtons::add_button(ButtonHandle button);

1644 10 has_button 0 4 1894 27 ModifierButtons::has_button 0 1 738 109
/**
 * Returns true if the indicated button is in the set of buttons being
 * monitored, false otherwise.
 */
60
bool ModifierButtons::has_button(ButtonHandle button) const;

1645 13 remove_button 0 4 1894 30 ModifierButtons::remove_button 0 1 739 313
/**
 * Removes the indicated button from the set of buttons being monitored.
 * Returns true if the button was removed, false if it was not being monitored
 * in the first place.
 *
 * Unlike the other methods, you cannot remove a button by removing its alias;
 * you have to remove exactly the button itself.
 */
57
bool ModifierButtons::remove_button(ButtonHandle button);

1646 15 get_num_buttons 0 4 1894 32 ModifierButtons::get_num_buttons 0 1 740 143
/**
 * Returns the number of buttons that the ModifierButtons object is monitoring
 * (e.g.  the number of buttons passed to add_button()).
 */
56
inline int ModifierButtons::get_num_buttons(void) const;

1647 10 get_button 0 4 1894 27 ModifierButtons::get_button 0 1 741 185
/**
 * Returns the nth button that the ModifierButtons object is monitoring (the
 * nth button passed to add_button()).  This must be in the range 0 <= index <
 * get_num_buttons().
 */
65
inline ButtonHandle ModifierButtons::get_button(int index) const;

1648 0 0 0 0 0 0 0 0
0

1649 11 button_down 0 4 1894 28 ModifierButtons::button_down 0 1 742 305
/**
 * Records that a particular button has been pressed.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */
55
bool ModifierButtons::button_down(ButtonHandle button);

1650 9 button_up 0 4 1894 26 ModifierButtons::button_up 0 1 743 306
/**
 * Records that a particular button has been released.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */
53
bool ModifierButtons::button_up(ButtonHandle button);

1651 14 all_buttons_up 0 4 1894 31 ModifierButtons::all_buttons_up 0 1 744 66
/**
 * Marks all monitored buttons as being in the "up" state.
 */
50
inline void ModifierButtons::all_buttons_up(void);

1652 7 is_down 0 4 1894 24 ModifierButtons::is_down 0 2 745 746 264
/**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up.
 */

/**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up or if it is not in the set of buttons being tracked.
 */
112
bool ModifierButtons::is_down(ButtonHandle button) const;
inline bool ModifierButtons::is_down(int index) const;

1653 11 is_any_down 0 4 1894 28 ModifierButtons::is_any_down 0 1 747 109
/**
 * Returns true if any of the tracked button are known to be down, or false if
 * all of them are up.
 */
53
inline bool ModifierButtons::is_any_down(void) const;

1654 10 get_prefix 0 4 1894 27 ModifierButtons::get_prefix 0 1 748 150
/**
 * Returns a string which can be used to prefix any button name or event name
 * with the unique set of modifier buttons currently being held.
 */
52
std::string ModifierButtons::get_prefix(void) const;

1655 6 output 0 4 1894 23 ModifierButtons::output 0 1 749 69
/**
 * Writes a one-line summary of the buttons known to be down.
 */
49
void ModifierButtons::output(ostream &out) const;

1656 5 write 0 4 1894 22 ModifierButtons::write 0 1 750 123
/**
 * Writes a multi-line summary including all of the buttons being monitored
 * and which ones are known to be down.
 */
48
void ModifierButtons::write(ostream &out) const;

1657 6 button 0 4 1895 19 MouseButton::button 0 1 753 166
/**
 * Returns the ButtonHandle associated with the particular numbered mouse
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */
59
static ButtonHandle MouseButton::button(int button_number);

1658 3 one 0 4 1895 16 MouseButton::one 0 1 754 75
/**
 * Returns the ButtonHandle associated with the first mouse button.
 */
43
static ButtonHandle MouseButton::one(void);

1659 3 two 0 4 1895 16 MouseButton::two 0 1 755 76
/**
 * Returns the ButtonHandle associated with the second mouse button.
 */
43
static ButtonHandle MouseButton::two(void);

1660 5 three 0 4 1895 18 MouseButton::three 0 1 756 75
/**
 * Returns the ButtonHandle associated with the third mouse button.
 */
45
static ButtonHandle MouseButton::three(void);

1661 4 four 0 4 1895 17 MouseButton::four 0 1 757 76
/**
 * Returns the ButtonHandle associated with the fourth mouse button.
 */
44
static ButtonHandle MouseButton::four(void);

1662 4 five 0 4 1895 17 MouseButton::five 0 1 758 75
/**
 * Returns the ButtonHandle associated with the fifth mouse button.
 */
44
static ButtonHandle MouseButton::five(void);

1663 8 wheel_up 0 4 1895 21 MouseButton::wheel_up 0 1 759 98
/**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * upwards.
 */
48
static ButtonHandle MouseButton::wheel_up(void);

1664 10 wheel_down 0 4 1895 23 MouseButton::wheel_down 0 1 760 100
/**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * downwards.
 */
50
static ButtonHandle MouseButton::wheel_down(void);

1665 10 wheel_left 0 4 1895 23 MouseButton::wheel_left 0 1 761 148
/**
 * Returns the ButtonHandle generated when the mouse is scrolled to the left.
 * Usually, you'll only find the horizontal scroll on laptops.
 */
50
static ButtonHandle MouseButton::wheel_left(void);

1666 11 wheel_right 0 4 1895 24 MouseButton::wheel_right 0 1 762 149
/**
 * Returns the ButtonHandle generated when the mouse is scrolled to the right.
 * Usually, you'll only find the horizontal scroll on laptops.
 */
51
static ButtonHandle MouseButton::wheel_right(void);

1667 15 is_mouse_button 0 4 1895 28 MouseButton::is_mouse_button 0 1 763 117
/**
 * Returns true if the indicated ButtonHandle is a mouse button, false if it
 * is some other kind of button.
 */
62
static bool MouseButton::is_mouse_button(ButtonHandle button);

1668 11 MouseButton 0 4 1895 24 MouseButton::MouseButton 0 2 751 752 0
112
inline MouseButton::MouseButton(void) = default;
inline MouseButton::MouseButton(MouseButton const &) = default;

1669 12 ~MouseButton 0 4 1895 25 MouseButton::~MouseButton 0 0 0
32
MouseButton::~MouseButton(void);

1670 9 MouseData 0 4 1896 20 MouseData::MouseData 0 2 764 765 22
/**
 *
 */

/**
 *
 */
86
inline MouseData::MouseData(void);
inline MouseData::MouseData(MouseData const &copy);

1671 10 operator = 0 4 1896 21 MouseData::operator = 0 1 766 0
57
inline void MouseData::operator =(MouseData const &copy);

1672 5 get_x 0 4 1896 16 MouseData::get_x 0 1 767 10
/**
 *
 */
43
inline double MouseData::get_x(void) const;

1673 5 get_y 0 4 1896 16 MouseData::get_y 0 1 768 10
/**
 *
 */
43
inline double MouseData::get_y(void) const;

1674 13 get_in_window 0 4 1896 24 MouseData::get_in_window 0 1 769 10
/**
 *
 */
49
inline bool MouseData::get_in_window(void) const;

1675 6 output 0 4 1896 17 MouseData::output 0 1 770 10
/**
 *
 */
43
void MouseData::output(ostream &out) const;

1676 10 ~MouseData 0 4 1896 21 MouseData::~MouseData 0 0 0
28
MouseData::~MouseData(void);

1677 18 get_node_ref_count 0 4 1897 44 NodeCachedReferenceCount::get_node_ref_count 0 1 771 47
/**
 * Returns the current reference count.
 */
68
inline int NodeCachedReferenceCount::get_node_ref_count(void) const;

1678 8 node_ref 0 4 1897 34 NodeCachedReferenceCount::node_ref 0 1 772 349
/**
 * Explicitly increments the reference count.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */
59
inline void NodeCachedReferenceCount::node_ref(void) const;

1679 10 node_unref 0 4 1897 36 NodeCachedReferenceCount::node_unref 0 1 773 201
/**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
61
inline bool NodeCachedReferenceCount::node_unref(void) const;

1680 24 test_ref_count_integrity 0 4 1897 50 NodeCachedReferenceCount::test_ref_count_integrity 0 1 774 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
75
inline bool NodeCachedReferenceCount::test_ref_count_integrity(void) const;

1681 19 get_referenced_bits 0 4 1897 45 NodeCachedReferenceCount::get_referenced_bits 0 1 775 293
/**
 * Returns the union of the values defined in the Referenced enum that
 * represents the various things that appear to be holding a pointer to this
 * object.
 *
 * If R_node is included, at least one node is holding a pointer; if R_cache
 * is included, at least one cache element is.
 */
69
inline int NodeCachedReferenceCount::get_referenced_bits(void) const;

1682 14 get_class_type 0 4 1897 40 NodeCachedReferenceCount::get_class_type 0 1 776 0
65
static TypeHandle NodeCachedReferenceCount::get_class_type(void);

1683 11 SparseArray 0 4 1899 24 SparseArray::SparseArray 0 3 777 778 779 22
/**
 *
 */

/**
 *
 */
150
inline SparseArray::SparseArray(void);
SparseArray::SparseArray(BitArray const &from);
inline SparseArray::SparseArray(SparseArray const &) = default;

1684 6 all_on 0 4 1899 19 SparseArray::all_on 0 1 780 72
/**
 * Returns a SparseArray with an infinite array of bits, all on.
 */
52
static inline SparseArray SparseArray::all_on(void);

1685 7 all_off 0 4 1899 20 SparseArray::all_off 0 1 781 56
/**
 * Returns a SparseArray whose bits are all off.
 */
53
static inline SparseArray SparseArray::all_off(void);

1686 8 lower_on 0 4 1899 21 SparseArray::lower_on 0 1 782 65
/**
 * Returns a SparseArray whose lower on_bits bits are on.
 */
61
static inline SparseArray SparseArray::lower_on(int on_bits);

1687 3 bit 0 4 1899 16 SparseArray::bit 0 1 783 64
/**
 * Returns a SparseArray with only the indicated bit on.
 */
54
static inline SparseArray SparseArray::bit(int index);

1688 5 range 0 4 1899 18 SparseArray::range 0 1 784 79
/**
 * Returns a SparseArray whose size bits, beginning at low_bit, are on.
 */
68
static inline SparseArray SparseArray::range(int low_bit, int size);

1689 16 has_max_num_bits 0 4 1899 29 SparseArray::has_max_num_bits 0 1 785 393
/**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The SparseArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or SparseArray interchangeably.
 */
55
static inline bool SparseArray::has_max_num_bits(void);

1690 16 get_max_num_bits 0 4 1899 29 SparseArray::get_max_num_bits 0 1 786 428
/**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The SparseArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or SparseArray interchangeably.
 */
54
static inline int SparseArray::get_max_num_bits(void);

1691 12 get_num_bits 0 4 1899 25 SparseArray::get_num_bits 0 1 787 300
/**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */
49
inline int SparseArray::get_num_bits(void) const;

1692 7 get_bit 0 4 1899 20 SparseArray::get_bit 0 1 788 191
/**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */
50
inline bool SparseArray::get_bit(int index) const;

1693 7 set_bit 0 4 1899 20 SparseArray::set_bit 0 1 789 97
/**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
44
inline void SparseArray::set_bit(int index);

1694 9 clear_bit 0 4 1899 22 SparseArray::clear_bit 0 1 790 98
/**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
46
inline void SparseArray::clear_bit(int index);

1695 10 set_bit_to 0 4 1899 23 SparseArray::set_bit_to 0 1 791 84
/**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */
59
inline void SparseArray::set_bit_to(int index, bool value);

1696 16 get_highest_bits 0 4 1899 29 SparseArray::get_highest_bits 0 1 792 118
/**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */
54
inline bool SparseArray::get_highest_bits(void) const;

1697 7 is_zero 0 4 1899 20 SparseArray::is_zero 0 1 793 71
/**
 * Returns true if the entire bitmask is zero, false otherwise.
 */
45
inline bool SparseArray::is_zero(void) const;

1698 9 is_all_on 0 4 1899 22 SparseArray::is_all_on 0 1 794 70
/**
 * Returns true if the entire bitmask is one, false otherwise.
 */
47
inline bool SparseArray::is_all_on(void) const;

1699 10 has_any_of 0 4 1899 23 SparseArray::has_any_of 0 1 795 82
/**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */
65
inline bool SparseArray::has_any_of(int low_bit, int size) const;

1700 10 has_all_of 0 4 1899 23 SparseArray::has_all_of 0 1 796 84
/**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */
65
inline bool SparseArray::has_all_of(int low_bit, int size) const;

1701 9 set_range 0 4 1899 22 SparseArray::set_range 0 1 797 47
/**
 * Sets the indicated range of bits on.
 */
58
inline void SparseArray::set_range(int low_bit, int size);

1702 11 clear_range 0 4 1899 24 SparseArray::clear_range 0 1 798 48
/**
 * Sets the indicated range of bits off.
 */
60
inline void SparseArray::clear_range(int low_bit, int size);

1703 12 set_range_to 0 4 1899 25 SparseArray::set_range_to 0 1 799 64
/**
 * Sets the indicated range of bits to either on or off.
 */
73
inline void SparseArray::set_range_to(bool value, int low_bit, int size);

1704 15 get_num_on_bits 0 4 1899 28 SparseArray::get_num_on_bits 0 1 800 127
/**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */
45
int SparseArray::get_num_on_bits(void) const;

1705 16 get_num_off_bits 0 4 1899 29 SparseArray::get_num_off_bits 0 1 801 127
/**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */
46
int SparseArray::get_num_off_bits(void) const;

1706 17 get_lowest_on_bit 0 4 1899 30 SparseArray::get_lowest_on_bit 0 1 802 146
/**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there are an infinite number of 1 bits.
 */
47
int SparseArray::get_lowest_on_bit(void) const;

1707 18 get_lowest_off_bit 0 4 1899 31 SparseArray::get_lowest_off_bit 0 1 803 146
/**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there are an infinite number of 1 bits.
 */
48
int SparseArray::get_lowest_off_bit(void) const;

1708 18 get_highest_on_bit 0 4 1899 31 SparseArray::get_highest_on_bit 0 1 804 143
/**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */
48
int SparseArray::get_highest_on_bit(void) const;

1709 19 get_highest_off_bit 0 4 1899 32 SparseArray::get_highest_off_bit 0 1 805 143
/**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */
49
int SparseArray::get_highest_off_bit(void) const;

1710 29 get_next_higher_different_bit 0 4 1899 42 SparseArray::get_next_higher_different_bit 0 1 806 287
/**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */
66
int SparseArray::get_next_higher_different_bit(int low_bit) const;

1711 15 invert_in_place 0 4 1899 28 SparseArray::invert_in_place 0 1 807 93
/**
 * Inverts all the bits in the SparseArray.  This is equivalent to array =
 * ~array.
 */
47
inline void SparseArray::invert_in_place(void);

1712 18 has_bits_in_common 0 4 1899 31 SparseArray::has_bits_in_common 0 1 808 181
/**
 * Returns true if this SparseArray has any "one" bits in common with the
 * other one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */
69
bool SparseArray::has_bits_in_common(SparseArray const &other) const;

1713 5 clear 0 4 1899 18 SparseArray::clear 0 1 809 52
/**
 * Sets all the bits in the SparseArray off.
 */
37
inline void SparseArray::clear(void);

1714 6 output 0 4 1899 19 SparseArray::output 0 1 810 10
/**
 *
 */
45
void SparseArray::output(ostream &out) const;

1715 11 operator == 0 4 1899 24 SparseArray::operator == 0 1 811 0
69
inline bool SparseArray::operator ==(SparseArray const &other) const;

1716 11 operator != 0 4 1899 24 SparseArray::operator != 0 1 812 0
69
inline bool SparseArray::operator !=(SparseArray const &other) const;

1717 10 operator < 0 4 1899 23 SparseArray::operator < 0 1 813 0
68
inline bool SparseArray::operator <(SparseArray const &other) const;

1718 10 compare_to 0 4 1899 23 SparseArray::compare_to 0 1 814 242
/**
 * Returns a number less than zero if this SparseArray sorts before the
 * indicated other SparseArray, greater than zero if it sorts after, or 0 if
 * they are equivalent.  This is based on the same ordering defined by
 * operator <.
 */
60
int SparseArray::compare_to(SparseArray const &other) const;

1719 10 operator & 0 4 1899 23 SparseArray::operator & 0 1 815 0
75
inline SparseArray SparseArray::operator &(SparseArray const &other) const;

1720 10 operator | 0 4 1899 23 SparseArray::operator | 0 1 816 0
75
inline SparseArray SparseArray::operator |(SparseArray const &other) const;

1721 10 operator ^ 0 4 1899 23 SparseArray::operator ^ 0 1 817 0
75
inline SparseArray SparseArray::operator ^(SparseArray const &other) const;

1722 10 operator ~ 0 68 1899 23 SparseArray::operator ~ 0 1 818 0
55
inline SparseArray SparseArray::operator ~(void) const;

1723 11 operator << 0 4 1899 24 SparseArray::operator << 0 1 819 0
61
inline SparseArray SparseArray::operator <<(int shift) const;

1724 11 operator >> 0 4 1899 24 SparseArray::operator >> 0 1 820 0
61
inline SparseArray SparseArray::operator >>(int shift) const;

1725 11 operator &= 0 4 1899 24 SparseArray::operator &= 0 1 821 0
56
void SparseArray::operator &=(SparseArray const &other);

1726 11 operator |= 0 4 1899 24 SparseArray::operator |= 0 1 822 0
56
void SparseArray::operator |=(SparseArray const &other);

1727 11 operator ^= 0 4 1899 24 SparseArray::operator ^= 0 1 823 0
56
void SparseArray::operator ^=(SparseArray const &other);

1728 12 operator <<= 0 4 1899 25 SparseArray::operator <<= 0 1 824 0
49
inline void SparseArray::operator <<=(int shift);

1729 12 operator >>= 0 4 1899 25 SparseArray::operator >>= 0 1 825 0
49
inline void SparseArray::operator >>=(int shift);

1730 10 is_inverse 0 4 1899 23 SparseArray::is_inverse 0 1 826 330
/**
 * If this is true, the SparseArray is actually defined as a list of subranges
 * of integers that are *not* in the set.  If this is false (the default),
 * then the subranges define the integers that *are* in the set.  This affects
 * the interpretation of the values returned by iterating through
 * get_num_subranges().
 */
48
inline bool SparseArray::is_inverse(void) const;

1731 17 get_num_subranges 0 4 1899 30 SparseArray::get_num_subranges 0 1 827 237
/**
 * Returns the number of separate subranges stored in the SparseArray.  You
 * can use this limit to iterate through the subranges, calling
 * get_subrange_begin() and get_subrange_end() for each one.
 *
 * Also see is_inverse().
 */
62
inline std::size_t SparseArray::get_num_subranges(void) const;

1732 18 get_subrange_begin 0 4 1899 31 SparseArray::get_subrange_begin 0 1 828 94
/**
 * Returns the first numeric element in the nth subrange.
 *
 * Also see is_inverse().
 */
64
inline int SparseArray::get_subrange_begin(std::size_t n) const;

1733 16 get_subrange_end 0 4 1899 29 SparseArray::get_subrange_end 0 1 829 104
/**
 * Returns the last numeric element, plus one, in the nth subrange.
 *
 * Also see is_inverse().
 */
62
inline int SparseArray::get_subrange_end(std::size_t n) const;

1734 14 get_class_type 0 4 1899 27 SparseArray::get_class_type 0 1 830 0
52
static TypeHandle SparseArray::get_class_type(void);

1735 12 ~SparseArray 0 4 1899 25 SparseArray::~SparseArray 0 0 0
32
SparseArray::~SparseArray(void);

1736 14 get_value_type 0 6 1900 30 ParamValueBase::get_value_type 0 1 831 52
/**
 * Returns the type of the underlying value.
 */
69
virtual inline TypeHandle ParamValueBase::get_value_type(void) const;

1737 6 output 0 6 1900 22 ParamValueBase::output 0 1 832 0
60
virtual void ParamValueBase::output(ostream &out) const = 0;

1738 14 get_class_type 0 4 1900 30 ParamValueBase::get_class_type 0 1 833 0
55
static TypeHandle ParamValueBase::get_class_type(void);

1739 18 ParamTypedRefCount 0 4 1901 38 ParamTypedRefCount::ParamTypedRefCount 0 1 834 10
/**
 *
 */
80
inline ParamTypedRefCount::ParamTypedRefCount(TypedReferenceCount const *value);

1740 9 get_value 0 4 1901 29 ParamTypedRefCount::get_value 0 1 835 55
/**
 * Retrieves the value stored in the parameter.
 */
70
inline TypedReferenceCount *ParamTypedRefCount::get_value(void) const;

1741 14 get_class_type 0 4 1901 34 ParamTypedRefCount::get_class_type 0 1 836 0
59
static TypeHandle ParamTypedRefCount::get_class_type(void);

1742 10 ParamValue 0 4 1903 32 ParamValue< string >::ParamValue 0 1 837 0
66
inline ParamValue< string >::ParamValue(std::string const &value);

1743 9 set_value 0 4 1903 31 ParamValue< string >::set_value 0 1 838 0
134
inline void ParamValue< string >::set_value(std::string const &value);
inline void ParamValue< string >::set_value(Type const &value);

1744 9 get_value 0 4 1903 31 ParamValue< string >::get_value 0 1 839 0
70
inline std::string const &ParamValue< string >::get_value(void) const;

1745 14 get_class_type 0 4 1903 36 ParamValue< string >::get_class_type 0 1 840 0
61
static TypeHandle ParamValue< string >::get_class_type(void);

1746 10 ParamValue 0 4 1906 33 ParamValue< wstring >::ParamValue 0 1 841 0
68
inline ParamValue< wstring >::ParamValue(std::wstring const &value);

1747 9 set_value 0 4 1906 32 ParamValue< wstring >::set_value 0 1 842 0
137
inline void ParamValue< wstring >::set_value(std::wstring const &value);
inline void ParamValue< wstring >::set_value(Type const &value);

1748 9 get_value 0 4 1906 32 ParamValue< wstring >::get_value 0 1 843 0
72
inline std::wstring const &ParamValue< wstring >::get_value(void) const;

1749 14 get_class_type 0 4 1906 37 ParamValue< wstring >::get_class_type 0 1 844 0
62
static TypeHandle ParamValue< wstring >::get_class_type(void);

1750 10 ParamValue 0 4 1908 36 ParamValue< LVecBase2d >::ParamValue 0 1 845 0
69
inline ParamValue< LVecBase2d >::ParamValue(LVecBase2d const &value);

1751 9 set_value 0 4 1908 35 ParamValue< LVecBase2d >::set_value 0 1 846 0
141
inline void ParamValue< LVecBase2d >::set_value(LVecBase2d const &value);
inline void ParamValue< LVecBase2d >::set_value(Type const &value);

1752 9 get_value 0 4 1908 35 ParamValue< LVecBase2d >::get_value 0 1 847 0
73
inline LVecBase2d const &ParamValue< LVecBase2d >::get_value(void) const;

1753 14 get_class_type 0 4 1908 40 ParamValue< LVecBase2d >::get_class_type 0 1 848 0
65
static TypeHandle ParamValue< LVecBase2d >::get_class_type(void);

1754 10 ParamValue 0 4 1910 36 ParamValue< LVecBase2f >::ParamValue 0 1 849 0
69
inline ParamValue< LVecBase2f >::ParamValue(LVecBase2f const &value);

1755 9 set_value 0 4 1910 35 ParamValue< LVecBase2f >::set_value 0 1 850 0
141
inline void ParamValue< LVecBase2f >::set_value(LVecBase2f const &value);
inline void ParamValue< LVecBase2f >::set_value(Type const &value);

1756 9 get_value 0 4 1910 35 ParamValue< LVecBase2f >::get_value 0 1 851 0
73
inline LVecBase2f const &ParamValue< LVecBase2f >::get_value(void) const;

1757 14 get_class_type 0 4 1910 40 ParamValue< LVecBase2f >::get_class_type 0 1 852 0
65
static TypeHandle ParamValue< LVecBase2f >::get_class_type(void);

1758 10 ParamValue 0 4 1912 36 ParamValue< LVecBase2i >::ParamValue 0 1 853 0
69
inline ParamValue< LVecBase2i >::ParamValue(LVecBase2i const &value);

1759 9 set_value 0 4 1912 35 ParamValue< LVecBase2i >::set_value 0 1 854 0
141
inline void ParamValue< LVecBase2i >::set_value(LVecBase2i const &value);
inline void ParamValue< LVecBase2i >::set_value(Type const &value);

1760 9 get_value 0 4 1912 35 ParamValue< LVecBase2i >::get_value 0 1 855 0
73
inline LVecBase2i const &ParamValue< LVecBase2i >::get_value(void) const;

1761 14 get_class_type 0 4 1912 40 ParamValue< LVecBase2i >::get_class_type 0 1 856 0
65
static TypeHandle ParamValue< LVecBase2i >::get_class_type(void);

1762 10 ParamValue 0 4 1914 36 ParamValue< LVecBase3d >::ParamValue 0 1 857 0
69
inline ParamValue< LVecBase3d >::ParamValue(LVecBase3d const &value);

1763 9 set_value 0 4 1914 35 ParamValue< LVecBase3d >::set_value 0 1 858 0
141
inline void ParamValue< LVecBase3d >::set_value(LVecBase3d const &value);
inline void ParamValue< LVecBase3d >::set_value(Type const &value);

1764 9 get_value 0 4 1914 35 ParamValue< LVecBase3d >::get_value 0 1 859 0
73
inline LVecBase3d const &ParamValue< LVecBase3d >::get_value(void) const;

1765 14 get_class_type 0 4 1914 40 ParamValue< LVecBase3d >::get_class_type 0 1 860 0
65
static TypeHandle ParamValue< LVecBase3d >::get_class_type(void);

1766 10 ParamValue 0 4 1916 36 ParamValue< LVecBase3f >::ParamValue 0 1 861 0
69
inline ParamValue< LVecBase3f >::ParamValue(LVecBase3f const &value);

1767 9 set_value 0 4 1916 35 ParamValue< LVecBase3f >::set_value 0 1 862 0
141
inline void ParamValue< LVecBase3f >::set_value(LVecBase3f const &value);
inline void ParamValue< LVecBase3f >::set_value(Type const &value);

1768 9 get_value 0 4 1916 35 ParamValue< LVecBase3f >::get_value 0 1 863 0
73
inline LVecBase3f const &ParamValue< LVecBase3f >::get_value(void) const;

1769 14 get_class_type 0 4 1916 40 ParamValue< LVecBase3f >::get_class_type 0 1 864 0
65
static TypeHandle ParamValue< LVecBase3f >::get_class_type(void);

1770 10 ParamValue 0 4 1918 36 ParamValue< LVecBase3i >::ParamValue 0 1 865 0
69
inline ParamValue< LVecBase3i >::ParamValue(LVecBase3i const &value);

1771 9 set_value 0 4 1918 35 ParamValue< LVecBase3i >::set_value 0 1 866 0
141
inline void ParamValue< LVecBase3i >::set_value(LVecBase3i const &value);
inline void ParamValue< LVecBase3i >::set_value(Type const &value);

1772 9 get_value 0 4 1918 35 ParamValue< LVecBase3i >::get_value 0 1 867 0
73
inline LVecBase3i const &ParamValue< LVecBase3i >::get_value(void) const;

1773 14 get_class_type 0 4 1918 40 ParamValue< LVecBase3i >::get_class_type 0 1 868 0
65
static TypeHandle ParamValue< LVecBase3i >::get_class_type(void);

1774 10 ParamValue 0 4 1920 36 ParamValue< LVecBase4d >::ParamValue 0 1 869 0
69
inline ParamValue< LVecBase4d >::ParamValue(LVecBase4d const &value);

1775 9 set_value 0 4 1920 35 ParamValue< LVecBase4d >::set_value 0 1 870 0
141
inline void ParamValue< LVecBase4d >::set_value(LVecBase4d const &value);
inline void ParamValue< LVecBase4d >::set_value(Type const &value);

1776 9 get_value 0 4 1920 35 ParamValue< LVecBase4d >::get_value 0 1 871 0
73
inline LVecBase4d const &ParamValue< LVecBase4d >::get_value(void) const;

1777 14 get_class_type 0 4 1920 40 ParamValue< LVecBase4d >::get_class_type 0 1 872 0
65
static TypeHandle ParamValue< LVecBase4d >::get_class_type(void);

1778 10 ParamValue 0 4 1922 36 ParamValue< LVecBase4f >::ParamValue 0 1 873 0
69
inline ParamValue< LVecBase4f >::ParamValue(LVecBase4f const &value);

1779 9 set_value 0 4 1922 35 ParamValue< LVecBase4f >::set_value 0 1 874 0
141
inline void ParamValue< LVecBase4f >::set_value(LVecBase4f const &value);
inline void ParamValue< LVecBase4f >::set_value(Type const &value);

1780 9 get_value 0 4 1922 35 ParamValue< LVecBase4f >::get_value 0 1 875 0
73
inline LVecBase4f const &ParamValue< LVecBase4f >::get_value(void) const;

1781 14 get_class_type 0 4 1922 40 ParamValue< LVecBase4f >::get_class_type 0 1 876 0
65
static TypeHandle ParamValue< LVecBase4f >::get_class_type(void);

1782 10 ParamValue 0 4 1924 36 ParamValue< LVecBase4i >::ParamValue 0 1 877 0
69
inline ParamValue< LVecBase4i >::ParamValue(LVecBase4i const &value);

1783 9 set_value 0 4 1924 35 ParamValue< LVecBase4i >::set_value 0 1 878 0
141
inline void ParamValue< LVecBase4i >::set_value(LVecBase4i const &value);
inline void ParamValue< LVecBase4i >::set_value(Type const &value);

1784 9 get_value 0 4 1924 35 ParamValue< LVecBase4i >::get_value 0 1 879 0
73
inline LVecBase4i const &ParamValue< LVecBase4i >::get_value(void) const;

1785 14 get_class_type 0 4 1924 40 ParamValue< LVecBase4i >::get_class_type 0 1 880 0
65
static TypeHandle ParamValue< LVecBase4i >::get_class_type(void);

1786 10 ParamValue 0 4 1926 35 ParamValue< LMatrix3d >::ParamValue 0 1 881 0
67
inline ParamValue< LMatrix3d >::ParamValue(LMatrix3d const &value);

1787 9 set_value 0 4 1926 34 ParamValue< LMatrix3d >::set_value 0 1 882 0
138
inline void ParamValue< LMatrix3d >::set_value(LMatrix3d const &value);
inline void ParamValue< LMatrix3d >::set_value(Type const &value);

1788 9 get_value 0 4 1926 34 ParamValue< LMatrix3d >::get_value 0 1 883 0
71
inline LMatrix3d const &ParamValue< LMatrix3d >::get_value(void) const;

1789 14 get_class_type 0 4 1926 39 ParamValue< LMatrix3d >::get_class_type 0 1 884 0
64
static TypeHandle ParamValue< LMatrix3d >::get_class_type(void);

1790 10 ParamValue 0 4 1928 35 ParamValue< LMatrix3f >::ParamValue 0 1 885 0
67
inline ParamValue< LMatrix3f >::ParamValue(LMatrix3f const &value);

1791 9 set_value 0 4 1928 34 ParamValue< LMatrix3f >::set_value 0 1 886 0
138
inline void ParamValue< LMatrix3f >::set_value(LMatrix3f const &value);
inline void ParamValue< LMatrix3f >::set_value(Type const &value);

1792 9 get_value 0 4 1928 34 ParamValue< LMatrix3f >::get_value 0 1 887 0
71
inline LMatrix3f const &ParamValue< LMatrix3f >::get_value(void) const;

1793 14 get_class_type 0 4 1928 39 ParamValue< LMatrix3f >::get_class_type 0 1 888 0
64
static TypeHandle ParamValue< LMatrix3f >::get_class_type(void);

1794 10 ParamValue 0 4 1930 35 ParamValue< LMatrix4d >::ParamValue 0 1 889 0
67
inline ParamValue< LMatrix4d >::ParamValue(LMatrix4d const &value);

1795 9 set_value 0 4 1930 34 ParamValue< LMatrix4d >::set_value 0 1 890 0
138
inline void ParamValue< LMatrix4d >::set_value(LMatrix4d const &value);
inline void ParamValue< LMatrix4d >::set_value(Type const &value);

1796 9 get_value 0 4 1930 34 ParamValue< LMatrix4d >::get_value 0 1 891 0
71
inline LMatrix4d const &ParamValue< LMatrix4d >::get_value(void) const;

1797 14 get_class_type 0 4 1930 39 ParamValue< LMatrix4d >::get_class_type 0 1 892 0
64
static TypeHandle ParamValue< LMatrix4d >::get_class_type(void);

1798 10 ParamValue 0 4 1932 35 ParamValue< LMatrix4f >::ParamValue 0 1 893 0
67
inline ParamValue< LMatrix4f >::ParamValue(LMatrix4f const &value);

1799 9 set_value 0 4 1932 34 ParamValue< LMatrix4f >::set_value 0 1 894 0
138
inline void ParamValue< LMatrix4f >::set_value(LMatrix4f const &value);
inline void ParamValue< LMatrix4f >::set_value(Type const &value);

1800 9 get_value 0 4 1932 34 ParamValue< LMatrix4f >::get_value 0 1 895 0
71
inline LMatrix4f const &ParamValue< LMatrix4f >::get_value(void) const;

1801 14 get_class_type 0 4 1932 39 ParamValue< LMatrix4f >::get_class_type 0 1 896 0
64
static TypeHandle ParamValue< LMatrix4f >::get_class_type(void);

1802 14 get_class_type 0 4 1939 36 WritableConfigurable::get_class_type 0 1 897 0
61
static TypeHandle WritableConfigurable::get_class_type(void);

1803 21 ~WritableConfigurable 0 4 1939 43 WritableConfigurable::~WritableConfigurable 0 0 0
50
WritableConfigurable::~WritableConfigurable(void);

1804 17 UniqueIdAllocator 0 4 1940 36 UniqueIdAllocator::UniqueIdAllocator 0 2 898 899 56
/**
 * Create a free id pool in the range [min:max].
 */
156
UniqueIdAllocator::UniqueIdAllocator(uint32_t min = 0, uint32_t max = 20);
inline UniqueIdAllocator::UniqueIdAllocator(UniqueIdAllocator const &) = default;

1805 18 ~UniqueIdAllocator 0 4 1940 37 UniqueIdAllocator::~UniqueIdAllocator 0 0 10
/**
 *
 */
44
UniqueIdAllocator::~UniqueIdAllocator(void);

1806 8 allocate 0 4 1940 27 UniqueIdAllocator::allocate 0 1 900 134
/**
 * Returns an id between _min and _max (that were passed to the constructor).
 * IndexEnd is returned if no ids are available.
 */
43
uint32_t UniqueIdAllocator::allocate(void);

1807 18 initial_reserve_id 0 4 1940 37 UniqueIdAllocator::initial_reserve_id 0 1 901 518
/**
 * This may be called to mark a particular id as having already been allocated
 * (for instance, by a prior pass).  The specified id is removed from the
 * available pool.
 *
 * Because of the limitations of this algorithm, this is most efficient when
 * it is called before the first call to allocate(), and when all the calls to
 * initial_reserve_id() are made in descending order by id.  However, this is
 * a performance warning only; if performance is not an issue, any id may be
 * reserved at any time.
 */
56
void UniqueIdAllocator::initial_reserve_id(uint32_t id);

1808 4 free 0 4 1940 23 UniqueIdAllocator::free 0 1 902 112
/**
 * Free an allocated index (index must be between _min and _max that were
 * passed to the constructor).
 */
45
void UniqueIdAllocator::free(uint32_t index);

1809 13 fraction_used 0 4 1940 32 UniqueIdAllocator::fraction_used 0 1 903 117
/**
 * return the decimal fraction of the pool that is used.  The range is 0 to
 * 1.0 (e.g.  75% would be 0.75).
 */
57
PN_stdfloat UniqueIdAllocator::fraction_used(void) const;

1810 6 output 0 4 1940 25 UniqueIdAllocator::output 0 1 904 42
/**
 * ...intended for debugging only.
 */
51
void UniqueIdAllocator::output(ostream &out) const;

1811 5 write 0 4 1940 24 UniqueIdAllocator::write 0 1 905 42
/**
 * ...intended for debugging only.
 */
50
void UniqueIdAllocator::write(ostream &out) const;

1812 39 py_decode_TypedWritable_from_bam_stream 0 1 0 39 py_decode_TypedWritable_from_bam_stream 0 1 914 203
/**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This hooks into the native pickle and cPickle modules, but it cannot
 * properly handle self-referential BAM objects.
 */
97
PyObject *py_decode_TypedWritable_from_bam_stream(PyObject *this_class, std::string const &data);

1813 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 0 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 915 398
/**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This is similar to py_decode_TypedWritable_from_bam_stream, but it provides
 * additional support for the missing persistent-state object needed to
 * properly support self-referential BAM objects written to the pickle stream.
 * This hooks into the pickle and cPickle modules implemented in
 * direct/src/stdpy.
 */
126
PyObject *py_decode_TypedWritable_from_bam_stream_persist(PyObject *unpickler, PyObject *this_class, std::string const &data);

915
1 0 0 7 8 1944 929 0 0 1 4 copy 1 1942  
2 0 0 7 8 1944 929 0 0 1 4 copy 1 1945  
3 0 0 6 9 1947 0 0 0 1 4 this 3 1942  
4 0 0 6 10 1948 0 0 0 2 4 this 3 1942  1 n 1 1947  
5 0 0 6 11 1948 0 0 0 2 4 this 3 1942  1 n 1 1947  
6 0 0 6 12 1850 0 0 0 1 4 this 3 1942  
7 0 0 6 13 1850 0 0 0 3 4 this 3 1942  1 n 1 1947  5 count 1 1947  
8 0 0 6 14 1821 0 0 0 1 4 this 3 1942  
9 0 0 6 15 1821 0 0 0 1 4 this 3 1942  
10 0 0 6 16 1821 0 0 0 3 4 this 3 1942  4 view 1 1950  5 flags 1 1821  
11 0 0 4 17 1953 0 0 0 2 4 this 3 1942  4 view 1 1950  
12 0 0 4 5 1953 0 0 0 1 4 this 3 1954  
13 0 0 4 6 1953 0 0 0 2 4 this 3 1955  3 out 1 1957  
14 0 0 7 20 1958 947 0 0 1 4 copy 1 1945  
15 0 0 7 20 1958 947 0 0 1 6 source 1 1850  
16 0 0 7 20 1958 947 0 0 1 11 type_handle 1 1959  
17 0 0 7 21 1958 947 0 0 2 1 n 1 1947  11 type_handle 1 1959  
18 0 0 6 22 1947 0 0 0 1 4 this 3 1945  
19 0 0 4 23 1953 0 0 0 2 4 this 3 1958  1 x 1 1948  
20 0 0 4 24 1953 0 0 0 1 4 this 3 1958  
21 0 0 6 25 1948 0 0 0 2 4 this 3 1945  1 n 1 1947  
22 0 0 4 26 1953 0 0 0 3 4 this 3 1958  1 n 1 1947  5 value 1 1948  
23 0 0 6 27 1948 0 0 0 2 4 this 3 1945  1 n 1 1947  
24 0 0 4 28 1953 0 0 0 3 4 this 3 1958  1 n 1 1947  5 value 1 1948  
25 0 0 6 29 1850 0 0 0 1 4 this 3 1945  
26 0 0 4 30 1953 0 0 0 2 4 this 3 1958  4 data 1 1850  
27 0 0 6 31 1850 0 0 0 3 4 this 3 1945  1 n 1 1947  5 count 1 1947  
28 0 0 4 32 1953 0 0 0 4 4 this 3 1958  1 n 1 1947  5 count 1 1947  4 data 1 1961  
29 0 0 6 33 1821 0 0 0 1 4 this 3 1945  
30 0 0 6 34 1821 0 0 0 1 4 this 3 1945  
31 0 0 6 35 1821 0 0 0 3 4 this 3 1958  4 view 1 1950  5 flags 1 1821  
32 0 0 4 36 1953 0 0 0 2 4 this 3 1945  4 view 1 1950  
33 0 0 4 40 1953 0 0 69 /**
 * Runs the entire animation from beginning to end and stops.
 */ 1 4 this 3 1962  
34 0 0 4 40 1953 0 0 406 /**
 * Runs the animation from the frame "from" to and including the frame "to",
 * at which point the animation is stopped.  Both "from" and "to" frame
 * numbers may be outside the range (0, get_num_frames()) and the animation
 * will follow the range correctly, reporting numbers modulo get_num_frames().
 * For instance, play(0, get_num_frames() * 2) will play the animation twice
 * and then stop.
 */ 3 4 this 3 1962  4 from 1 1820  2 to 1 1820  
35 0 0 4 41 1953 0 0 169 /**
 * Starts the entire animation looping.  If restart is true, the animation is
 * restarted from the beginning; otherwise, it continues from the current
 * frame.
 */ 2 4 this 3 1962  7 restart 1 1822  
36 0 0 4 41 1953 0 0 221 /**
 * Loops the animation from the frame "from" to and including the frame "to",
 * indefinitely.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */ 4 4 this 3 1962  7 restart 1 1822  4 from 1 1820  2 to 1 1820  
37 0 0 4 42 1953 0 0 224 /**
 * Starts the entire animation bouncing back and forth between its first frame
 * and last frame.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */ 2 4 this 3 1962  7 restart 1 1822  
38 0 0 4 42 1953 0 0 143 /**
 * Loops the animation from the frame "from" to and including the frame "to",
 * and then back in the opposite direction, indefinitely.
 */ 4 4 this 3 1962  7 restart 1 1822  4 from 1 1820  2 to 1 1820  
39 0 0 4 43 1953 0 0 130 /**
 * Stops a currently playing or looping animation right where it is.  The
 * animation remains posed at the current frame.
 */ 1 4 this 3 1962  
40 0 0 4 44 1953 0 0 72 /**
 * Sets the animation to the indicated frame and holds it there.
 */ 2 4 this 3 1962  5 frame 1 1820  
41 0 0 4 45 1953 0 0 243 /**
 * Changes the rate at which the animation plays.  1.0 is the normal speed,
 * 2.0 is twice normal speed, and 0.5 is half normal speed.  0.0 is legal to
 * pause the animation, and a negative value will play the animation
 * backwards.
 */ 2 4 this 3 1962  9 play_rate 1 1820  
42 0 0 6 46 1820 0 0 79 /**
 * Returns the rate at which the animation plays.  See set_play_rate().
 */ 1 4 this 3 1963  
43 0 0 6 47 1820 0 0 234 /**
 * Returns the native frame rate of the animation.  This is the number of
 * frames per second that will elapse when the play_rate is set to 1.0.  It is
 * a fixed property of the animation and may not be adjusted by the user.
 */ 1 4 this 3 1963  
44 0 0 6 48 1821 0 0 278 /**
 * Returns the number of frames in the animation.  This is a property of the
 * animation and may not be directly adjusted by the user (although it may
 * change without warning with certain kinds of animations, since this is a
 * virtual method that may be overridden).
 */ 1 4 this 3 1963  
45 0 0 6 49 1821 0 0 116 /**
 * Returns the current integer frame number.  This number will be in the range
 * 0 <= f < get_num_frames().
 */ 1 4 this 3 1963  
46 0 0 6 50 1821 0 0 330 /**
 * Returns the current integer frame number + 1, constrained to the range 0 <=
 * f < get_num_frames().
 *
 * If the play mode is PM_play, this will clamp to the same value as
 * get_frame() at the end of the animation.  If the play mode is any other
 * value, this will wrap around to frame 0 at the end of the animation.
 */ 1 4 this 3 1963  
47 0 0 6 51 1820 0 0 314 /**
 * Returns the fractional part of the current frame.  Normally, this is in the
 * range 0.0 <= f < 1.0, but in the one special case of an animation playing
 * to its end frame and stopping, it might exactly equal 1.0.
 *
 * It will always be true that get_full_frame() + get_frac() ==
 * get_full_fframe().
 */ 1 4 this 3 1963  
48 0 0 6 52 1821 0 0 372 /**
 * Returns the current integer frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_fframe(), this return value will
 * never exceed the value passed to to_frame in the play() method.
 */ 1 4 this 3 1963  
49 0 0 6 53 1820 0 0 490 /**
 * Returns the current floating-point frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_frame(), this return value may equal
 * (to_frame + 1.0), when the animation has played to its natural end.
 * However, in this case the return value of get_full_frame() will be
 * to_frame, not (to_frame + 1).
 */ 1 4 this 3 1963  
50 0 0 6 54 1822 0 0 208 /**
 * Returns true if the animation is currently playing, false if it is stopped
 * (e.g.  because stop() or pose() was called, or because it reached the end
 * of the animation after play() was called).
 */ 1 4 this 3 1963  
51 0 0 4 55 1953 0 0 10 /**
 *
 */ 2 4 this 3 1963  3 out 1 1957  
52 0 0 7 68 1959 0 0 0 0 
53 0 0 7 71 1965 986 0 55 /**
 * Creates an UpdateSeq in the 'initial' state.
 */ 0 
54 0 0 7 71 1965 986 0 10 /**
 *
 */ 1 4 copy 1 1966  
55 0 0 7 72 1965 986 0 55 /**
 * Returns an UpdateSeq in the 'initial' state.
 */ 0 
56 0 0 7 73 1965 986 0 51 /**
 * Returns an UpdateSeq in the 'old' state.
 */ 0 
57 0 0 7 74 1965 986 0 53 /**
 * Returns an UpdateSeq in the 'fresh' state.
 */ 0 
58 0 0 6 75 1965 0 0 10 /**
 *
 */ 2 4 this 3 1965  4 copy 1 1966  
59 0 0 4 76 1953 0 0 55 /**
 * Resets the UpdateSeq to the 'initial' state.
 */ 1 4 this 3 1965  
60 0 0 6 77 1822 0 0 67 /**
 * Returns true if the UpdateSeq is in the 'initial' state.
 */ 1 4 this 3 1966  
61 0 0 6 78 1822 0 0 63 /**
 * Returns true if the UpdateSeq is in the 'old' state.
 */ 1 4 this 3 1966  
62 0 0 6 79 1822 0 0 65 /**
 * Returns true if the UpdateSeq is in the 'fresh' state.
 */ 1 4 this 3 1966  
63 0 0 6 80 1822 0 0 105 /**
 * Returns true if the UpdateSeq is in any special states, i.e.  'initial',
 * 'old', or 'fresh'.
 */ 1 4 this 3 1966  
64 0 0 6 81 1822 0 0 0 2 4 this 3 1966  5 other 1 1966  
65 0 0 6 82 1822 0 0 0 2 4 this 3 1966  5 other 1 1966  
66 0 0 6 83 1822 0 0 0 2 4 this 3 1966  5 other 1 1966  
67 0 0 6 84 1822 0 0 0 2 4 this 3 1966  5 other 1 1966  
68 0 0 6 85 1822 0 0 0 2 4 this 3 1966  5 other 1 1966  
69 0 0 6 86 1822 0 0 0 2 4 this 3 1966  5 other 1 1966  
70 0 0 7 87 1965 986 0 0 1 4 this 3 1965  
71 0 0 7 88 1965 986 0 0 2 4 this 3 1965  6 param0 0 1821  
72 0 0 6 89 1825 0 0 107 /**
 * Returns the internal integer value associated with the UpdateSeq.  Useful
 * for debugging only.
 */ 1 4 this 3 1966  
73 0 0 4 94 1953 0 0 10 /**
 *
 */ 2 4 this 3 1966  3 out 1 1957  
74 0 0 4 98 1953 0 0 308 /**
 * This internal function is intended to be called by each class's
 * make_from_bam() method to read in all of the relevant data from the BamFile
 * for the new object.  It is also called directly by the BamReader to re-read
 * the data for an object that has been placed on the stream for an update.
 */ 3 4 this 3 1837  4 scan 1 1968  7 manager 1 1970  
75 0 0 4 99 1953 0 0 345 /**
 * Increments the bam_modified counter, so that this object will be
 * invalidated and retransmitted on any open bam streams.  This should
 * normally not need to be called by user code; it should be called internally
 * when the object has been changed in a way that legitimately requires its
 * retransmission to any connected clients.
 */ 1 4 this 3 1837  
76 0 0 7 100 1965 986 0 140 /**
 * Returns the current bam_modified counter.  This counter is normally
 * incremented automatically whenever the object is modified.
 */ 1 4 this 3 1971  
77 0 0 6 101 1850 0 0 0 1 4 this 3 1971  
78 0 0 6 102 1850 0 0 0 2 4 this 3 1971  7 pickler 1 1850  
79 0 0 6 103 1961 0 0 415 /**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and returns that data as a string string.  Returns empty string
 * on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */ 1 4 this 3 1971  
80 0 0 7 105 1959 0 0 0 0 
81 0 0 7 112 1973 1001 0 492 /**
 * Reads the string created by a previous call to encode_to_bam_stream(), and
 * extracts and returns the single object on that string.  Returns NULL on
 * error.
 *
 * This method is intended to replace decode_raw_from_bam_stream() when you
 * know the stream in question returns an object of type
 * TypedWritableReferenceCount, allowing for easier reference count
 * management.  Note that the caller is still responsible for maintaining the
 * reference count on the return value.
 */ 2 4 data 1 1961  6 reader 1 1970  
82 0 0 7 113 1959 0 0 0 0 
83 0 0 6 107 1837 0 0 0 1 4 this 3 1973  
84 0 0 7 108 1973 1001 0 0 1 4 this 3 1837  
85 0 0 7 110 1974 0 0 0 1 4 this 3 1973  
86 0 0 7 111 1973 1001 0 0 1 4 this 3 1974  
87 0 0 7 122 1977 1006 0 179 /**
 * Returns a duplicate of the BamCacheRecord.  The duplicate will not have a
 * data pointer set, even though one may have been assigned to the original
 * via set_data().
 */ 1 4 this 3 1975  
88 0 0 6 123 1822 0 0 0 2 4 this 3 1975  5 other 1 1975  
89 0 0 6 124 1978 0 0 237 /**
 * Returns the full pathname to the source file that originally generated this
 * cache request.  In some cases, for instance in the case of a of a multipage
 * texture like "cube_#.png", this may not not a true filename on disk.
 */ 1 4 this 3 1975  
90 0 0 6 125 1978 0 0 230 /**
 * Returns the name of the cache file as hashed from the source_pathname.
 * This will be relative to the root of the cache directory, and it will not
 * include any suffixes that may be appended to resolve hash conflicts.
 */ 1 4 this 3 1975  
91 0 0 6 126 1836 0 0 204 /**
 * Returns the file timestamp of the original source file that generated this
 * cache record, if available.  In some cases the original file timestamp is
 * not available, and this will return 0.
 */ 1 4 this 3 1975  
92 0 0 6 127 1836 0 0 84 /**
 * Returns the time at which this particular record was recorded or updated.
 */ 1 4 this 3 1975  
93 0 0 6 135 1821 0 0 75 /**
 * Returns the number of source files that contribute to the cache.
 */ 1 4 this 3 1975  
94 0 0 6 136 1978 0 0 94 /**
 * Returns the full pathname of the nth source files that contributes to the
 * cache.
 */ 2 4 this 3 1975  1 n 1 1821  
95 0 0 6 137 1822 0 0 124 /**
 * Returns true if all of the dependent files are still the same as when the
 * cache was recorded, false otherwise.
 */ 1 4 this 3 1975  
96 0 0 4 138 1953 0 0 80 /**
 * Empties the list of files that contribute to the data in this record.
 */ 1 4 this 3 1977  
97 0 0 4 139 1953 0 0 225 /**
 * Adds the indicated file to the list of files that will be loaded to
 * generate the data in this record.  This should be called once for the
 * primary source file, and again for each secondary source file, if any.
 */ 2 4 this 3 1977  8 pathname 1 1978  
98 0 0 4 139 1953 0 0 82 /**
 * Variant of add_dependent_file that takes an already opened VirtualFile.
 */ 2 4 this 3 1977  4 file 1 1979  
99 0 0 6 140 1822 0 0 130 /**
 * Returns true if this cache record has an in-memory data object associated--
 * that is, the object stored in the cache.
 */ 1 4 this 3 1975  
100 0 0 4 141 1953 0 0 147 /**
 * Removes the in-memory data object associated with this record, if any.
 * This does not affect the on-disk representation of the record.
 */ 1 4 this 3 1977  
101 0 0 6 142 1837 0 0 139 /**
 * Returns a pointer to the data stored in the record, or NULL if there is no
 * data.  The pointer is not removed from the record.
 */ 1 4 this 3 1975  
102 0 0 4 144 1953 0 0 104 /**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritable.
 */ 2 4 this 3 1977  3 ptr 1 1837  
103 0 0 4 144 1953 0 0 573 /**
 * Stores a new data object on the record.  You should pass the same pointer
 * twice, to both parameters; this allows the C++ typecasting to automatically
 * convert the pointer into both a TypedWritable and a ReferenceCount pointer,
 * so that the BamCacheRecord object can reliably manage the reference counts.
 *
 * You may pass 0 or NULL as the second parameter.  If you do this, the
 * BamCacheRecord will not manage the object's reference count; it will be up
 * to you to ensure the object is not deleted during the lifetime of the
 * BamCacheRecord object.
 */ 3 4 this 3 1977  3 ptr 1 1837  7 ref_ptr 1 1974  
104 0 0 4 144 1953 0 0 115 /**
 * This variant on set_data() is provided just to allow Python code to pass a
 * 0 as the second parameter.
 */ 3 4 this 3 1977  3 ptr 1 1837  5 dummy 1 1821  
105 0 0 4 144 1953 0 0 118 /**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritableReferenceCount.
 */ 2 4 this 3 1977  3 ptr 1 1973  
106 0 0 4 147 1953 0 0 10 /**
 *
 */ 2 4 this 3 1975  3 out 1 1957  
107 0 0 4 148 1953 0 0 10 /**
 *
 */ 3 4 this 3 1975  3 out 1 1957  12 indent_level 1 1821  
108 0 0 7 149 1959 0 0 0 0 
109 0 0 7 116 1973 1001 0 0 1 4 this 3 1977  
110 0 0 7 117 1977 1006 0 0 1 4 this 3 1973  
111 0 0 7 151 1982 1027 0 10 /**
 *
 */ 0 
112 0 0 4 153 1953 0 0 347 /**
 * Changes the state of the active flag.  "active" means that the cache should
 * be consulted automatically on loads, "not active" means that objects should
 * be loaded directly without consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */ 2 4 this 3 1982  4 flag 1 1822  
113 0 0 6 154 1822 0 0 381 /**
 * Returns true if the BamCache is currently active, false if it is not.
 * "active" means that the cache should be consulted automatically on loads,
 * "not active" means that objects should be loaded directly without
 * consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */ 1 4 this 3 1983  
114 0 0 4 155 1953 0 0 118 /**
 * Indicates whether model files (e.g.  egg files and bam files) will be
 * stored in the cache, as bam files.
 */ 2 4 this 3 1982  4 flag 1 1822  
115 0 0 6 156 1822 0 0 172 /**
 * Returns whether model files (e.g.  egg files and bam files) will be stored
 * in the cache, as bam files.
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1983  
116 0 0 4 157 1953 0 0 101 /**
 * Indicates whether texture files will be stored in the cache, as
 * uncompressed txo files.
 */ 2 4 this 3 1982  4 flag 1 1822  
117 0 0 6 158 1822 0 0 174 /**
 * Returns whether texture files (e.g.  egg files and bam files) will be
 * stored in the cache, as txo files.
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1983  
118 0 0 4 159 1953 0 0 722 /**
 * Indicates whether compressed texture files will be stored in the cache, as
 * compressed txo files.  The compressed data may either be generated in-CPU,
 * via the squish library, or it may be extracted from the GSG after the
 * texture has been loaded.
 *
 * This may be set in conjunction with set_cache_textures(), or independently
 * of it.  If set_cache_textures() is true and this is false, all textures
 * will be cached in their uncompressed form.  If set_cache_textures() is
 * false and this is true, only compressed textures will be cached, and they
 * will be cached in their compressed form.  If both are true, all textures
 * will be cached, in their uncompressed or compressed form appropriately.
 */ 2 4 this 3 1982  4 flag 1 1822  
119 0 0 6 160 1822 0 0 202 /**
 * Returns whether compressed texture files will be stored in the cache, as
 * compressed txo files.  See set_cache_compressed_textures().
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1983  
120 0 0 4 161 1953 0 0 184 /**
 * Indicates whether compiled shader programs will be stored in the cache, as
 * binary .sho files.  This may not be supported by all shader languages or
 * graphics renderers.
 */ 2 4 this 3 1982  4 flag 1 1822  
121 0 0 6 162 1822 0 0 196 /**
 * Returns whether compiled shader programs will be stored in the cache, as
 * binary .txo files.  See set_cache_compiled_shaders().
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1983  
122 0 0 4 163 1953 0 0 372 /**
 * Changes the current root pathname of the cache.  This specifies where the
 * cache files are stored on disk.  This should name a directory that is on a
 * disk local to the machine (not on a network-mounted disk), for instance,
 * /tmp/panda-cache or /c/panda-cache.
 *
 * If the directory does not already exist, it will be created as a result of
 * this call.
 */ 2 4 this 3 1982  4 root 1 1978  
123 0 0 7 164 1985 0 0 75 /**
 * Returns the current root pathname of the cache.  See set_root().
 */ 1 4 this 3 1983  
124 0 0 4 165 1953 0 0 86 /**
 * Specifies the time in seconds between automatic flushes of the cache index.
 */ 2 4 this 3 1982  10 flush_time 1 1821  
125 0 0 6 166 1821 0 0 84 /**
 * Returns the time in seconds between automatic flushes of the cache index.
 */ 1 4 this 3 1983  
126 0 0 4 167 1953 0 0 430 /**
 * Specifies the maximum size, in kilobytes, which the cache is allowed to
 * grow to.  If a newly cached file would exceed this size, an older file is
 * removed from the cache.
 *
 * Note that in the case of multiple different processes simultaneously
 * operating on the same cache directory, the actual cache size may slightly
 * exceed this value from time to time due to latency in checking between the
 * processes.
 */ 2 4 this 3 1982  10 max_kbytes 1 1821  
127 0 0 6 168 1821 0 0 121 /**
 * Returns the maximum size, in kilobytes, which the cache is allowed to grow
 * to.  See set_cache_max_kbytes().
 */ 1 4 this 3 1983  
128 0 0 4 169 1953 0 0 252 /**
 * Can be used to put the cache in read-only mode, or take it out of read-only
 * mode.  Note that if you put it into read-write mode, and it discovers that
 * it does not have write access, it will put itself right back into read-only
 * mode.
 */ 2 4 this 3 1982  2 ro 1 1822  
129 0 0 6 170 1822 0 0 230 /**
 * Returns true if the cache is in read-only mode.  Normally, the cache starts
 * in read-write mode.  It can put itself into read-only mode automatically if
 * it discovers that it does not have write access to the cache.
 */ 1 4 this 3 1983  
130 0 0 7 171 1977 1006 0 782 /**
 * Looks up a file in the cache.
 *
 * If the file is cacheable, then regardless of whether the file is found in
 * the cache or not, this returns a BamCacheRecord.  On the other hand, if the
 * file cannot be cached, returns NULL.
 *
 * If record->has_data() returns true, then the file was found in the cache,
 * and you may call record->extract_data() to get the object.  If
 * record->has_data() returns false, then the file was not found in the cache
 * or the cache was stale; and you should reload the source file (calling
 * record->add_dependent_file() for each file loaded, including the original
 * source file), and then call record->set_data() to record the resulting
 * loaded object; and finally, you should call store() to write the cached
 * record to disk.
 */ 3 4 this 3 1982  15 source_filename 1 1978  15 cache_extension 1 1961  
131 0 0 6 172 1822 0 0 212 /**
 * Flushes a cache entry to disk.  You must have retrieved the cache record
 * via a prior call to lookup(), and then stored the data via
 * record->set_data().  Returns true on success, false on failure.
 */ 2 4 this 3 1982  6 record 1 1977  
132 0 0 4 173 1953 0 0 92 /**
 * Flushes the index if enough time has elapsed since the index was last
 * flushed.
 */ 1 4 this 3 1982  
133 0 0 4 174 1953 0 0 48 /**
 * Ensures the index is written to disk.
 */ 1 4 this 3 1982  
134 0 0 4 175 1953 0 0 63 /**
 * Writes the contents of the index to standard output.
 */ 3 4 this 3 1983  3 out 1 1957  12 indent_level 1 1821  
135 0 0 6 176 1982 0 0 124 /**
 * Returns a pointer to the global BamCache object, which is used
 * automatically by the ModelPool and TexturePool.
 */ 0 
136 0 0 4 177 1953 0 0 84 /**
 * If there is a global BamCache object, calls consider_flush_index() on it.
 */ 0 
137 0 0 4 178 1953 0 0 75 /**
 * If there is a global BamCache object, calls flush_index() on it.
 */ 0 
138 0 0 7 192 1986 1055 0 0 0 
139 0 0 7 192 1986 1055 0 0 1 6 param0 0 1987  
140 0 0 7 197 1990 1067 0 10 /**
 *
 */ 1 4 copy 1 1989  
141 0 0 7 197 1990 1067 0 10 /**
 *
 */ 1 5 flags 1 1821  
142 0 0 7 197 1990 1067 0 10 /**
 *
 */ 2 5 flags 1 1821  13 texture_flags 1 1821  
143 0 0 6 198 1990 0 0 0 2 4 this 3 1990  4 copy 1 1989  
144 0 0 4 199 1953 0 0 10 /**
 *
 */ 2 4 this 3 1990  5 flags 1 1821  
145 0 0 6 200 1821 0 0 10 /**
 *
 */ 1 4 this 3 1989  
146 0 0 4 202 1953 0 0 10 /**
 *
 */ 2 4 this 3 1990  5 flags 1 1821  
147 0 0 6 203 1821 0 0 10 /**
 *
 */ 1 4 this 3 1989  
148 0 0 4 204 1953 0 0 459 /**
 * Specifies the expected number of views to load for the texture.  This is
 * ignored unless TF_multiview is included in texture_flags.  This must be
 * specified when loading a 3-d multiview texture or 2-d texture array, in
 * which case it is used to differentiate z levels from separate views; it
 * may be zero in the case of 2-d textures or cube maps, in which case the
 * number of views can be inferred from the number of images found on disk.
 */ 2 4 this 3 1990  9 num_views 1 1821  
149 0 0 6 205 1821 0 0 39 /**
 * See set_texture_num_views().
 */ 1 4 this 3 1989  
150 0 0 4 208 1953 0 0 209 /**
 * Set this flag to ATS_none, ATS_up, ATS_down, or ATS_pad to control how a
 * texture is scaled from disk when it is subsequently loaded.  Set it to
 * ATS_unspecified to restore the default behavior.
 */ 2 4 this 3 1990  5 scale 1 1823  
151 0 0 6 209 1823 0 0 40 /**
 * See set_auto_texture_scale().
 */ 1 4 this 3 1989  
152 0 0 4 211 1953 0 0 10 /**
 *
 */ 2 4 this 3 1989  3 out 1 1957  
153 0 0 7 214 1970 1069 0 38 // The primary interface for a caller. 1 6 source 1 1847  
154 0 0 4 216 1953 0 0 142 /**
 * Changes the source of future datagrams for this BamReader.  This also
 * implicitly calls init() if it has not already been called.
 */ 2 4 this 3 1970  6 source 1 1847  
155 0 0 6 217 1847 0 0 100 /**
 * Returns the current source of the BamReader as set by set_source() or the
 * constructor.
 */ 1 4 this 3 1970  
156 0 0 6 218 1822 0 0 210 /**
 * Initializes the BamReader prior to reading any objects from its source.
 * This includes reading the Bam header.
 *
 * This returns true if the BamReader successfully initialized, false
 * otherwise.
 */ 1 4 this 3 1970  
157 0 0 4 219 1953 0 0 1007 /**
 * Associates an arbitrary block of data with the indicated object (or NULL),
 * and the indicated name.
 *
 * This is intended to provide a place for temporary storage for objects
 * reading themselves from the bam file.  To use it, inherit from
 * BamReader::AuxData and store whatever data you like there.  Then associate
 * your AuxData with the object as it is being read with set_aux_data().  You
 * may later set the aux data to NULL to remove it; or it will automatically
 * be removed (and deleted) after finalize() is called for the object in
 * question.
 *
 * If the TypedWritable pointer is NULL, the the aux data is stored globally
 * for the BamReader in general.  This pointer is available to any bam
 * objects, and will not be automatically removed until the BamReader itself
 * destructs.
 *
 * In either case, the name is just an arbitrary user-defined key.  If there
 * is already a data pointer stored for the obj/name pair, that data pointer
 * will be replaced (and deleted).
 */ 4 4 this 3 1970  3 obj 1 1837  4 name 1 1961  4 data 1 1991  
158 0 0 7 220 1991 0 0 173 /**
 * Returns the pointer previously associated with the bam reader by a previous
 * call to set_aux_data(), or NULL if data with the indicated key has not been
 * set.
 */ 3 4 this 3 1993  3 obj 1 1837  4 name 1 1961  
159 0 0 6 221 1978 0 0 199 /**
 * If a BAM is a file, then the BamReader should contain the name of the file.
 * This enables the reader to interpret pathnames in the BAM as relative to
 * the directory containing the BAM.
 */ 1 4 this 3 1993  
160 0 0 6 222 1989 0 0 98 /**
 * Returns the LoaderOptions passed to the loader when the model was
 * requested, if any.
 */ 1 4 this 3 1993  
161 0 0 4 223 1953 0 0 58 /**
 * Specifies the LoaderOptions for this BamReader.
 */ 2 4 this 3 1970  7 options 1 1989  
162 0 0 6 224 1837 0 0 1059 /**
 * Reads a single object from the Bam file.  If the object type is known, a
 * new object of the appropriate type is created and returned; otherwise, NULL
 * is returned.  NULL is also returned when the end of the file is reached.
 * is_eof() may be called to differentiate between these two cases.
 *
 * This may be called repeatedly to extract out all the objects in the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is retrieved directly from the Bam file:
 * the root of the scene graph.  The remaining objects will all be retrieved
 * recursively by the first object.
 *
 * Note that the object returned may not yet be complete.  In particular, some
 * of its pointers may not be filled in; you must call resolve() to fill in
 * all the available pointers before you can safely use any objects returned
 * by read_object().
 *
 * This flavor of read_object() requires the caller to know what type of
 * object it has received in order to properly manage the reference counts.
 */ 1 4 this 3 1970  
163 0 0 6 225 1822 0 0 138 /**
 * Returns true if the reader has reached end-of-file, false otherwise.  This
 * call is only valid after a call to read_object().
 */ 1 4 this 3 1993  
164 0 0 6 226 1822 0 0 565 /**
 * This may be called at any time during processing of the Bam file to resolve
 * all the known pointers so far.  It is usually called at the end of the
 * processing, after all objects have been read, which is generally the best
 * time to call it.
 *
 * This must be called at least once after reading a particular object via
 * get_object() in order to validate that object.
 *
 * The return value is true if all objects have been resolved, or false if
 * some objects are still outstanding (in which case you will need to call
 * resolve() again later).
 */ 1 4 this 3 1970  
165 0 0 6 227 1822 0 0 406 /**
 * Indicates that an object recently read from the bam stream should be
 * replaced with a new object.  Any future occurrences of the original object
 * in the stream will henceforth return the new object instead.
 *
 * The return value is true if the replacement was successfully made, or false
 * if the object was not read from the stream (or if change_pointer had
 * already been called on it).
 */ 3 4 this 3 1970  12 orig_pointer 1 1971  11 new_pointer 1 1971  
166 0 0 6 228 1821 0 0 81 /**
 * Returns the major version number of the Bam file currently being read.
 */ 1 4 this 3 1993  
167 0 0 6 229 1821 0 0 81 /**
 * Returns the minor version number of the Bam file currently being read.
 */ 1 4 this 3 1993  
168 0 0 6 230 1840 0 0 254 /**
 * Returns the endian preference indicated by the Bam file currently being
 * read.  This does not imply that every number is stored using the indicated
 * convention, but individual objects may choose to respect this flag when
 * recording data.
 */ 1 4 this 3 1993  
169 0 0 6 231 1822 0 0 220 /**
 * Returns true if the file stores all "standard" floats as 64-bit doubles, or
 * false if they are 32-bit floats.  This is determined by the compilation
 * flags of the version of Panda that generated this file.
 */ 1 4 this 3 1993  
170 0 0 6 232 1821 0 0 174 /**
 * Returns the major version number of Bam files supported by the current code
 * base.  This must match get_file_major_ver() in order to successfully read a
 * file.
 */ 1 4 this 3 1993  
171 0 0 6 233 1821 0 0 184 /**
 * Returns the minor version number of Bam files supported by the current code
 * base.  This must match or exceed get_file_minor_ver() in order to
 * successfully read a file.
 */ 1 4 this 3 1993  
172 0 0 6 234 1850 0 0 0 1 4 this 3 1993  
173 0 0 4 247 1953 0 0 0 2 6 handle 1 1959  4 func 1 1850  
174 0 0 7 249 1997 1091 0 0 1 6 param0 0 1995  
175 0 0 7 249 1997 1091 0 10 /**
 *
 */ 1 6 target 1 1854  
176 0 0 4 251 1953 0 0 153 /**
 * Changes the destination of future datagrams written by the BamWriter.  This
 * also implicitly calls init() if it has not already been called.
 */ 2 4 this 3 1997  6 target 1 1854  
177 0 0 6 252 1854 0 0 100 /**
 * Returns the current target of the BamWriter as set by set_target() or the
 * constructor.
 */ 1 4 this 3 1997  
178 0 0 6 253 1822 0 0 220 /**
 * Initializes the BamWriter prior to writing any objects to its output
 * stream.  This includes writing out the Bam header.
 *
 * This returns true if the BamWriter successfully initialized, false
 * otherwise.
 */ 1 4 this 3 1997  
179 0 0 6 254 1978 0 0 197 /**
 * If a BAM is a file, then the BamWriter should contain the name of the file.
 * This enables the writer to convert pathnames in the BAM to relative to the
 * directory containing the BAM.
 */ 1 4 this 3 1995  
180 0 0 6 255 1822 0 0 736 /**
 * Writes a single object to the Bam file, so that the
 * BamReader::read_object() can later correctly restore the object and all its
 * pointers.
 *
 * This implicitly also writes any additional objects this object references
 * (if they haven't already been written), so that pointers may be fully
 * resolved.
 *
 * This may be called repeatedly to write a sequence of objects to the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is written directly from the Bam file: the
 * root of the scene graph.  The remaining objects will all be written
 * recursively by the first object.
 *
 * Returns true if the object is successfully written, false otherwise.
 */ 2 4 this 3 1997  3 obj 1 1971  
181 0 0 6 256 1822 0 0 170 /**
 * Returns true if the object has previously been written (or at least
 * requested to be written) to the bam file, or false if we've never heard of
 * it before.
 */ 2 4 this 3 1995  3 obj 1 1971  
182 0 0 4 257 1953 0 0 85 /**
 * Ensures that all data written thus far is manifested on the output stream.
 */ 1 4 this 3 1997  
183 0 0 6 258 1821 0 0 84 /**
 * Returns the major version number of the Bam file currently being written.
 */ 1 4 this 3 1995  
184 0 0 6 259 1821 0 0 84 /**
 * Returns the minor version number of the Bam file currently being written.
 */ 1 4 this 3 1995  
185 0 0 4 260 1953 0 0 232 /**
 * Changes the minor .bam version to write.  This should be called before
 * init().  Each Panda version has only a fairly narrow range of versions it
 * is able to write; consult the .bam documentation for more information.
 */ 2 4 this 3 1997  9 minor_ver 1 1821  
186 0 0 6 261 1840 0 0 257 /**
 * Returns the endian preference indicated by the Bam file currently being
 * written.  This does not imply that every number is stored using the
 * indicated convention, but individual objects may choose to respect this
 * flag when recording data.
 */ 1 4 this 3 1995  
187 0 0 6 262 1822 0 0 248 /**
 * Returns true if the file will store all "standard" floats as 64-bit
 * doubles, or false if they are 32-bit floats.  This isn't runtime settable;
 * it's based on the compilation flags of the version of Panda that generated
 * this file.
 */ 1 4 this 3 1995  
188 0 0 6 263 1842 0 0 196 /**
 * Returns the BamTextureMode preference indicated by the Bam file currently
 * being written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */ 1 4 this 3 1995  
189 0 0 4 264 1953 0 0 187 /**
 * Changes the BamTextureMode preference for the Bam file currently being
 * written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */ 2 4 this 3 1997  17 file_texture_mode 1 1842  
190 0 0 6 265 1837 0 0 165 /**
 * Returns the root node of the part of the scene graph we are currently
 * writing out.  This is used for determining what to make NodePaths relative
 * to.
 */ 1 4 this 3 1995  
191 0 0 4 266 1953 0 0 160 /**
 * Sets the root node of the part of the scene graph we are currently writing
 * out.  NodePaths written to this bam file will be relative to this node.
 */ 2 4 this 3 1997  9 root_node 1 1837  
192 0 0 7 276 1998 1170 0 0 0 
193 0 0 7 276 1998 1170 0 0 1 6 param0 0 1999  
194 0 0 7 276 1998 1170 0 0 1 10 init_value 1 2001  
195 0 0 7 277 1998 1170 0 0 0 
196 0 0 7 278 1998 1170 0 0 0 
197 0 0 7 279 1998 1170 0 0 1 7 on_bits 1 1821  
198 0 0 7 280 1998 1170 0 0 1 5 index 1 1821  
199 0 0 7 281 1998 1170 0 0 2 7 low_bit 1 1821  4 size 1 1821  
200 0 0 6 282 1822 0 0 0 0 
201 0 0 6 283 1821 0 0 0 0 
202 0 0 6 284 1821 0 0 0 0 
203 0 0 6 285 1822 0 0 0 2 4 this 3 1999  5 index 1 1821  
204 0 0 4 286 1953 0 0 0 2 4 this 3 1998  5 index 1 1821  
205 0 0 4 287 1953 0 0 0 2 4 this 3 1998  5 index 1 1821  
206 0 0 4 288 1953 0 0 0 3 4 this 3 1998  5 index 1 1821  5 value 1 1822  
207 0 0 6 289 1822 0 0 0 1 4 this 3 1999  
208 0 0 6 290 1822 0 0 0 1 4 this 3 1999  
209 0 0 6 291 2001 0 0 0 3 4 this 3 1999  7 low_bit 1 1821  4 size 1 1821  
210 0 0 4 292 1953 0 0 0 4 4 this 3 1998  5 value 1 2001  7 low_bit 1 1821  4 size 1 1821  
211 0 0 6 293 1822 0 0 0 3 4 this 3 1999  7 low_bit 1 1821  4 size 1 1821  
212 0 0 6 294 1822 0 0 0 3 4 this 3 1999  7 low_bit 1 1821  4 size 1 1821  
213 0 0 4 295 1953 0 0 0 3 4 this 3 1998  7 low_bit 1 1821  4 size 1 1821  
214 0 0 4 296 1953 0 0 0 3 4 this 3 1998  7 low_bit 1 1821  4 size 1 1821  
215 0 0 4 297 1953 0 0 0 4 4 this 3 1998  5 value 1 1822  7 low_bit 1 1821  4 size 1 1821  
216 0 0 6 298 2001 0 0 0 1 4 this 3 1999  
217 0 0 4 299 1953 0 0 0 2 4 this 3 1998  5 value 1 2001  
218 0 0 6 300 1821 0 0 0 1 4 this 3 1999  
219 0 0 6 301 1821 0 0 0 1 4 this 3 1999  
220 0 0 6 302 1821 0 0 0 1 4 this 3 1999  
221 0 0 6 303 1821 0 0 0 1 4 this 3 1999  
222 0 0 6 304 1821 0 0 0 1 4 this 3 1999  
223 0 0 6 305 1821 0 0 0 1 4 this 3 1999  
224 0 0 6 306 1821 0 0 0 2 4 this 3 1999  7 low_bit 1 1821  
225 0 0 4 307 1953 0 0 0 1 4 this 3 1998  
226 0 0 6 308 1822 0 0 0 2 4 this 3 1999  5 other 1 1999  
227 0 0 4 309 1953 0 0 0 1 4 this 3 1998  
228 0 0 4 310 1953 0 0 0 2 4 this 3 1999  3 out 1 1957  
229 0 0 4 311 1953 0 0 0 3 4 this 3 1999  3 out 1 1957  12 spaces_every 1 1821  
230 0 0 4 312 1953 0 0 0 3 4 this 3 1999  3 out 1 1957  12 spaces_every 1 1821  
231 0 0 4 313 1953 0 0 0 3 4 this 3 1999  3 out 1 1957  12 indent_level 1 1821  
232 0 0 6 314 1822 0 0 0 2 4 this 3 1999  5 other 1 1999  
233 0 0 6 315 1822 0 0 0 2 4 this 3 1999  5 other 1 1999  
234 0 0 6 316 1822 0 0 0 2 4 this 3 1999  5 other 1 1999  
235 0 0 6 317 1821 0 0 0 2 4 this 3 1999  5 other 1 1999  
236 0 0 7 318 1998 1170 0 0 2 4 this 3 1999  5 other 1 1999  
237 0 0 7 319 1998 1170 0 0 2 4 this 3 1999  5 other 1 1999  
238 0 0 7 320 1998 1170 0 0 2 4 this 3 1999  5 other 1 1999  
239 0 0 7 321 1998 1170 0 0 1 4 this 3 1999  
240 0 0 7 322 1998 1170 0 0 2 4 this 3 1999  5 shift 1 1821  
241 0 0 7 323 1998 1170 0 0 2 4 this 3 1999  5 shift 1 1821  
242 0 0 6 324 1998 0 0 0 2 4 this 3 1998  5 other 1 1999  
243 0 0 6 325 1998 0 0 0 2 4 this 3 1998  5 other 1 1999  
244 0 0 6 326 1998 0 0 0 2 4 this 3 1998  5 other 1 1999  
245 0 0 6 327 1998 0 0 0 2 4 this 3 1998  5 shift 1 1821  
246 0 0 6 328 1998 0 0 0 2 4 this 3 1998  5 shift 1 1821  
247 0 0 4 329 1953 0 0 0 1 4 this 3 1998  
248 0 0 4 330 1953 0 0 0 1 4 this 3 1998  
249 0 0 7 331 1998 1170 0 0 1 4 this 3 1999  
250 0 0 7 332 1998 1170 0 0 1 4 this 3 1999  
251 0 0 7 333 1998 1170 0 0 1 4 this 3 1999  
252 0 0 7 333 1998 1170 0 0 2 4 this 3 1999  5 other 1 1999  
253 0 0 7 333 1998 1170 0 0 2 4 this 3 1999  5 index 1 1821  
254 0 0 7 334 1998 1170 0 0 1 4 this 3 1999  
255 0 0 7 334 1998 1170 0 0 2 4 this 3 1999  5 other 1 1999  
256 0 0 7 334 1998 1170 0 0 2 4 this 3 1999  5 index 1 1821  
257 0 0 6 335 1821 0 0 0 1 4 this 3 1999  
258 0 0 6 336 1822 0 0 0 1 4 this 3 1999  
259 0 0 7 337 1959 0 0 0 0 
260 0 0 7 341 2002 1233 0 0 0 
261 0 0 7 341 2002 1233 0 0 1 6 param0 0 2003  
262 0 0 7 341 2002 1233 0 0 1 10 init_value 1 2005  
263 0 0 7 342 2002 1233 0 0 0 
264 0 0 7 343 2002 1233 0 0 0 
265 0 0 7 344 2002 1233 0 0 1 7 on_bits 1 1821  
266 0 0 7 345 2002 1233 0 0 1 5 index 1 1821  
267 0 0 7 346 2002 1233 0 0 2 7 low_bit 1 1821  4 size 1 1821  
268 0 0 6 347 1822 0 0 0 0 
269 0 0 6 348 1821 0 0 0 0 
270 0 0 6 349 1821 0 0 0 0 
271 0 0 6 350 1822 0 0 0 2 4 this 3 2003  5 index 1 1821  
272 0 0 4 351 1953 0 0 0 2 4 this 3 2002  5 index 1 1821  
273 0 0 4 352 1953 0 0 0 2 4 this 3 2002  5 index 1 1821  
274 0 0 4 353 1953 0 0 0 3 4 this 3 2002  5 index 1 1821  5 value 1 1822  
275 0 0 6 354 1822 0 0 0 1 4 this 3 2003  
276 0 0 6 355 1822 0 0 0 1 4 this 3 2003  
277 0 0 6 356 2005 0 0 0 3 4 this 3 2003  7 low_bit 1 1821  4 size 1 1821  
278 0 0 4 357 1953 0 0 0 4 4 this 3 2002  5 value 1 2005  7 low_bit 1 1821  4 size 1 1821  
279 0 0 6 358 1822 0 0 0 3 4 this 3 2003  7 low_bit 1 1821  4 size 1 1821  
280 0 0 6 359 1822 0 0 0 3 4 this 3 2003  7 low_bit 1 1821  4 size 1 1821  
281 0 0 4 360 1953 0 0 0 3 4 this 3 2002  7 low_bit 1 1821  4 size 1 1821  
282 0 0 4 361 1953 0 0 0 3 4 this 3 2002  7 low_bit 1 1821  4 size 1 1821  
283 0 0 4 362 1953 0 0 0 4 4 this 3 2002  5 value 1 1822  7 low_bit 1 1821  4 size 1 1821  
284 0 0 6 363 2005 0 0 0 1 4 this 3 2003  
285 0 0 4 364 1953 0 0 0 2 4 this 3 2002  5 value 1 2005  
286 0 0 6 365 1821 0 0 0 1 4 this 3 2003  
287 0 0 6 366 1821 0 0 0 1 4 this 3 2003  
288 0 0 6 367 1821 0 0 0 1 4 this 3 2003  
289 0 0 6 368 1821 0 0 0 1 4 this 3 2003  
290 0 0 6 369 1821 0 0 0 1 4 this 3 2003  
291 0 0 6 370 1821 0 0 0 1 4 this 3 2003  
292 0 0 6 371 1821 0 0 0 2 4 this 3 2003  7 low_bit 1 1821  
293 0 0 4 372 1953 0 0 0 1 4 this 3 2002  
294 0 0 6 373 1822 0 0 0 2 4 this 3 2003  5 other 1 2003  
295 0 0 4 374 1953 0 0 0 1 4 this 3 2002  
296 0 0 4 375 1953 0 0 0 2 4 this 3 2003  3 out 1 1957  
297 0 0 4 376 1953 0 0 0 3 4 this 3 2003  3 out 1 1957  12 spaces_every 1 1821  
298 0 0 4 377 1953 0 0 0 3 4 this 3 2003  3 out 1 1957  12 spaces_every 1 1821  
299 0 0 4 378 1953 0 0 0 3 4 this 3 2003  3 out 1 1957  12 indent_level 1 1821  
300 0 0 6 379 1822 0 0 0 2 4 this 3 2003  5 other 1 2003  
301 0 0 6 380 1822 0 0 0 2 4 this 3 2003  5 other 1 2003  
302 0 0 6 381 1822 0 0 0 2 4 this 3 2003  5 other 1 2003  
303 0 0 6 382 1821 0 0 0 2 4 this 3 2003  5 other 1 2003  
304 0 0 7 383 2002 1233 0 0 2 4 this 3 2003  5 other 1 2003  
305 0 0 7 384 2002 1233 0 0 2 4 this 3 2003  5 other 1 2003  
306 0 0 7 385 2002 1233 0 0 2 4 this 3 2003  5 other 1 2003  
307 0 0 7 386 2002 1233 0 0 1 4 this 3 2003  
308 0 0 7 387 2002 1233 0 0 2 4 this 3 2003  5 shift 1 1821  
309 0 0 7 388 2002 1233 0 0 2 4 this 3 2003  5 shift 1 1821  
310 0 0 6 389 2002 0 0 0 2 4 this 3 2002  5 other 1 2003  
311 0 0 6 390 2002 0 0 0 2 4 this 3 2002  5 other 1 2003  
312 0 0 6 391 2002 0 0 0 2 4 this 3 2002  5 other 1 2003  
313 0 0 6 392 2002 0 0 0 2 4 this 3 2002  5 shift 1 1821  
314 0 0 6 393 2002 0 0 0 2 4 this 3 2002  5 shift 1 1821  
315 0 0 4 394 1953 0 0 0 1 4 this 3 2002  
316 0 0 4 395 1953 0 0 0 1 4 this 3 2002  
317 0 0 7 396 2002 1233 0 0 1 4 this 3 2003  
318 0 0 7 397 2002 1233 0 0 1 4 this 3 2003  
319 0 0 7 398 2002 1233 0 0 1 4 this 3 2003  
320 0 0 7 398 2002 1233 0 0 2 4 this 3 2003  5 other 1 2003  
321 0 0 7 398 2002 1233 0 0 2 4 this 3 2003  5 index 1 1821  
322 0 0 7 399 2002 1233 0 0 1 4 this 3 2003  
323 0 0 7 399 2002 1233 0 0 2 4 this 3 2003  5 other 1 2003  
324 0 0 7 399 2002 1233 0 0 2 4 this 3 2003  5 index 1 1821  
325 0 0 6 400 1821 0 0 0 1 4 this 3 2003  
326 0 0 6 401 1822 0 0 0 1 4 this 3 2003  
327 0 0 7 402 1959 0 0 0 0 
328 0 0 7 406 2007 1296 0 0 0 
329 0 0 7 406 2007 1296 0 0 1 6 param0 0 2008  
330 0 0 7 406 2007 1296 0 0 1 10 init_value 1 2010  
331 0 0 7 407 2007 1296 0 0 0 
332 0 0 7 408 2007 1296 0 0 0 
333 0 0 7 409 2007 1296 0 0 1 7 on_bits 1 1821  
334 0 0 7 410 2007 1296 0 0 1 5 index 1 1821  
335 0 0 7 411 2007 1296 0 0 2 7 low_bit 1 1821  4 size 1 1821  
336 0 0 6 412 1822 0 0 0 0 
337 0 0 6 413 1821 0 0 0 0 
338 0 0 6 414 1821 0 0 0 0 
339 0 0 6 415 1822 0 0 0 2 4 this 3 2008  5 index 1 1821  
340 0 0 4 416 1953 0 0 0 2 4 this 3 2007  5 index 1 1821  
341 0 0 4 417 1953 0 0 0 2 4 this 3 2007  5 index 1 1821  
342 0 0 4 418 1953 0 0 0 3 4 this 3 2007  5 index 1 1821  5 value 1 1822  
343 0 0 6 419 1822 0 0 0 1 4 this 3 2008  
344 0 0 6 420 1822 0 0 0 1 4 this 3 2008  
345 0 0 6 421 2010 0 0 0 3 4 this 3 2008  7 low_bit 1 1821  4 size 1 1821  
346 0 0 4 422 1953 0 0 0 4 4 this 3 2007  5 value 1 2010  7 low_bit 1 1821  4 size 1 1821  
347 0 0 6 423 1822 0 0 0 3 4 this 3 2008  7 low_bit 1 1821  4 size 1 1821  
348 0 0 6 424 1822 0 0 0 3 4 this 3 2008  7 low_bit 1 1821  4 size 1 1821  
349 0 0 4 425 1953 0 0 0 3 4 this 3 2007  7 low_bit 1 1821  4 size 1 1821  
350 0 0 4 426 1953 0 0 0 3 4 this 3 2007  7 low_bit 1 1821  4 size 1 1821  
351 0 0 4 427 1953 0 0 0 4 4 this 3 2007  5 value 1 1822  7 low_bit 1 1821  4 size 1 1821  
352 0 0 6 428 2010 0 0 0 1 4 this 3 2008  
353 0 0 4 429 1953 0 0 0 2 4 this 3 2007  5 value 1 2010  
354 0 0 6 430 1821 0 0 0 1 4 this 3 2008  
355 0 0 6 431 1821 0 0 0 1 4 this 3 2008  
356 0 0 6 432 1821 0 0 0 1 4 this 3 2008  
357 0 0 6 433 1821 0 0 0 1 4 this 3 2008  
358 0 0 6 434 1821 0 0 0 1 4 this 3 2008  
359 0 0 6 435 1821 0 0 0 1 4 this 3 2008  
360 0 0 6 436 1821 0 0 0 2 4 this 3 2008  7 low_bit 1 1821  
361 0 0 4 437 1953 0 0 0 1 4 this 3 2007  
362 0 0 6 438 1822 0 0 0 2 4 this 3 2008  5 other 1 2008  
363 0 0 4 439 1953 0 0 0 1 4 this 3 2007  
364 0 0 4 440 1953 0 0 0 2 4 this 3 2008  3 out 1 1957  
365 0 0 4 441 1953 0 0 0 3 4 this 3 2008  3 out 1 1957  12 spaces_every 1 1821  
366 0 0 4 442 1953 0 0 0 3 4 this 3 2008  3 out 1 1957  12 spaces_every 1 1821  
367 0 0 4 443 1953 0 0 0 3 4 this 3 2008  3 out 1 1957  12 indent_level 1 1821  
368 0 0 6 444 1822 0 0 0 2 4 this 3 2008  5 other 1 2008  
369 0 0 6 445 1822 0 0 0 2 4 this 3 2008  5 other 1 2008  
370 0 0 6 446 1822 0 0 0 2 4 this 3 2008  5 other 1 2008  
371 0 0 6 447 1821 0 0 0 2 4 this 3 2008  5 other 1 2008  
372 0 0 7 448 2007 1296 0 0 2 4 this 3 2008  5 other 1 2008  
373 0 0 7 449 2007 1296 0 0 2 4 this 3 2008  5 other 1 2008  
374 0 0 7 450 2007 1296 0 0 2 4 this 3 2008  5 other 1 2008  
375 0 0 7 451 2007 1296 0 0 1 4 this 3 2008  
376 0 0 7 452 2007 1296 0 0 2 4 this 3 2008  5 shift 1 1821  
377 0 0 7 453 2007 1296 0 0 2 4 this 3 2008  5 shift 1 1821  
378 0 0 6 454 2007 0 0 0 2 4 this 3 2007  5 other 1 2008  
379 0 0 6 455 2007 0 0 0 2 4 this 3 2007  5 other 1 2008  
380 0 0 6 456 2007 0 0 0 2 4 this 3 2007  5 other 1 2008  
381 0 0 6 457 2007 0 0 0 2 4 this 3 2007  5 shift 1 1821  
382 0 0 6 458 2007 0 0 0 2 4 this 3 2007  5 shift 1 1821  
383 0 0 4 459 1953 0 0 0 1 4 this 3 2007  
384 0 0 4 460 1953 0 0 0 1 4 this 3 2007  
385 0 0 7 461 2007 1296 0 0 1 4 this 3 2008  
386 0 0 7 462 2007 1296 0 0 1 4 this 3 2008  
387 0 0 7 463 2007 1296 0 0 1 4 this 3 2008  
388 0 0 7 463 2007 1296 0 0 2 4 this 3 2008  5 other 1 2008  
389 0 0 7 463 2007 1296 0 0 2 4 this 3 2008  5 index 1 1821  
390 0 0 7 464 2007 1296 0 0 1 4 this 3 2008  
391 0 0 7 464 2007 1296 0 0 2 4 this 3 2008  5 other 1 2008  
392 0 0 7 464 2007 1296 0 0 2 4 this 3 2008  5 index 1 1821  
393 0 0 6 465 1821 0 0 0 1 4 this 3 2008  
394 0 0 6 466 1822 0 0 0 1 4 this 3 2008  
395 0 0 7 467 1959 0 0 0 0 
396 0 0 7 473 2011 1354 0 10 /**
 *
 */ 0 
397 0 0 7 473 2011 1354 0 0 1 6 param0 0 2012  
398 0 0 7 473 2011 1354 0 10 /**
 *
 */ 1 10 init_value 1 2014  
399 0 0 7 473 2011 1354 0 10 /**
 *
 */ 1 4 from 1 2015  
400 0 0 7 474 2011 1354 0 69 /**
 * Returns a BitArray with an infinite array of bits, all on.
 */ 0 
401 0 0 7 475 2011 1354 0 53 /**
 * Returns a BitArray whose bits are all off.
 */ 0 
402 0 0 7 476 2011 1354 0 62 /**
 * Returns a BitArray whose lower on_bits bits are on.
 */ 1 7 on_bits 1 1821  
403 0 0 7 477 2011 1354 0 61 /**
 * Returns a BitArray with only the indicated bit on.
 */ 1 5 index 1 1821  
404 0 0 7 478 2011 1354 0 76 /**
 * Returns a BitArray whose size bits, beginning at low_bit, are on.
 */ 2 7 low_bit 1 1821  4 size 1 1821  
405 0 0 6 479 1822 0 0 387 /**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The BitArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or BitArray interchangeably.
 */ 0 
406 0 0 6 480 1821 0 0 422 /**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The BitArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or BitArray interchangeably.
 */ 0 
407 0 0 6 481 1821 0 0 203 /**
 * Returns the number of bits stored per word internally.  This is of interest
 * only in that it limits the maximum number of bits that may be queried or
 * set at once by extract() and store().
 */ 0 
408 0 0 6 482 2017 0 0 300 /**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */ 1 4 this 3 2012  
409 0 0 6 483 1822 0 0 191 /**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */ 2 4 this 3 2012  5 index 1 1821  
410 0 0 4 484 1953 0 0 97 /**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2011  5 index 1 1821  
411 0 0 4 485 1953 0 0 98 /**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2011  5 index 1 1821  
412 0 0 4 486 1953 0 0 84 /**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */ 3 4 this 3 2011  5 index 1 1821  5 value 1 1822  
413 0 0 6 487 1822 0 0 118 /**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */ 1 4 this 3 2012  
414 0 0 6 488 1822 0 0 71 /**
 * Returns true if the entire bitmask is zero, false otherwise.
 */ 1 4 this 3 2012  
415 0 0 6 489 1822 0 0 70 /**
 * Returns true if the entire bitmask is one, false otherwise.
 */ 1 4 this 3 2012  
416 0 0 6 490 2014 0 0 187 /**
 * Returns a word that represents only the indicated range of bits within this
 * BitArray, shifted to the least-significant position.  size must be <=
 * get_num_bits_per_word().
 */ 3 4 this 3 2012  7 low_bit 1 1821  4 size 1 1821  
417 0 0 4 491 1953 0 0 92 /**
 * Stores the indicated word into the indicated range of bits with this
 * BitArray.
 */ 4 4 this 3 2011  5 value 1 2014  7 low_bit 1 1821  4 size 1 1821  
418 0 0 6 492 1822 0 0 82 /**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */ 3 4 this 3 2012  7 low_bit 1 1821  4 size 1 1821  
419 0 0 6 493 1822 0 0 84 /**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */ 3 4 this 3 2012  7 low_bit 1 1821  4 size 1 1821  
420 0 0 4 494 1953 0 0 47 /**
 * Sets the indicated range of bits on.
 */ 3 4 this 3 2011  7 low_bit 1 1821  4 size 1 1821  
421 0 0 4 495 1953 0 0 48 /**
 * Sets the indicated range of bits off.
 */ 3 4 this 3 2011  7 low_bit 1 1821  4 size 1 1821  
422 0 0 4 496 1953 0 0 64 /**
 * Sets the indicated range of bits to either on or off.
 */ 4 4 this 3 2011  5 value 1 1822  7 low_bit 1 1821  4 size 1 1821  
423 0 0 6 497 1821 0 0 127 /**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */ 1 4 this 3 2012  
424 0 0 6 498 1821 0 0 127 /**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */ 1 4 this 3 2012  
425 0 0 6 499 1821 0 0 101 /**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits.
 */ 1 4 this 3 2012  
426 0 0 6 500 1821 0 0 101 /**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits.
 */ 1 4 this 3 2012  
427 0 0 6 501 1821 0 0 143 /**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2012  
428 0 0 6 502 1821 0 0 143 /**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2012  
429 0 0 6 503 1821 0 0 287 /**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */ 2 4 this 3 2012  7 low_bit 1 1821  
430 0 0 6 504 2017 0 0 75 /**
 * Returns the number of possibly-unique words stored in the array.
 */ 1 4 this 3 2012  
431 0 0 7 505 2019 0 0 175 /**
 * Returns the nth word in the array.  It is valid for n to be greater than
 * get_num_words(), but the return value beyond get_num_words() will always be
 * the same.
 */ 2 4 this 3 2012  1 n 1 2017  
432 0 0 4 506 1953 0 0 113 /**
 * Replaces the nth word in the array.  If n >= get_num_words(), this
 * automatically extends the array.
 */ 3 4 this 3 2011  1 n 1 2017  5 value 1 2014  
433 0 0 4 507 1953 0 0 90 /**
 * Inverts all the bits in the BitArray.  This is equivalent to array =
 * ~array.
 */ 1 4 this 3 2011  
434 0 0 6 508 1822 0 0 178 /**
 * Returns true if this BitArray has any "one" bits in common with the other
 * one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */ 2 4 this 3 2012  5 other 1 2012  
435 0 0 4 509 1953 0 0 49 /**
 * Sets all the bits in the BitArray off.
 */ 1 4 this 3 2011  
436 0 0 4 510 1953 0 0 193 /**
 * Writes the BitArray out as a hex number.  For a BitArray, this is always
 * the same as output_hex(); it's too confusing for the output format to
 * change back and forth at runtime.
 */ 2 4 this 3 2012  3 out 1 1957  
437 0 0 4 511 1953 0 0 83 /**
 * Writes the BitArray out as a binary number, with spaces every four bits.
 */ 3 4 this 3 2012  3 out 1 1957  12 spaces_every 1 1821  
438 0 0 4 512 1953 0 0 93 /**
 * Writes the BitArray out as a hexadecimal number, with spaces every four
 * digits.
 */ 3 4 this 3 2012  3 out 1 1957  12 spaces_every 1 1821  
439 0 0 4 513 1953 0 0 99 /**
 * Writes the BitArray out as a binary or a hex number, according to the
 * number of bits.
 */ 3 4 this 3 2012  3 out 1 1957  12 indent_level 1 1821  
440 0 0 6 514 1822 0 0 0 2 4 this 3 2012  5 other 1 2012  
441 0 0 6 515 1822 0 0 0 2 4 this 3 2012  5 other 1 2012  
442 0 0 6 516 1822 0 0 0 2 4 this 3 2012  5 other 1 2012  
443 0 0 6 517 1821 0 0 233 /**
 * Returns a number less than zero if this BitArray sorts before the indicated
 * other BitArray, greater than zero if it sorts after, or 0 if they are
 * equivalent.  This is based on the same ordering defined by operator <.
 */ 2 4 this 3 2012  5 other 1 2012  
444 0 0 7 518 2011 1354 0 0 2 4 this 3 2012  5 other 1 2012  
445 0 0 7 519 2011 1354 0 0 2 4 this 3 2012  5 other 1 2012  
446 0 0 7 520 2011 1354 0 0 2 4 this 3 2012  5 other 1 2012  
447 0 0 7 521 2011 1354 0 0 1 4 this 3 2012  
448 0 0 7 522 2011 1354 0 0 2 4 this 3 2012  5 shift 1 1821  
449 0 0 7 523 2011 1354 0 0 2 4 this 3 2012  5 shift 1 1821  
450 0 0 6 524 2011 0 0 0 2 4 this 3 2011  5 other 1 2012  
451 0 0 6 525 2011 0 0 0 2 4 this 3 2011  5 other 1 2012  
452 0 0 6 526 2011 0 0 0 2 4 this 3 2011  5 other 1 2012  
453 0 0 6 527 2011 0 0 0 2 4 this 3 2011  5 shift 1 1821  
454 0 0 6 528 2011 0 0 0 2 4 this 3 2011  5 shift 1 1821  
455 0 0 7 529 1959 0 0 0 0 
456 0 0 7 532 2020 1374 0 259 // The default constructor must do nothing, because we can't guarantee
// ordering of static initializers.  If the constructor tried to initialize
// its value, it  might happen after the value had already been set
// previously by another static initializer! 0 
457 0 0 7 532 2020 1374 0 0 1 6 param0 0 2021  
458 0 0 7 532 2020 1374 0 154 /**
 * Constructs a ButtonHandle with the corresponding index number, which may
 * have been returned by an earlier call to ButtonHandle::get_index().
 */ 1 5 index 1 1821  
459 0 0 7 532 2020 1374 0 341 /**
 * Constructs a ButtonHandle with the corresponding name, which is looked up
 * in the ButtonRegistry.  This exists for the purpose of being able to
 * automatically coerce a string into a ButtonHandle; for most purposes, you
 * should use either the static KeyboardButton/MouseButton getters or
 * ButtonRegistry::register_button().
 */ 1 4 name 1 1961  
460 0 0 6 533 1822 0 0 0 2 4 this 3 2021  5 other 1 2021  
461 0 0 6 534 1822 0 0 0 2 4 this 3 2021  5 other 1 2021  
462 0 0 6 535 1822 0 0 0 2 4 this 3 2021  5 other 1 2021  
463 0 0 6 536 1822 0 0 0 2 4 this 3 2021  5 other 1 2021  
464 0 0 6 537 1822 0 0 0 2 4 this 3 2021  5 other 1 2021  
465 0 0 6 538 1822 0 0 0 2 4 this 3 2021  5 other 1 2021  
466 0 0 6 539 1821 0 0 209 /**
 * Sorts ButtonHandles arbitrarily (according to <, >, etc.).  Returns a
 * number less than 0 if this type sorts before the other one, greater than
 * zero if it sorts after, 0 if they are equivalent.
 */ 2 4 this 3 2021  5 other 1 2021  
467 0 0 6 540 2017 0 0 54 /**
 * Returns a hash code suitable for phash_map.
 */ 1 4 this 3 2021  
468 0 0 6 541 1961 0 0 42 /**
 * Returns the name of the button.
 */ 1 4 this 3 2021  
469 0 0 6 542 1822 0 0 121 /**
 * Returns true if the button was created with an ASCII equivalent code (e.g.
 * for a standard keyboard button).
 */ 1 4 this 3 2021  
470 0 0 6 543 1868 0 0 109 /**
 * Returns the character code associated with the button, or '\0' if no ASCII
 * code was associated.
 */ 1 4 this 3 2021  
471 0 0 7 544 2020 1374 0 373 /**
 * Returns the alias (alternate name) associated with the button, if any, or
 * ButtonHandle::none() if the button has no alias.
 *
 * Each button is allowed to have one alias, and multiple different buttons
 * can refer to the same alias.  The alias should be the more general name for
 * the button, for instance, shift is an alias for lshift, but not vice-versa.
 */ 1 4 this 3 2021  
472 0 0 6 545 1822 0 0 263 /**
 * Returns true if this ButtonHandle is the same as the other one, or if the
 * other one is an alias for this one.  (Does not return true if this button
 * is an alias for the other one, however.)
 *
 * This is a more general comparison than operator ==.
 */ 2 4 this 3 2021  5 other 1 2021  
473 0 0 6 546 1821 0 0 363 /**
 * Returns the integer index associated with this ButtonHandle.  Each
 * different ButtonHandle will have a different index.  However, you probably
 * shouldn't be using this method; you should just treat the ButtonHandles as
 * opaque classes.  This is provided for the convenience of non-C++ scripting
 * languages to build a hashtable of ButtonHandles.
 */ 1 4 this 3 2021  
474 0 0 4 547 1953 0 0 10 /**
 *
 */ 2 4 this 3 2021  3 out 1 1957  
475 0 0 7 548 2020 1374 0 92 /**
 * Returns a special zero-valued ButtonHandle that is used to indicate no
 * button.
 */ 0 
476 0 0 7 557 1959 0 0 0 0 
477 0 0 6 549 1822 0 0 0 1 4 this 3 2021  
478 0 0 7 565 2025 1381 0 0 1 6 param0 0 2023  
479 0 0 7 560 2020 1374 0 150 /**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, registers a new one and returns it.
 */ 2 4 this 3 2025  4 name 1 1961  
480 0 0 7 561 2020 1374 0 144 /**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, returns ButtonHandle::none().
 */ 2 4 this 3 2025  4 name 1 1961  
481 0 0 7 562 2020 1374 0 169 /**
 * Finds a ButtonHandle in the registry matching the indicated ASCII
 * equivalent character.  If there is no such ButtonHandle, returns
 * ButtonHandle::none().
 */ 2 4 this 3 2023  16 ascii_equivalent 1 1868  
482 0 0 4 563 1953 0 0 10 /**
 *
 */ 2 4 this 3 2023  3 out 1 1957  
483 0 0 6 564 2025 0 0 67 /**
 * Returns the pointer to the global ButtonRegistry object.
 */ 0 
484 0 0 7 576 2026 1390 0 0 0 
485 0 0 7 576 2026 1390 0 0 1 6 param0 0 2027  
486 0 0 6 569 2017 0 0 76 /**
 * Returns the number of buttons that this button mapping specifies.
 */ 1 4 this 3 2027  
487 0 0 7 570 2020 1374 0 76 /**
 * Returns the underlying raw button associated with the nth button.
 */ 2 4 this 3 2027  1 i 1 2017  
488 0 0 7 571 2020 1374 0 166 /**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */ 2 4 this 3 2027  3 raw 1 2020  
489 0 0 7 571 2020 1374 0 101 /**
 * Returns the nth mapped button, meaning the button that the nth raw button
 * is mapped to.
 */ 2 4 this 3 2027  1 i 1 2017  
490 0 0 7 571 2020 1374 0 166 /**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */ 2 4 this 3 2027  8 raw_name 1 1961  
491 0 0 6 572 1961 0 0 353 /**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */ 2 4 this 3 2027  3 raw 1 2020  
492 0 0 6 572 1961 0 0 127 /**
 * Returns the label associated with the nth mapped button, meaning the button
 * that the nth raw button is mapped to.
 */ 2 4 this 3 2027  1 i 1 2017  
493 0 0 6 572 1961 0 0 353 /**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */ 2 4 this 3 2027  8 raw_name 1 1961  
494 0 0 4 573 1953 0 0 10 /**
 *
 */ 2 4 this 3 2027  3 out 1 1957  
495 0 0 4 574 1953 0 0 10 /**
 *
 */ 3 4 this 3 2027  3 out 1 1957  12 indent_level 1 1821  
496 0 0 7 575 1959 0 0 0 0 
497 0 0 7 582 2031 1395 0 0 1 6 param0 0 2029  
498 0 0 4 579 1953 0 0 10 /**
 *
 */ 2 4 this 3 2029  3 out 1 1957  
499 0 0 7 580 2031 1395 0 0 1 8 function 1 1850  
500 0 0 7 581 1959 0 0 0 0 
501 0 0 6 585 1821 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2032  
502 0 0 4 586 1953 0 0 108 /**
 * Explicitly increments the cache reference count and the normal reference
 * count simultaneously.
 */ 1 4 this 3 2032  
503 0 0 6 587 1822 0 0 202 /**
 * Explicitly decrements the cache reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2032  
504 0 0 6 588 1822 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 2032  
505 0 0 7 590 1959 0 0 0 0 
506 0 0 4 592 1953 0 0 10 /**
 *
 */ 2 4 this 3 2034  3 out 1 1957  
507 0 0 4 593 1953 0 0 159 /**
 * You should make this call during the callback if you want to continue the
 * normal function that would have been done in the absence of a callback.
 */ 1 4 this 3 2036  
508 0 0 7 594 1959 0 0 0 0 
509 0 0 7 597 2037 1395 0 10 /**
 *
 */ 1 8 function 1 1850  
510 0 0 7 597 2037 1395 0 0 1 6 param0 0 2038  
511 0 0 4 598 1953 0 0 0 2 4 this 3 2037  4 size 1 2017  
512 0 0 4 601 1953 0 0 126 /**
 * Replaces the function that is called for the callback.  runs.  The
 * parameter should be a Python callable object.
 */ 2 4 this 3 2037  8 function 1 1850  
513 0 0 6 602 1850 0 0 64 /**
 * Returns the function that is called for the callback.
 */ 1 4 this 3 2037  
514 0 0 7 604 1959 0 0 0 0 
515 0 0 7 606 2040 1417 0 10 /**
 *
 */ 0 
516 0 0 6 607 1878 0 0 10 /**
 *
 */ 1 4 this 3 2041  
517 0 0 6 608 1878 0 0 10 /**
 *
 */ 1 4 this 3 2041  
518 0 0 7 618 2043 0 0 10 /**
 *
 */ 0 
519 0 0 7 618 2043 0 0 10 /**
 *
 */ 1 4 copy 1 2044  
520 0 0 4 619 1953 0 0 1841 /**
 * Changes the mode of the clock.  Normally, the clock is in mode M_normal.
 * In this mode, each call to tick() will set the value returned by
 * get_frame_time() to the current real time; thus, the clock simply reports
 * time advancing.
 *
 * Other possible modes:
 *
 * M_non_real_time - the clock ignores real time completely; at each call to
 * tick(), it pretends that exactly dt seconds have elapsed since the last
 * call to tick().  You may set the value of dt with set_dt() or
 * set_frame_rate().
 *
 * M_limited - the clock will run as fast as it can, as in M_normal, but will
 * not run faster than the rate specified by set_frame_rate().  If the
 * application would run faster than this rate, the clock will slow down the
 * application.
 *
 * M_integer - the clock will run as fast as it can, but the rate will be
 * constrained to be an integer multiple or divisor of the rate specified by
 * set_frame_rate().  The clock will slow down the application a bit to
 * guarantee this.
 *
 * M_integer_limited - a combination of M_limited and M_integer; the clock
 * will not run faster than set_frame_rate(), and if it runs slower, it will
 * run at a integer divisor of that rate.
 *
 * M_forced - the clock forces the application to run at the rate specified by
 * set_frame_rate().  If the application would run faster than this rate, the
 * clock will slow down the application; if the application would run slower
 * than this rate, the clock slows down time so that the application believes
 * it is running at the given rate.
 *
 * M_degrade - the clock runs at real time, but the application is slowed down
 * by a set factor of its frame rate, specified by set_degrade_factor().
 *
 * M_slave - the clock does not advance, but relies on the user to call
 * set_frame_time() and/or set_frame_count() each frame.
 */ 2 4 this 3 2043  4 mode 1 1881  
521 0 0 6 620 1881 0 0 66 /**
 * Returns the current mode of the clock.  See set_mode().
 */ 1 4 this 3 2044  
522 0 0 6 622 1820 0 0 350 /**
 * Returns the time in seconds as of the last time tick() was called
 * (typically, this will be as of the start of the current frame).
 *
 * This is generally the kind of time you want to ask for in most rendering
 * and animation contexts, since it's important that all of the animation for
 * a given frame remains in sync with each other.
 */ 2 4 this 3 2044  14 current_thread 1 2046  
523 0 0 6 623 1820 0 0 434 /**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.  This is useful for doing real timing
 * measurements, e.g.  for performance statistics.
 *
 * This returns the most precise timer we have for short time intervals, but
 * it may tend to drift over the long haul.  If more accurate timekeeping is
 * needed over a long period of time, use get_long_time() instead.
 */ 1 4 this 3 2044  
524 0 0 6 624 1820 0 0 440 /**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.
 *
 * This is similar to get_real_time(), except that it uses the most accurate
 * counter we have over a long period of time, and so it is less likely to
 * drift.  However, it may not be very precise for measuring short intervals.
 * On Windows, for instace, this is only accurate to within about 55
 * milliseconds.
 */ 1 4 this 3 2044  
525 0 0 4 625 1953 0 0 75 /**
 * Simultaneously resets both the time and the frame count to zero.
 */ 1 4 this 3 2043  
526 0 0 4 626 1953 0 0 316 /**
 * Resets the clock to the indicated time.  This changes only the real time of
 * the clock as reported by get_real_time(), but does not immediately change
 * the time reported by get_frame_time()--that will change after the next call
 * to tick().  Also see reset(), set_frame_time(), and set_frame_count().
 */ 2 4 this 3 2043  4 time 1 1820  
527 0 0 4 627 1953 0 0 215 /**
 * Changes the time as reported for the current frame to the indicated time.
 * Normally, the way to adjust the frame time is via tick(); this function is
 * provided only for occasional special adjustments.
 */ 3 4 this 3 2043  4 time 1 1820  14 current_thread 1 2046  
528 0 0 4 628 1953 0 0 132 /**
 * Resets the number of frames counted to the indicated number.  Also see
 * reset(), set_real_time(), and set_frame_time().
 */ 3 4 this 3 2043  11 frame_count 1 1821  14 current_thread 1 2046  
529 0 0 6 629 1821 0 0 195 /**
 * Returns the number of times tick() has been called since the ClockObject
 * was created, or since it was last reset.  This is generally the number of
 * frames that have been rendered.
 */ 2 4 this 3 2044  14 current_thread 1 2046  
530 0 0 6 630 1820 0 0 245 /**
 * Returns the average frame rate since the last reset.  This is simply the
 * total number of frames divided by the total elapsed time.  This reports the
 * virtual frame rate if the clock is in (or has been in) M_non_real_time
 * mode.
 */ 2 4 this 3 2044  14 current_thread 1 2046  
531 0 0 6 635 1820 0 0 130 /**
 * Returns the elapsed time for the previous frame: the number of seconds
 * elapsed between the last two calls to tick().
 */ 2 4 this 3 2044  14 current_thread 1 2046  
532 0 0 4 636 1953 0 0 291 /**
 * In non-real-time mode, sets the number of seconds that should appear to
 * elapse between frames.  In forced mode or limited mode, sets our target dt.
 * In normal mode, this has no effect.
 *
 * Also see set_frame_rate(), which is a different way to specify the same
 * quantity.
 */ 2 4 this 3 2043  2 dt 1 1820  
533 0 0 4 637 1953 0 0 291 /**
 * In non-real-time mode, sets the number of frames per second that we should
 * appear to be running.  In forced mode or limited mode, sets our target
 * frame rate.  In normal mode, this has no effect.
 *
 * Also see set_dt(), which is a different way to specify the same quantity.
 */ 2 4 this 3 2043  10 frame_rate 1 1820  
534 0 0 6 639 1820 0 0 106 /**
 * Returns the current maximum allowable time elapsed between any two frames.
 * See set_max_dt().
 */ 1 4 this 3 2044  
535 0 0 4 640 1953 0 0 511 /**
 * Sets a limit on the value returned by get_dt().  If this value is less than
 * zero, no limit is imposed; otherwise, this is the maximum value that will
 * ever be returned by get_dt(), regardless of how much time has actually
 * elapsed between frames.
 *
 * This limit is only imposed in real-time mode; in non-real-time mode, the dt
 * is fixed anyway and max_dt is ignored.
 *
 * This is generally used to guarantee reasonable behavior even in the
 * presence of a very slow or chuggy frame rame.
 */ 2 4 this 3 2043  6 max_dt 1 1820  
536 0 0 6 642 1820 0 0 265 /**
 * In degrade mode, returns the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */ 1 4 this 3 2044  
537 0 0 4 643 1953 0 0 262 /**
 * In degrade mode, sets the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */ 2 4 this 3 2043  14 degrade_factor 1 1820  
538 0 0 4 645 1953 0 0 393 /**
 * Specifies the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.  Changing this does not necessarily immediately
 * change the result of get_average_frame_rate(), until this interval of time
 * has elapsed again.
 *
 * Setting this to zero disables the computation of get_average_frame_rate().
 */ 2 4 this 3 2043  4 time 1 1820  
539 0 0 6 646 1820 0 0 162 /**
 * Returns the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.
 */ 1 4 this 3 2044  
540 0 0 6 648 1820 0 0 214 /**
 * Returns the average frame rate in number of frames per second over the last
 * get_average_frame_rate_interval() seconds.  This measures the virtual frame
 * rate if the clock is in M_non_real_time mode.
 */ 2 4 this 3 2044  14 current_thread 1 2046  
541 0 0 6 649 1820 0 0 105 /**
 * Returns the maximum frame duration over the last
 * get_average_frame_rate_interval() seconds.
 */ 2 4 this 3 2044  14 current_thread 1 2046  
542 0 0 6 650 1820 0 0 539 /**
 * Returns the standard deviation of the frame times of the frames rendered
 * over the past get_average_frame_rate_interval() seconds.  This number gives
 * an estimate of the chugginess of the frame rate; if it is large, there is a
 * large variation in the frame rate; if is small, all of the frames are
 * consistent in length.
 *
 * A large value might also represent just a recent change in frame rate, for
 * instance, because the camera has just rotated from looking at a simple
 * scene to looking at a more complex scene.
 */ 2 4 this 3 2044  14 current_thread 1 2046  
543 0 0 4 653 1953 0 0 285 /**
 * Instructs the clock that a new frame has just begun.  In normal, real-time
 * mode, get_frame_time() will henceforth report the time as of this instant
 * as the current start-of-frame time.  In non-real-time mode,
 * get_frame_time() will be incremented by the value of dt.
 */ 2 4 this 3 2043  14 current_thread 1 2046  
544 0 0 4 654 1953 0 0 417 /**
 * Resets the frame time to the current real time.  This is similar to tick(),
 * except that it does not advance the frame counter and does not affect dt.
 * This is intended to be used in the middle of a particularly long frame to
 * compensate for the time that has already elapsed.
 *
 * In non-real-time mode, this function has no effect (because in this mode
 * all frames take the same length of time).
 */ 2 4 this 3 2043  14 current_thread 1 2046  
545 0 0 6 655 1822 0 0 322 /**
 * Returns true if a clock error was detected since the last time
 * check_errors() was called.  A clock error means that something happened, an
 * OS or BIOS bug, for instance, that makes the current value of the clock
 * somewhat suspect, and an application may wish to resynchronize with any
 * external clocks.
 */ 2 4 this 3 2043  14 current_thread 1 2046  
546 0 0 7 656 2043 0 0 159 /**
 * Returns a pointer to the global ClockObject.  This is the ClockObject that
 * most code should use for handling scene graph rendering and animation.
 */ 0 
547 0 0 7 657 1959 0 0 0 0 
548 0 0 4 665 1953 0 0 62 /**
 * @see CachedTypedWritableReferenceCount::cache_ref()
 */ 1 4 this 3 2048  
549 0 0 6 666 1822 0 0 64 /**
 * @see CachedTypedWritableReferenceCount::cache_unref()
 */ 1 4 this 3 2048  
550 0 0 7 667 1959 0 0 0 0 
551 0 0 7 670 2050 0 0 10 /**
 *
 */ 0 
552 0 0 6 671 1822 0 0 99 /**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2050  4 file 1 2051  
553 0 0 6 671 1822 0 0 99 /**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2050  8 filename 1 1978  
554 0 0 6 671 1822 0 0 230 /**
 * Starts reading from the indicated stream.  Returns true on success, false
 * on failure.  The DatagramInputFile does not take ownership of the stream;
 * you are responsible for closing or deleting it when you are done.
 */ 3 4 this 3 2050  2 in 1 2054  8 filename 1 1978  
555 0 0 6 672 2054 0 0 61 /**
 * Returns the istream represented by the input file.
 */ 1 4 this 3 2050  
556 0 0 4 673 1953 0 0 98 /**
 * Closes the file.  This is also implicitly done when the DatagramInputFile
 * destructs.
 */ 1 4 this 3 2050  
557 0 0 7 676 2056 0 0 10 /**
 *
 */ 0 
558 0 0 6 677 1822 0 0 102 /**
 * Opens the indicated filename for writing.  Returns true if successful,
 * false on failure.
 */ 2 4 this 3 2056  4 file 1 2051  
559 0 0 6 677 1822 0 0 99 /**
 * Opens the indicated filename for writing.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2056  8 filename 1 1978  
560 0 0 6 677 1822 0 0 229 /**
 * Starts writing to the indicated stream.  Returns true on success, false on
 * failure.  The DatagramOutputFile does not take ownership of the stream; you
 * are responsible for closing or deleting it when you are done.
 */ 3 4 this 3 2056  3 out 1 1957  8 filename 1 1978  
561 0 0 4 678 1953 0 0 99 /**
 * Closes the file.  This is also implicitly done when the DatagramOutputFile
 * destructs.
 */ 1 4 this 3 2056  
562 0 0 6 679 1822 0 0 256 /**
 * Writes a sequence of bytes to the beginning of the datagram file.  This may
 * be called any number of times after the file has been opened and before the
 * first datagram is written.  It may not be called once the first datagram is
 * written.
 */ 2 4 this 3 2056  6 header 1 1961  
563 0 0 7 684 2057 1472 0 0 0 
564 0 0 7 684 2057 1472 0 0 1 4 copy 1 2058  
565 0 0 6 685 2057 0 0 0 2 4 this 3 2057  4 copy 1 2058  
566 0 0 7 686 2057 1472 0 0 0 
567 0 0 7 687 2057 1472 0 0 0 
568 0 0 7 688 2057 1472 0 0 1 7 on_bits 1 1821  
569 0 0 7 689 2057 1472 0 0 1 5 index 1 1821  
570 0 0 7 690 2057 1472 0 0 2 7 low_bit 1 1821  4 size 1 1821  
571 0 0 6 692 1822 0 0 0 0 
572 0 0 6 693 1821 0 0 0 0 
573 0 0 6 694 1821 0 0 0 0 
574 0 0 6 695 1822 0 0 0 2 4 this 3 2058  5 index 1 1821  
575 0 0 4 696 1953 0 0 0 2 4 this 3 2057  5 index 1 1821  
576 0 0 4 697 1953 0 0 0 2 4 this 3 2057  5 index 1 1821  
577 0 0 4 698 1953 0 0 0 3 4 this 3 2057  5 index 1 1821  5 value 1 1822  
578 0 0 6 699 1822 0 0 0 1 4 this 3 2058  
579 0 0 6 700 1822 0 0 0 1 4 this 3 2058  
580 0 0 6 701 2010 0 0 0 3 4 this 3 2058  7 low_bit 1 1821  4 size 1 1821  
581 0 0 4 702 1953 0 0 0 4 4 this 3 2057  5 value 1 2010  7 low_bit 1 1821  4 size 1 1821  
582 0 0 6 703 1822 0 0 0 3 4 this 3 2058  7 low_bit 1 1821  4 size 1 1821  
583 0 0 6 704 1822 0 0 0 3 4 this 3 2058  7 low_bit 1 1821  4 size 1 1821  
584 0 0 4 705 1953 0 0 0 3 4 this 3 2057  7 low_bit 1 1821  4 size 1 1821  
585 0 0 4 706 1953 0 0 0 3 4 this 3 2057  7 low_bit 1 1821  4 size 1 1821  
586 0 0 4 707 1953 0 0 0 4 4 this 3 2057  5 value 1 1822  7 low_bit 1 1821  4 size 1 1821  
587 0 0 6 708 1821 0 0 0 1 4 this 3 2058  
588 0 0 6 709 1821 0 0 0 1 4 this 3 2058  
589 0 0 6 710 1821 0 0 0 1 4 this 3 2058  
590 0 0 6 711 1821 0 0 0 1 4 this 3 2058  
591 0 0 6 712 1821 0 0 0 1 4 this 3 2058  
592 0 0 6 713 1821 0 0 0 1 4 this 3 2058  
593 0 0 6 714 1821 0 0 0 2 4 this 3 2058  7 low_bit 1 1821  
594 0 0 4 715 1953 0 0 0 1 4 this 3 2057  
595 0 0 6 716 1822 0 0 0 2 4 this 3 2058  5 other 1 2058  
596 0 0 4 717 1953 0 0 0 1 4 this 3 2057  
597 0 0 4 718 1953 0 0 0 2 4 this 3 2058  3 out 1 1957  
598 0 0 4 719 1953 0 0 0 3 4 this 3 2058  3 out 1 1957  12 spaces_every 1 1821  
599 0 0 4 720 1953 0 0 0 3 4 this 3 2058  3 out 1 1957  12 spaces_every 1 1821  
600 0 0 4 721 1953 0 0 0 3 4 this 3 2058  3 out 1 1957  12 indent_level 1 1821  
601 0 0 6 722 1822 0 0 0 2 4 this 3 2058  5 other 1 2058  
602 0 0 6 723 1822 0 0 0 2 4 this 3 2058  5 other 1 2058  
603 0 0 6 724 1822 0 0 0 2 4 this 3 2058  5 other 1 2058  
604 0 0 6 725 1821 0 0 0 2 4 this 3 2058  5 other 1 2058  
605 0 0 7 726 2057 1472 0 0 2 4 this 3 2058  5 other 1 2058  
606 0 0 7 727 2057 1472 0 0 2 4 this 3 2058  5 other 1 2058  
607 0 0 7 728 2057 1472 0 0 2 4 this 3 2058  5 other 1 2058  
608 0 0 7 729 2057 1472 0 0 1 4 this 3 2058  
609 0 0 7 730 2057 1472 0 0 2 4 this 3 2058  5 shift 1 1821  
610 0 0 7 731 2057 1472 0 0 2 4 this 3 2058  5 shift 1 1821  
611 0 0 6 732 2057 0 0 0 2 4 this 3 2057  5 other 1 2058  
612 0 0 6 733 2057 0 0 0 2 4 this 3 2057  5 other 1 2058  
613 0 0 6 734 2057 0 0 0 2 4 this 3 2057  5 other 1 2058  
614 0 0 6 735 2057 0 0 0 2 4 this 3 2057  5 shift 1 1821  
615 0 0 6 736 2057 0 0 0 2 4 this 3 2057  5 shift 1 1821  
616 0 0 7 737 1959 0 0 0 0 
617 0 0 7 740 2060 1526 0 0 0 
618 0 0 7 740 2060 1526 0 0 1 4 copy 1 2061  
619 0 0 6 741 2060 0 0 0 2 4 this 3 2060  4 copy 1 2061  
620 0 0 7 742 2060 1526 0 0 0 
621 0 0 7 743 2060 1526 0 0 0 
622 0 0 7 744 2060 1526 0 0 1 7 on_bits 1 1821  
623 0 0 7 745 2060 1526 0 0 1 5 index 1 1821  
624 0 0 7 746 2060 1526 0 0 2 7 low_bit 1 1821  4 size 1 1821  
625 0 0 6 748 1822 0 0 0 0 
626 0 0 6 749 1821 0 0 0 0 
627 0 0 6 750 1821 0 0 0 0 
628 0 0 6 751 1822 0 0 0 2 4 this 3 2061  5 index 1 1821  
629 0 0 4 752 1953 0 0 0 2 4 this 3 2060  5 index 1 1821  
630 0 0 4 753 1953 0 0 0 2 4 this 3 2060  5 index 1 1821  
631 0 0 4 754 1953 0 0 0 3 4 this 3 2060  5 index 1 1821  5 value 1 1822  
632 0 0 6 755 1822 0 0 0 1 4 this 3 2061  
633 0 0 6 756 1822 0 0 0 1 4 this 3 2061  
634 0 0 6 757 2010 0 0 0 3 4 this 3 2061  7 low_bit 1 1821  4 size 1 1821  
635 0 0 4 758 1953 0 0 0 4 4 this 3 2060  5 value 1 2010  7 low_bit 1 1821  4 size 1 1821  
636 0 0 6 759 1822 0 0 0 3 4 this 3 2061  7 low_bit 1 1821  4 size 1 1821  
637 0 0 6 760 1822 0 0 0 3 4 this 3 2061  7 low_bit 1 1821  4 size 1 1821  
638 0 0 4 761 1953 0 0 0 3 4 this 3 2060  7 low_bit 1 1821  4 size 1 1821  
639 0 0 4 762 1953 0 0 0 3 4 this 3 2060  7 low_bit 1 1821  4 size 1 1821  
640 0 0 4 763 1953 0 0 0 4 4 this 3 2060  5 value 1 1822  7 low_bit 1 1821  4 size 1 1821  
641 0 0 6 764 1821 0 0 0 1 4 this 3 2061  
642 0 0 6 765 1821 0 0 0 1 4 this 3 2061  
643 0 0 6 766 1821 0 0 0 1 4 this 3 2061  
644 0 0 6 767 1821 0 0 0 1 4 this 3 2061  
645 0 0 6 768 1821 0 0 0 1 4 this 3 2061  
646 0 0 6 769 1821 0 0 0 1 4 this 3 2061  
647 0 0 6 770 1821 0 0 0 2 4 this 3 2061  7 low_bit 1 1821  
648 0 0 4 771 1953 0 0 0 1 4 this 3 2060  
649 0 0 6 772 1822 0 0 0 2 4 this 3 2061  5 other 1 2061  
650 0 0 4 773 1953 0 0 0 1 4 this 3 2060  
651 0 0 4 774 1953 0 0 0 2 4 this 3 2061  3 out 1 1957  
652 0 0 4 775 1953 0 0 0 3 4 this 3 2061  3 out 1 1957  12 spaces_every 1 1821  
653 0 0 4 776 1953 0 0 0 3 4 this 3 2061  3 out 1 1957  12 spaces_every 1 1821  
654 0 0 4 777 1953 0 0 0 3 4 this 3 2061  3 out 1 1957  12 indent_level 1 1821  
655 0 0 6 778 1822 0 0 0 2 4 this 3 2061  5 other 1 2061  
656 0 0 6 779 1822 0 0 0 2 4 this 3 2061  5 other 1 2061  
657 0 0 6 780 1822 0 0 0 2 4 this 3 2061  5 other 1 2061  
658 0 0 6 781 1821 0 0 0 2 4 this 3 2061  5 other 1 2061  
659 0 0 7 782 2060 1526 0 0 2 4 this 3 2061  5 other 1 2061  
660 0 0 7 783 2060 1526 0 0 2 4 this 3 2061  5 other 1 2061  
661 0 0 7 784 2060 1526 0 0 2 4 this 3 2061  5 other 1 2061  
662 0 0 7 785 2060 1526 0 0 1 4 this 3 2061  
663 0 0 7 786 2060 1526 0 0 2 4 this 3 2061  5 shift 1 1821  
664 0 0 7 787 2060 1526 0 0 2 4 this 3 2061  5 shift 1 1821  
665 0 0 6 788 2060 0 0 0 2 4 this 3 2060  5 other 1 2061  
666 0 0 6 789 2060 0 0 0 2 4 this 3 2060  5 other 1 2061  
667 0 0 6 790 2060 0 0 0 2 4 this 3 2060  5 other 1 2061  
668 0 0 6 791 2060 0 0 0 2 4 this 3 2060  5 shift 1 1821  
669 0 0 6 792 2060 0 0 0 2 4 this 3 2060  5 shift 1 1821  
670 0 0 7 793 1959 0 0 0 0 
671 0 0 7 849 2063 1626 0 0 0 
672 0 0 7 849 2063 1626 0 0 1 6 param0 0 2064  
673 0 0 7 797 2020 1374 0 144 /**
 * Returns the ButtonHandle associated with the particular ASCII character, if
 * there is one, or ButtonHandle::none() if there is not.
 */ 1 16 ascii_equivalent 1 1868  
674 0 0 7 798 2020 1374 0 0 0 
675 0 0 7 799 2020 1374 0 0 0 
676 0 0 7 800 2020 1374 0 0 0 
677 0 0 7 801 2020 1374 0 0 0 
678 0 0 7 802 2020 1374 0 0 0 
679 0 0 7 803 2020 1374 0 0 0 
680 0 0 7 804 2020 1374 0 0 0 
681 0 0 7 805 2020 1374 0 0 0 
682 0 0 7 806 2020 1374 0 0 0 
683 0 0 7 807 2020 1374 0 0 0 
684 0 0 7 808 2020 1374 0 0 0 
685 0 0 7 809 2020 1374 0 0 0 
686 0 0 7 810 2020 1374 0 0 0 
687 0 0 7 811 2020 1374 0 0 0 
688 0 0 7 812 2020 1374 0 0 0 
689 0 0 7 813 2020 1374 0 0 0 
690 0 0 7 814 2020 1374 0 0 0 
691 0 0 7 815 2020 1374 0 59 // PC keyboards don't have these four buttons, but Macs do. 0 
692 0 0 7 816 2020 1374 0 0 0 
693 0 0 7 817 2020 1374 0 0 0 
694 0 0 7 818 2020 1374 0 0 0 
695 0 0 7 819 2020 1374 0 0 0 
696 0 0 7 820 2020 1374 0 0 0 
697 0 0 7 821 2020 1374 0 0 0 
698 0 0 7 822 2020 1374 0 0 0 
699 0 0 7 823 2020 1374 0 0 0 
700 0 0 7 824 2020 1374 0 0 0 
701 0 0 7 825 2020 1374 0 0 0 
702 0 0 7 826 2020 1374 0 0 0 
703 0 0 7 827 2020 1374 0 0 0 
704 0 0 7 828 2020 1374 0 27 // delete is a C++ keyword. 0 
705 0 0 7 829 2020 1374 0 27 // delete is a C++ keyword. 0 
706 0 0 7 830 2020 1374 0 0 0 
707 0 0 7 831 2020 1374 0 0 0 
708 0 0 7 832 2020 1374 0 0 0 
709 0 0 7 833 2020 1374 0 0 0 
710 0 0 7 834 2020 1374 0 0 0 
711 0 0 7 835 2020 1374 0 0 0 
712 0 0 7 836 2020 1374 0 0 0 
713 0 0 7 837 2020 1374 0 0 0 
714 0 0 7 838 2020 1374 0 0 0 
715 0 0 7 839 2020 1374 0 0 0 
716 0 0 7 840 2020 1374 0 0 0 
717 0 0 7 841 2020 1374 0 0 0 
718 0 0 7 842 2020 1374 0 0 0 
719 0 0 7 843 2020 1374 0 0 0 
720 0 0 7 844 2020 1374 0 0 0 
721 0 0 7 845 2020 1374 0 0 0 
722 0 0 7 846 2020 1374 0 0 0 
723 0 0 7 847 2020 1374 0 0 0 
724 0 0 7 848 2020 1374 0 0 0 
725 0 0 7 856 2066 1632 0 10 /**
 *
 */ 0 
726 0 0 7 856 2066 1632 0 10 /**
 *
 */ 1 4 copy 1 2067  
727 0 0 6 858 2066 0 0 0 2 4 this 3 2066  4 copy 1 2067  
728 0 0 6 859 1822 0 0 0 2 4 this 3 2067  5 other 1 2067  
729 0 0 6 860 1822 0 0 0 2 4 this 3 2067  5 other 1 2067  
730 0 0 6 861 1822 0 0 0 2 4 this 3 2067  5 other 1 2067  
731 0 0 7 862 2066 1632 0 0 2 4 this 3 2067  5 other 1 2067  
732 0 0 7 863 2066 1632 0 0 2 4 this 3 2067  5 other 1 2067  
733 0 0 6 864 2066 0 0 0 2 4 this 3 2066  5 other 1 2067  
734 0 0 6 865 2066 0 0 0 2 4 this 3 2066  5 other 1 2067  
735 0 0 4 866 1953 0 0 374 /**
 * Sets the list of buttons to watch to be the same as that of the other
 * ModifierButtons object.  This makes the lists pointer equivalent (until one
 * or the other is later modified).
 *
 * This will preserve the state of any button that was on the original list
 * and is also on the new lists.  Any other buttons will get reset to the
 * default state of "up".
 */ 2 4 this 3 2066  5 other 1 2067  
736 0 0 6 867 1822 0 0 232 /**
 * Returns true if the set of buttons indicated as down by this
 * ModifierButtons object is the same set of buttons indicated as down by the
 * other ModifierButtons object.  The buttons indicated as up are not
 * relevant.
 */ 2 4 this 3 2067  5 other 1 2067  
737 0 0 6 868 1822 0 0 248 /**
 * Adds the indicated button to the set of buttons that will be monitored for
 * upness and downness.  Returns true if the button was added, false if it was
 * already being monitored or if too many buttons are currently being
 * monitored.
 */ 2 4 this 3 2066  6 button 1 2020  
738 0 0 6 869 1822 0 0 109 /**
 * Returns true if the indicated button is in the set of buttons being
 * monitored, false otherwise.
 */ 2 4 this 3 2067  6 button 1 2020  
739 0 0 6 870 1822 0 0 313 /**
 * Removes the indicated button from the set of buttons being monitored.
 * Returns true if the button was removed, false if it was not being monitored
 * in the first place.
 *
 * Unlike the other methods, you cannot remove a button by removing its alias;
 * you have to remove exactly the button itself.
 */ 2 4 this 3 2066  6 button 1 2020  
740 0 0 6 871 1821 0 0 143 /**
 * Returns the number of buttons that the ModifierButtons object is monitoring
 * (e.g.  the number of buttons passed to add_button()).
 */ 1 4 this 3 2067  
741 0 0 7 872 2020 1374 0 185 /**
 * Returns the nth button that the ModifierButtons object is monitoring (the
 * nth button passed to add_button()).  This must be in the range 0 <= index <
 * get_num_buttons().
 */ 2 4 this 3 2067  5 index 1 1821  
742 0 0 6 876 1822 0 0 305 /**
 * Records that a particular button has been pressed.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */ 2 4 this 3 2066  6 button 1 2020  
743 0 0 6 877 1822 0 0 306 /**
 * Records that a particular button has been released.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */ 2 4 this 3 2066  6 button 1 2020  
744 0 0 4 878 1953 0 0 66 /**
 * Marks all monitored buttons as being in the "up" state.
 */ 1 4 this 3 2066  
745 0 0 6 879 1822 0 0 157 /**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up or if it is not in the set of buttons being tracked.
 */ 2 4 this 3 2067  6 button 1 2020  
746 0 0 6 879 1822 0 0 105 /**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up.
 */ 2 4 this 3 2067  5 index 1 1821  
747 0 0 6 880 1822 0 0 109 /**
 * Returns true if any of the tracked button are known to be down, or false if
 * all of them are up.
 */ 1 4 this 3 2067  
748 0 0 6 881 1961 0 0 150 /**
 * Returns a string which can be used to prefix any button name or event name
 * with the unique set of modifier buttons currently being held.
 */ 1 4 this 3 2067  
749 0 0 4 882 1953 0 0 69 /**
 * Writes a one-line summary of the buttons known to be down.
 */ 2 4 this 3 2067  3 out 1 1957  
750 0 0 4 883 1953 0 0 123 /**
 * Writes a multi-line summary including all of the buttons being monitored
 * and which ones are known to be down.
 */ 2 4 this 3 2067  3 out 1 1957  
751 0 0 7 896 2069 1669 0 0 0 
752 0 0 7 896 2069 1669 0 0 1 6 param0 0 2070  
753 0 0 7 885 2020 1374 0 166 /**
 * Returns the ButtonHandle associated with the particular numbered mouse
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */ 1 13 button_number 1 1821  
754 0 0 7 886 2020 1374 0 75 /**
 * Returns the ButtonHandle associated with the first mouse button.
 */ 0 
755 0 0 7 887 2020 1374 0 76 /**
 * Returns the ButtonHandle associated with the second mouse button.
 */ 0 
756 0 0 7 888 2020 1374 0 75 /**
 * Returns the ButtonHandle associated with the third mouse button.
 */ 0 
757 0 0 7 889 2020 1374 0 76 /**
 * Returns the ButtonHandle associated with the fourth mouse button.
 */ 0 
758 0 0 7 890 2020 1374 0 75 /**
 * Returns the ButtonHandle associated with the fifth mouse button.
 */ 0 
759 0 0 7 891 2020 1374 0 98 /**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * upwards.
 */ 0 
760 0 0 7 892 2020 1374 0 100 /**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * downwards.
 */ 0 
761 0 0 7 893 2020 1374 0 148 /**
 * Returns the ButtonHandle generated when the mouse is scrolled to the left.
 * Usually, you'll only find the horizontal scroll on laptops.
 */ 0 
762 0 0 7 894 2020 1374 0 149 /**
 * Returns the ButtonHandle generated when the mouse is scrolled to the right.
 * Usually, you'll only find the horizontal scroll on laptops.
 */ 0 
763 0 0 6 895 1822 0 0 117 /**
 * Returns true if the indicated ButtonHandle is a mouse button, false if it
 * is some other kind of button.
 */ 1 6 button 1 2020  
764 0 0 7 899 2072 1676 0 10 /**
 *
 */ 0 
765 0 0 7 899 2072 1676 0 10 /**
 *
 */ 1 4 copy 1 2073  
766 0 0 6 900 2072 0 0 0 2 4 this 3 2072  4 copy 1 2073  
767 0 0 6 901 1820 0 0 10 /**
 *
 */ 1 4 this 3 2073  
768 0 0 6 902 1820 0 0 10 /**
 *
 */ 1 4 this 3 2073  
769 0 0 6 903 1822 0 0 10 /**
 *
 */ 1 4 this 3 2073  
770 0 0 4 904 1953 0 0 10 /**
 *
 */ 2 4 this 3 2073  3 out 1 1957  
771 0 0 6 910 1821 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2075  
772 0 0 4 911 1953 0 0 349 /**
 * Explicitly increments the reference count.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */ 1 4 this 3 2075  
773 0 0 6 912 1822 0 0 201 /**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2075  
774 0 0 6 913 1822 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 2075  
775 0 0 6 915 1821 0 0 293 /**
 * Returns the union of the values defined in the Referenced enum that
 * represents the various things that appear to be holding a pointer to this
 * object.
 *
 * If R_node is included, at least one node is holding a pointer; if R_cache
 * is included, at least one cache element is.
 */ 1 4 this 3 2075  
776 0 0 7 916 1959 0 0 0 0 
777 0 0 7 918 2077 1735 0 10 /**
 *
 */ 0 
778 0 0 7 918 2077 1735 0 10 /**
 *
 */ 1 4 from 1 2012  
779 0 0 7 918 2077 1735 0 0 1 6 param0 0 2015  
780 0 0 7 919 2077 1735 0 72 /**
 * Returns a SparseArray with an infinite array of bits, all on.
 */ 0 
781 0 0 7 920 2077 1735 0 56 /**
 * Returns a SparseArray whose bits are all off.
 */ 0 
782 0 0 7 921 2077 1735 0 65 /**
 * Returns a SparseArray whose lower on_bits bits are on.
 */ 1 7 on_bits 1 1821  
783 0 0 7 922 2077 1735 0 64 /**
 * Returns a SparseArray with only the indicated bit on.
 */ 1 5 index 1 1821  
784 0 0 7 923 2077 1735 0 79 /**
 * Returns a SparseArray whose size bits, beginning at low_bit, are on.
 */ 2 7 low_bit 1 1821  4 size 1 1821  
785 0 0 6 924 1822 0 0 393 /**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The SparseArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or SparseArray interchangeably.
 */ 0 
786 0 0 6 925 1821 0 0 428 /**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The SparseArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or SparseArray interchangeably.
 */ 0 
787 0 0 6 926 1821 0 0 300 /**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */ 1 4 this 3 2015  
788 0 0 6 927 1822 0 0 191 /**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */ 2 4 this 3 2015  5 index 1 1821  
789 0 0 4 928 1953 0 0 97 /**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2077  5 index 1 1821  
790 0 0 4 929 1953 0 0 98 /**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2077  5 index 1 1821  
791 0 0 4 930 1953 0 0 84 /**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */ 3 4 this 3 2077  5 index 1 1821  5 value 1 1822  
792 0 0 6 931 1822 0 0 118 /**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */ 1 4 this 3 2015  
793 0 0 6 932 1822 0 0 71 /**
 * Returns true if the entire bitmask is zero, false otherwise.
 */ 1 4 this 3 2015  
794 0 0 6 933 1822 0 0 70 /**
 * Returns true if the entire bitmask is one, false otherwise.
 */ 1 4 this 3 2015  
795 0 0 6 934 1822 0 0 82 /**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */ 3 4 this 3 2015  7 low_bit 1 1821  4 size 1 1821  
796 0 0 6 935 1822 0 0 84 /**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */ 3 4 this 3 2015  7 low_bit 1 1821  4 size 1 1821  
797 0 0 4 936 1953 0 0 47 /**
 * Sets the indicated range of bits on.
 */ 3 4 this 3 2077  7 low_bit 1 1821  4 size 1 1821  
798 0 0 4 937 1953 0 0 48 /**
 * Sets the indicated range of bits off.
 */ 3 4 this 3 2077  7 low_bit 1 1821  4 size 1 1821  
799 0 0 4 938 1953 0 0 64 /**
 * Sets the indicated range of bits to either on or off.
 */ 4 4 this 3 2077  5 value 1 1822  7 low_bit 1 1821  4 size 1 1821  
800 0 0 6 939 1821 0 0 127 /**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */ 1 4 this 3 2015  
801 0 0 6 940 1821 0 0 127 /**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */ 1 4 this 3 2015  
802 0 0 6 941 1821 0 0 146 /**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there are an infinite number of 1 bits.
 */ 1 4 this 3 2015  
803 0 0 6 942 1821 0 0 146 /**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there are an infinite number of 1 bits.
 */ 1 4 this 3 2015  
804 0 0 6 943 1821 0 0 143 /**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2015  
805 0 0 6 944 1821 0 0 143 /**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2015  
806 0 0 6 945 1821 0 0 287 /**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */ 2 4 this 3 2015  7 low_bit 1 1821  
807 0 0 4 946 1953 0 0 93 /**
 * Inverts all the bits in the SparseArray.  This is equivalent to array =
 * ~array.
 */ 1 4 this 3 2077  
808 0 0 6 947 1822 0 0 181 /**
 * Returns true if this SparseArray has any "one" bits in common with the
 * other one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */ 2 4 this 3 2015  5 other 1 2015  
809 0 0 4 948 1953 0 0 52 /**
 * Sets all the bits in the SparseArray off.
 */ 1 4 this 3 2077  
810 0 0 4 949 1953 0 0 10 /**
 *
 */ 2 4 this 3 2015  3 out 1 1957  
811 0 0 6 950 1822 0 0 0 2 4 this 3 2015  5 other 1 2015  
812 0 0 6 951 1822 0 0 0 2 4 this 3 2015  5 other 1 2015  
813 0 0 6 952 1822 0 0 0 2 4 this 3 2015  5 other 1 2015  
814 0 0 6 953 1821 0 0 242 /**
 * Returns a number less than zero if this SparseArray sorts before the
 * indicated other SparseArray, greater than zero if it sorts after, or 0 if
 * they are equivalent.  This is based on the same ordering defined by
 * operator <.
 */ 2 4 this 3 2015  5 other 1 2015  
815 0 0 7 954 2077 1735 0 0 2 4 this 3 2015  5 other 1 2015  
816 0 0 7 955 2077 1735 0 0 2 4 this 3 2015  5 other 1 2015  
817 0 0 7 956 2077 1735 0 0 2 4 this 3 2015  5 other 1 2015  
818 0 0 7 957 2077 1735 0 0 1 4 this 3 2015  
819 0 0 7 958 2077 1735 0 0 2 4 this 3 2015  5 shift 1 1821  
820 0 0 7 959 2077 1735 0 0 2 4 this 3 2015  5 shift 1 1821  
821 0 0 6 960 2077 0 0 0 2 4 this 3 2077  5 other 1 2015  
822 0 0 6 961 2077 0 0 0 2 4 this 3 2077  5 other 1 2015  
823 0 0 6 962 2077 0 0 0 2 4 this 3 2077  5 other 1 2015  
824 0 0 6 963 2077 0 0 0 2 4 this 3 2077  5 shift 1 1821  
825 0 0 6 964 2077 0 0 0 2 4 this 3 2077  5 shift 1 1821  
826 0 0 6 965 1822 0 0 330 /**
 * If this is true, the SparseArray is actually defined as a list of subranges
 * of integers that are *not* in the set.  If this is false (the default),
 * then the subranges define the integers that *are* in the set.  This affects
 * the interpretation of the values returned by iterating through
 * get_num_subranges().
 */ 1 4 this 3 2015  
827 0 0 6 966 2017 0 0 237 /**
 * Returns the number of separate subranges stored in the SparseArray.  You
 * can use this limit to iterate through the subranges, calling
 * get_subrange_begin() and get_subrange_end() for each one.
 *
 * Also see is_inverse().
 */ 1 4 this 3 2015  
828 0 0 6 967 1821 0 0 94 /**
 * Returns the first numeric element in the nth subrange.
 *
 * Also see is_inverse().
 */ 2 4 this 3 2015  1 n 1 2017  
829 0 0 6 968 1821 0 0 104 /**
 * Returns the last numeric element, plus one, in the nth subrange.
 *
 * Also see is_inverse().
 */ 2 4 this 3 2015  1 n 1 2017  
830 0 0 7 969 1959 0 0 0 0 
831 0 0 7 972 1959 0 0 52 /**
 * Returns the type of the underlying value.
 */ 1 4 this 3 2078  
832 0 0 4 973 1953 0 0 0 2 4 this 3 2078  3 out 1 1957  
833 0 0 7 974 1959 0 0 0 0 
834 0 0 7 976 2082 1001 0 10 /**
 *
 */ 1 5 value 1 2080  
835 0 0 7 977 1902 0 0 55 /**
 * Retrieves the value stored in the parameter.
 */ 1 4 this 3 2083  
836 0 0 7 980 1959 0 0 0 0 
837 0 0 7 982 2085 1001 0 0 1 5 value 1 1961  
838 0 0 4 983 1953 0 0 0 2 4 this 3 2085  5 value 1 1961  
839 0 0 6 984 1961 0 0 0 1 4 this 3 2086  
840 0 0 7 988 1959 0 0 0 0 
841 0 0 7 991 2088 1001 0 0 1 5 value 1 1961  
842 0 0 4 992 1953 0 0 0 2 4 this 3 2088  5 value 1 1961  
843 0 0 6 993 1961 0 0 0 1 4 this 3 2089  
844 0 0 7 995 1959 0 0 0 0 
845 0 0 7 998 2094 1001 0 0 1 5 value 1 2091  
846 0 0 4 999 1953 0 0 0 2 4 this 3 2094  5 value 1 2091  
847 0 0 6 1000 2091 0 0 0 1 4 this 3 2095  
848 0 0 7 1002 1959 0 0 0 0 
849 0 0 7 1005 2100 1001 0 0 1 5 value 1 2097  
850 0 0 4 1006 1953 0 0 0 2 4 this 3 2100  5 value 1 2097  
851 0 0 6 1007 2097 0 0 0 1 4 this 3 2101  
852 0 0 7 1009 1959 0 0 0 0 
853 0 0 7 1012 2106 1001 0 0 1 5 value 1 2103  
854 0 0 4 1013 1953 0 0 0 2 4 this 3 2106  5 value 1 2103  
855 0 0 6 1014 2103 0 0 0 1 4 this 3 2107  
856 0 0 7 1016 1959 0 0 0 0 
857 0 0 7 1019 2112 1001 0 0 1 5 value 1 2109  
858 0 0 4 1020 1953 0 0 0 2 4 this 3 2112  5 value 1 2109  
859 0 0 6 1021 2109 0 0 0 1 4 this 3 2113  
860 0 0 7 1023 1959 0 0 0 0 
861 0 0 7 1026 2118 1001 0 0 1 5 value 1 2115  
862 0 0 4 1027 1953 0 0 0 2 4 this 3 2118  5 value 1 2115  
863 0 0 6 1028 2115 0 0 0 1 4 this 3 2119  
864 0 0 7 1030 1959 0 0 0 0 
865 0 0 7 1033 2124 1001 0 0 1 5 value 1 2121  
866 0 0 4 1034 1953 0 0 0 2 4 this 3 2124  5 value 1 2121  
867 0 0 6 1035 2121 0 0 0 1 4 this 3 2125  
868 0 0 7 1037 1959 0 0 0 0 
869 0 0 7 1040 2130 1001 0 0 1 5 value 1 2127  
870 0 0 4 1041 1953 0 0 0 2 4 this 3 2130  5 value 1 2127  
871 0 0 6 1042 2127 0 0 0 1 4 this 3 2131  
872 0 0 7 1044 1959 0 0 0 0 
873 0 0 7 1047 2136 1001 0 0 1 5 value 1 2133  
874 0 0 4 1048 1953 0 0 0 2 4 this 3 2136  5 value 1 2133  
875 0 0 6 1049 2133 0 0 0 1 4 this 3 2137  
876 0 0 7 1051 1959 0 0 0 0 
877 0 0 7 1054 2142 1001 0 0 1 5 value 1 2139  
878 0 0 4 1055 1953 0 0 0 2 4 this 3 2142  5 value 1 2139  
879 0 0 6 1056 2139 0 0 0 1 4 this 3 2143  
880 0 0 7 1058 1959 0 0 0 0 
881 0 0 7 1061 2148 1001 0 0 1 5 value 1 2145  
882 0 0 4 1062 1953 0 0 0 2 4 this 3 2148  5 value 1 2145  
883 0 0 6 1063 2145 0 0 0 1 4 this 3 2149  
884 0 0 7 1065 1959 0 0 0 0 
885 0 0 7 1068 2154 1001 0 0 1 5 value 1 2151  
886 0 0 4 1069 1953 0 0 0 2 4 this 3 2154  5 value 1 2151  
887 0 0 6 1070 2151 0 0 0 1 4 this 3 2155  
888 0 0 7 1072 1959 0 0 0 0 
889 0 0 7 1075 2160 1001 0 0 1 5 value 1 2157  
890 0 0 4 1076 1953 0 0 0 2 4 this 3 2160  5 value 1 2157  
891 0 0 6 1077 2157 0 0 0 1 4 this 3 2161  
892 0 0 7 1079 1959 0 0 0 0 
893 0 0 7 1082 2166 1001 0 0 1 5 value 1 2163  
894 0 0 4 1083 1953 0 0 0 2 4 this 3 2166  5 value 1 2163  
895 0 0 6 1084 2163 0 0 0 1 4 this 3 2167  
896 0 0 7 1086 1959 0 0 0 0 
897 0 0 7 1094 1959 0 0 0 0 
898 0 0 7 1097 2171 1805 0 0 1 6 param0 0 2169  
899 0 0 7 1097 2171 1805 0 56 /**
 * Create a free id pool in the range [min:max].
 */ 2 3 min 1 2005  3 max 1 2005  
900 0 0 6 1099 2005 0 0 134 /**
 * Returns an id between _min and _max (that were passed to the constructor).
 * IndexEnd is returned if no ids are available.
 */ 1 4 this 3 2171  
901 0 0 4 1100 1953 0 0 518 /**
 * This may be called to mark a particular id as having already been allocated
 * (for instance, by a prior pass).  The specified id is removed from the
 * available pool.
 *
 * Because of the limitations of this algorithm, this is most efficient when
 * it is called before the first call to allocate(), and when all the calls to
 * initial_reserve_id() are made in descending order by id.  However, this is
 * a performance warning only; if performance is not an issue, any id may be
 * reserved at any time.
 */ 2 4 this 3 2171  2 id 1 2005  
902 0 0 4 1101 1953 0 0 112 /**
 * Free an allocated index (index must be between _min and _max that were
 * passed to the constructor).
 */ 2 4 this 3 2171  5 index 1 2005  
903 0 0 6 1102 2172 0 0 117 /**
 * return the decimal fraction of the pool that is used.  The range is 0 to
 * 1.0 (e.g.  75% would be 0.75).
 */ 1 4 this 3 2169  
904 0 0 4 1103 1953 0 0 42 /**
 * ...intended for debugging only.
 */ 2 4 this 3 2169  3 out 1 1957  
905 0 0 4 1104 1953 0 0 42 /**
 * ...intended for debugging only.
 */ 2 4 this 3 2169  3 out 1 1957  
906 0 0 6 660 1883 0 0 0 1 3 str 1 1961  
907 0 0 6 661 1961 0 0 0 1 2 cs 1 1883  
908 0 0 6 662 2174 0 0 0 0 
909 0 0 6 663 2174 0 0 0 0 
910 0 0 6 851 2176 0 0 602 /**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */ 1 8 filename 1 1978  
911 0 0 6 852 2176 0 0 396 /**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */ 2 4 name 1 1961  4 data 1 1961  
912 0 0 6 853 1822 0 0 0 1 4 page 1 2176  
913 0 0 4 854 1953 0 0 0 1 4 hash 1 2178  
914 0 0 6 1105 1850 0 0 203 /**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This hooks into the native pickle and cPickle modules, but it cannot
 * properly handle self-referential BAM objects.
 */ 2 10 this_class 1 1850  4 data 1 1961  
915 0 0 6 1106 1850 0 0 398 /**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This is similar to py_decode_TypedWritable_from_bam_stream, but it provides
 * additional support for the missing persistent-state object needed to
 * properly support self-referential BAM objects written to the pickle stream.
 * This hooks into the pickle and cPickle modules implemented in
 * direct/src/stdpy.
 */ 3 9 unpickler 1 1850  10 this_class 1 1850  4 data 1 1961  
366
1814 29 ConstPointerToArray< ushort > 0 141313 29 ConstPointerToArray< ushort > 29 ConstPointerToArray< ushort > 0 0 0 1 919 929 0 9 920 921 922 923 924 925 926 927 928 0 0 1 0 1815 0 0 0 0 0

1815 28 PointerToArrayBase< ushort > 0 26625 28 PointerToArrayBase< ushort > 28 PointerToArrayBase< ushort > 0 0 0 0 918 0 0 0 0 1 0 1816 0 0 0 0 0

1816 49 PointerToBase< ReferenceCountedVector< ushort > > 0 43009 49 PointerToBase< ReferenceCountedVector< ushort > > 49 PointerToBase< ReferenceCountedVector< ushort > > 0 0 0 0 0 0 2 916 917 0 0 1 0 1817 0 0 0 0 0

1817 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1818 24 PointerToArray< ushort > 0 141313 24 PointerToArray< ushort > 24 PointerToArray< ushort > 0 0 0 1 930 947 0 16 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 0 0 1 0 1815 0 0 0 0 0

1819 13 AnimInterface 0 26625 13 AnimInterface 13 AnimInterface 0 0 0 0 948 9 2180 2181 2182 2183 2184 2185 2186 2187 2188 17 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 0 0 0 0 0 226
/**
 * This is the fundamental interface for things that have a play/loop/stop
 * type interface for frame-based animation, such as animated characters.
 * This is the base class for AnimControl and other, similar classes.
 */

1820 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1821 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1822 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1823 16 AutoTextureScale 0 532481 16 AutoTextureScale 16 AutoTextureScale 0 0 0 0 0 0 0 0 0 0 5 8 ATS_none 8 ATS_none 0
0 8 ATS_down 8 ATS_down 0
1 6 ATS_up 6 ATS_up 0
2 7 ATS_pad 7 ATS_pad 0
3 15 ATS_unspecified 15 ATS_unspecified 0
4 0 0

1824 9 UpdateSeq 0 141313 9 UpdateSeq 9 UpdateSeq 0 0 0 1 966 986 1 2189 19 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 0 0 0 0 0 761
/**
 * This is a sequence number that increments monotonically.  It can be used to
 * track cache updates, or serve as a kind of timestamp for any changing
 * properties.
 *
 * A special class is used instead of simply an int, so we can elegantly
 * handle such things as wraparound and special cases.  There are two special
 * cases.  Firstly, a sequence number is 'initial' when it is first created.
 * This sequence is older than any other sequence number.  Secondly, a
 * sequence number may be explicitly set to 'old'.  This is older than any
 * other sequence number except 'initial'.  Finally, we have the explicit
 * number 'fresh', which is newer than any other sequence number.  All other
 * sequences are numeric and are monotonically increasing.
 */

1825 7 Integer 0 2367488 21 AtomicAdjust::Integer 21 AtomicAdjust::Integer 1826 0 1827 0 0 0 0 0 0 0 0 0 0

1826 12 AtomicAdjust 0 1024 12 AtomicAdjust 12 AtomicAdjust 0 0 0 0 0 0 0 0 0 0 0 0 0

1827 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1828 13 TypedWritable 0 75777 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 8 987 988 989 990 991 992 993 994 0 0 1 0 1829 0 0 0 0 135
/**
 * Base class for objects that can be written to and read from Bam files.
 *
 * See also TypedObject for detailed instructions.
 */

1829 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1830 27 TypedWritableReferenceCount 0 141313 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 1001 0 2 999 1000 0 0 2 3 1828 995 996 3 1831 997 998 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1831 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

1832 14 BamCacheRecord 0 26625 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 1006 5 2190 2191 2192 2193 2194 19 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 0 0 2 3 1830 1002 1003 3 1833 1004 1005 0 0 231
/**
 * An instance of this class is written to the front of a Bam or Txo file to
 * make the file a cached instance of some other loadable resource.  This
 * record contains information needed to test the validity of the cache.
 */

1833 14 LinkedListNode 0 1050625 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 468
/**
 * This just stores the pointers to implement a doubly-linked list of some
 * kind of object.  There are occasions when a hand-rolled linked list is more
 * appropriate than an STL container.
 *
 * Typically, each node of the linked list, as well as the root of the list,
 * will inherit from this class.
 *
 * Note that this class is not inherently thread-safe; derived classes are
 * responsible for protecting any calls into it within mutexes, if necessary.
 */

1834 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1835 0 0 0 0 0 0 0 0 0 0

1835 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

1836 6 time_t 0 2105344 6 time_t 6 time_t 0 0 1827 0 0 0 0 0 0 0 0 0 0

1837 15 TypedWritable * 0 8576 15 TypedWritable * 15 TypedWritable * 0 0 1828 0 0 0 0 0 0 0 0 0 0

1838 8 BamCache 0 26625 8 BamCache 8 BamCache 0 0 0 1 1026 1027 9 2195 2196 2197 2198 2199 2200 2201 2202 2203 26 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 0 0 0 0 0 615
/**
 * This class maintains a cache of Bam and/or Txo objects generated from model
 * files and texture images (as well as possibly other kinds of loadable
 * objects that can be stored in bam file format).
 *
 * This class also maintains a persistent index that lists all of the cached
 * objects (see BamCacheIndex). We go through some considerable effort to make
 * sure this index gets saved correctly to disk, even in the presence of
 * multiple different processes writing to the same index, and without relying
 * too heavily on low-level os-provided file locks (which work poorly with C++
 * iostreams).
 */

1839 8 BamEnums 0 141313 8 BamEnums 8 BamEnums 0 0 0 1 1054 1055 0 0 0 0 0 0 3 1840 1841 1842 104
/**
 * This class exists just to provide scoping for the enums shared by BamReader
 * and BamWriter.
 */

1840 9 BamEndian 0 794624 19 BamEnums::BamEndian 19 BamEnums::BamEndian 1839 0 0 0 0 0 0 0 0 0 3 12 BE_bigendian 22 BamEnums::BE_bigendian 0
0 15 BE_littleendian 25 BamEnums::BE_littleendian 0
1 9 BE_native 19 BamEnums::BE_native 0
1 0 345
// This defines an enumerated type used to represent the endianness of
// certain numeric values stored in a Bam file.  It really has only two
// possible values, either BE_bigendian or BE_littleendian; but through a
// preprocessor trick we also add BE_native, which is the same numerically
// as whichever value the hardware supports natively.

1841 13 BamObjectCode 0 794624 23 BamEnums::BamObjectCode 23 BamEnums::BamObjectCode 1839 0 0 0 0 0 0 0 0 0 5 8 BOC_push 18 BamEnums::BOC_push 0
0 7 BOC_pop 17 BamEnums::BOC_pop 0
1 11 BOC_adjunct 21 BamEnums::BOC_adjunct 0
2 10 BOC_remove 20 BamEnums::BOC_remove 0
3 13 BOC_file_data 23 BamEnums::BOC_file_data 0
4 0 569
/*
 * This is the code written along with each object.  It is used to control
 * object scoping.  A BOC_push includes an object definition, and will always
 * be eventually paired with a BOC_pop (which does not).  A BOC_adjunct
 * includes an object definition but does not push the level; it is associated
 * with the current level.  BOC_remove lists object ID's that have been
 * deallocated on the sender end.  BOC_file_data may appear at any level and
 * indicates the following datagram contains auxiliary file data that may be
 * referenced by a later object.
 */

1842 14 BamTextureMode 0 794624 24 BamEnums::BamTextureMode 24 BamEnums::BamTextureMode 1839 0 0 0 0 0 0 0 0 0 5 13 BTM_unchanged 23 BamEnums::BTM_unchanged 0
0 12 BTM_fullpath 22 BamEnums::BTM_fullpath 0
1 12 BTM_relative 22 BamEnums::BTM_relative 0
2 12 BTM_basename 22 BamEnums::BTM_basename 0
3 11 BTM_rawdata 21 BamEnums::BTM_rawdata 0
4 0 73
// This enum is used to control how textures are written to a bam stream.

1843 13 LoaderOptions 0 141313 13 LoaderOptions 13 LoaderOptions 0 0 0 1 1056 1067 4 2204 2205 2206 2207 10 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 0 0 0 0 2 1844 1845 65
/**
 * Specifies parameters that may be passed to the loader.
 */

1844 11 LoaderFlags 0 794624 26 LoaderOptions::LoaderFlags 26 LoaderOptions::LoaderFlags 1843 0 0 0 0 0 0 0 0 0 10 9 LF_search 24 LoaderOptions::LF_search 0
1 16 LF_report_errors 31 LoaderOptions::LF_report_errors 0
2 19 LF_convert_skeleton 34 LoaderOptions::LF_convert_skeleton 0
4 19 LF_convert_channels 34 LoaderOptions::LF_convert_channels 0
8 15 LF_convert_anim 30 LoaderOptions::LF_convert_anim 22
// skeleton + channels
12 16 LF_no_disk_cache 31 LoaderOptions::LF_no_disk_cache 20
// disallow BamCache
16 15 LF_no_ram_cache 30 LoaderOptions::LF_no_ram_cache 21
// disallow ModelPool
32 11 LF_no_cache 26 LoaderOptions::LF_no_cache 19
// no_disk + no_ram
48 13 LF_cache_only 28 LoaderOptions::LF_cache_only 23
// fail if not in cache
64 17 LF_allow_instance 32 LoaderOptions::LF_allow_instance 35
// returned pointer might be shared
128 0 33
// Flags for loading model files.

1845 12 TextureFlags 0 794624 27 LoaderOptions::TextureFlags 27 LoaderOptions::TextureFlags 1843 0 0 0 0 0 0 0 0 0 8 10 TF_preload 25 LoaderOptions::TF_preload 30
// Texture will have RAM image
4 17 TF_preload_simple 32 LoaderOptions::TF_preload_simple 37
// Texture will have simple RAM image
8 11 TF_allow_1d 26 LoaderOptions::TF_allow_1d 40
// If texture is Nx1, make a 1-d texture
16 19 TF_generate_mipmaps 34 LoaderOptions::TF_generate_mipmaps 30
// Consider generating mipmaps
32 12 TF_multiview 27 LoaderOptions::TF_multiview 36
// Load a multiview texture in pages
64 10 TF_integer 25 LoaderOptions::TF_integer 35
// Load as an integer (RGB) texture
128 8 TF_float 23 LoaderOptions::TF_float 43
// Load as a floating-point (depth) texture
256 20 TF_allow_compression 35 LoaderOptions::TF_allow_compression 33
// Consider compressing RAM image
512 0 35
// Flags for loading texture files.

1846 9 BamReader 0 26625 9 BamReader 9 BamReader 0 0 0 1 1068 1069 6 2208 2209 2210 2211 2212 2213 20 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 0 0 1 0 1839 0 0 0 0 1311
/**
 * This is the fundamental interface for extracting binary objects from a Bam
 * file, as generated by a BamWriter.
 *
 * A Bam file can be thought of as a linear collection of objects.  Each
 * object is an instance of a class that inherits, directly or indirectly,
 * from TypedWritable.  The objects may include pointers to other objects
 * within the Bam file; the BamReader automatically manages these (with help
 * from code within each class) and restores the pointers correctly.
 *
 * This is the abstract interface and does not specifically deal with disk
 * files, but rather with a DatagramGenerator of some kind, which is simply a
 * linear source of Datagrams.  It is probably from a disk file, but it might
 * conceivably be streamed directly from a network or some such nonsense.
 *
 * Bam files are most often used to store scene graphs or subgraphs, and by
 * convention they are given filenames ending in the extension ".bam" when
 * they are used for this purpose.  However, a Bam file may store any
 * arbitrary list of TypedWritable objects; in this more general usage, they
 * are given filenames ending in ".boo" to differentiate them from the more
 * common scene graph files.
 *
 * See also BamFile, which defines a higher-level interface to read and write
 * Bam files on disk.
 */

1847 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1848 0 0 0 0 0 0 0 0 0 0

1848 17 DatagramGenerator 0 2049 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * This class defines the abstract interace to any source of datagrams,
 * whether it be from a file or from the net.
 */

1849 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 1843 0 0 0 0 0 0 0 0 0 0

1850 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1851 0 0 0 0 0 0 0 0 0 0

1851 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1852 0 0 0 0 0 0 0 0 0 0

1852 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1853 9 BamWriter 0 26625 9 BamWriter 9 BamWriter 0 0 0 1 1090 1091 6 2214 2215 2216 2217 2218 2219 16 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 0 0 1 0 1839 0 0 0 0 1376
/**
 * This is the fundamental interface for writing binary objects to a Bam file,
 * to be extracted later by a BamReader.
 *
 * A Bam file can be thought of as a linear collection of objects.  Each
 * object is an instance of a class that inherits, directly or indirectly,
 * from TypedWritable.  The objects may include pointers to other objects; the
 * BamWriter automatically manages these (with help from code within each
 * class) and writes all referenced objects to the file in such a way that the
 * pointers may be correctly restored later.
 *
 * This is the abstract interface and does not specifically deal with disk
 * files, but rather with a DatagramSink of some kind, which simply accepts a
 * linear stream of Datagrams.  It is probably written to a disk file, but it
 * might conceivably be streamed directly to a network or some such nonsense.
 *
 * Bam files are most often used to store scene graphs or subgraphs, and by
 * convention they are given filenames ending in the extension ".bam" when
 * they are used for this purpose.  However, a Bam file may store any
 * arbitrary list of TypedWritable objects; in this more general usage, they
 * are given filenames ending in ".boo" to differentiate them from the more
 * common scene graph files.
 *
 * See also BamFile, which defines a higher-level interface to read and write
 * Bam files on disk.
 */

1854 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1855 0 0 0 0 0 0 0 0 0 0

1855 12 DatagramSink 0 2049 12 DatagramSink 12 DatagramSink 0 0 0 0 0 0 0 0 0 0 0 0 135
/**
 * This class defines the abstract interface to sending datagrams to any
 * target, whether it be into a file or across the net
 */

1856 23 BitMask< uint16_t, 16 > 0 141313 23 BitMask< uint16_t, 16 > 23 BitMask< uint16_t, 16 > 0 0 0 1 1108 1170 0 61 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 0 0 0 0 0 0

1857 9 BitMask16 0 2105345 9 BitMask16 9 BitMask16 0 0 1856 0 0 0 0 0 0 0 0 0 0

1858 23 BitMask< uint32_t, 32 > 0 141313 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 1 1171 1233 0 61 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 0 0 0 0 0 0

1859 9 BitMask32 0 2105345 9 BitMask32 9 BitMask32 0 0 1858 0 0 0 0 0 0 0 0 0 0

1860 23 BitMask< uint64_t, 64 > 0 141313 23 BitMask< uint64_t, 64 > 23 BitMask< uint64_t, 64 > 0 0 0 1 1234 1296 0 61 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 0 0 0 0 0 0

1861 9 BitMask64 0 2105345 9 BitMask64 9 BitMask64 0 0 1860 0 0 0 0 0 0 0 0 0 0

1862 13 BitMaskNative 0 1 13 BitMaskNative 13 BitMaskNative 0 0 0 0 0 0 0 0 0 0 0 0 0

1863 8 BitArray 0 141313 8 BitArray 8 BitArray 0 0 0 1 1297 1354 0 56 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 0 0 0 0 1 1864 210
/**
 * A dynamic array with an unlimited number of bits.
 *
 * This is similar to a BitMask, except it appears to contain an infinite
 * number of bits.  You can use it very much as you would use a BitMask.
 */

1864 0 0 794624 10 BitArray:: 0 1863 0 0 0 0 0 0 0 0 0 1 17 num_bits_per_word 27 BitArray::num_bits_per_word 0
64 0 0

1865 12 ButtonHandle 0 16918529 12 ButtonHandle 12 ButtonHandle 0 0 0 1 1355 1374 4 2220 2221 2222 2223 17 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1373 0 1 1372 0 0 0 162
/**
 * A ButtonHandle represents a single button from any device, including
 * keyboard buttons and mouse buttons (but see KeyboardButton and
 * MouseButton).
 */

1866 6 string 0 2105344 11 std::string 11 std::string 0 0 1867 0 0 0 0 0 0 0 0 0 0

1867 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1868 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1869 14 ButtonRegistry 0 141313 14 ButtonRegistry 14 ButtonRegistry 0 0 0 1 1380 1381 0 5 1375 1376 1377 1378 1379 0 0 0 0 0 188
/**
 * The ButtonRegistry class maintains all the assigned ButtonHandles in a
 * given system.  There should be only one ButtonRegistry class during the
 * lifetime of the application.
 */

1870 9 ButtonMap 0 141313 9 ButtonMap 9 ButtonMap 0 0 0 1 1389 1390 0 7 1382 1383 1384 1385 1386 1387 1388 0 0 1 0 1871 0 0 0 0 328
/**
 * This class represents a map containing all of the buttons of a (keyboard)
 * device, though it can also be used as a generic mapping between
 * ButtonHandles.  It maps an underlying 'raw' button to a 'virtual' button,
 * which may optionally be associated with an appropriate platform-specific
 * name for the button.
 */

1871 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1872 14 CallbackObject 0 141313 14 CallbackObject 14 CallbackObject 0 0 0 1 1394 1395 0 3 1391 1392 1393 0 0 1 0 1871 0 0 0 0 276
/**
 * This is a generic object that can be assigned to a callback at various
 * points in the rendering process.  This is actually a base class for a
 * handful of specialized callback object types.  You can also subclass it
 * yourself to make your own callback handler.
 */

1873 33 CachedTypedWritableReferenceCount 0 43009 33 CachedTypedWritableReferenceCount 33 CachedTypedWritableReferenceCount 0 0 0 0 0 1 2224 5 1396 1397 1398 1399 1400 0 0 1 0 1830 0 0 0 0 722
/**
 * This is a special extension to ReferenceCount that includes dual reference
 * counts: the standard reference count number, which includes all references
 * to the object, and a separate number (the cache reference count) that
 * counts the number of references to the object just within its cache alone.
 * When get_ref_count() == get_cache_ref_count(), the object is not referenced
 * outside the cache.
 *
 * The cache refs must be explicitly maintained; there is no PointerTo<> class
 * to maintain the cache reference counts automatically.  The cache reference
 * count is automatically included in the overall reference count: calling
 * cache_ref() and cache_unref() automatically calls ref() and unref().
 */

1874 12 CallbackData 0 141313 12 CallbackData 12 CallbackData 0 0 0 0 1404 0 3 1401 1402 1403 0 0 1 0 1829 0 0 0 0 348
/**
 * This is a generic data block that is passed along to a CallbackObject when
 * a callback is made.  It contains data specific to the particular callback
 * type in question.
 *
 * This is actually an abstract base class and contains no data.
 * Specializations of this class will contain the actual data relevant to each
 * callback type.
 */

1875 20 PythonCallbackObject 0 75777 20 PythonCallbackObject 20 PythonCallbackObject 0 0 0 1 1405 1395 1 2225 6 1406 1407 1408 1409 1410 1411 0 0 1 0 1872 0 0 0 0 158
/**
 * This is a specialization on CallbackObject to allow a callback to directly
 * call an arbitarary Python function.  Powerful!  But use with caution.
 */

1876 7 TimeVal 0 141313 7 TimeVal 7 TimeVal 0 0 0 1 1412 1417 1 2226 2 1413 1414 0 0 0 0 0 0

1877 9 ulong [2] 0 4202496 9 ulong [2] 9 ulong [2] 0 0 1878 2 0 0 0 0 0 0 0 0 0 0

1878 5 ulong 0 2105344 5 ulong 5 ulong 0 0 1879 0 0 0 0 0 0 0 0 0 0

1879 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1880 11 ClockObject 0 75777 11 ClockObject 11 ClockObject 0 0 0 1 1418 0 11 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 28 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 0 0 1 0 1831 0 0 0 1 1881 1000
/**
 * A ClockObject keeps track of elapsed real time and discrete time.  In
 * normal mode, get_frame_time() returns the time as of the last time tick()
 * was called.  This is the "discrete" time, and is usually used to get the
 * time as of, for instance, the beginning of the current frame.
 *
 * In other modes, as set by set_mode() or the clock-mode config variable,
 * get_frame_time() may return other values to simulate different timing
 * effects, for instance to perform non-real-time animation.  See set_mode().
 *
 * In all modes, get_real_time() always returns the elapsed real time in
 * seconds since the ClockObject was constructed, or since it was last reset.
 *
 * You can create your own ClockObject whenever you want to have your own
 * local timer.  There is also a default, global ClockObject intended to
 * represent global time for the application; this is normally set up to tick
 * every frame so that its get_frame_time() will return the time for the
 * current frame.
 */

1881 4 Mode 0 794624 17 ClockObject::Mode 17 ClockObject::Mode 1880 0 0 0 0 0 0 0 0 0 8 8 M_normal 21 ClockObject::M_normal 0
0 15 M_non_real_time 28 ClockObject::M_non_real_time 0
1 8 M_forced 21 ClockObject::M_forced 0
2 9 M_degrade 22 ClockObject::M_degrade 0
3 7 M_slave 20 ClockObject::M_slave 0
4 9 M_limited 22 ClockObject::M_limited 0
5 9 M_integer 22 ClockObject::M_integer 0
6 17 M_integer_limited 30 ClockObject::M_integer_limited 0
7 0 0

1882 11 CollideMask 0 2105345 11 CollideMask 11 CollideMask 0 0 1859 0 0 0 0 0 0 0 0 0 0

1883 10 ColorSpace 0 532481 10 ColorSpace 10 ColorSpace 0 0 0 0 0 0 0 0 0 0 4 14 CS_unspecified 14 CS_unspecified 105
// This value is not a color space, but is used to indicate that a color
// space has not been specified.
0 9 CS_linear 9 CS_linear 389
// CS_linear is not a color space per se, but represents the working color
// space of graphics APIs, which is linearized.  Since the conversion from
// sRGB to linear is defined, one could posit that it has the ITU-R BT.709
// primaries, but this isn't meaningful as modern graphics APIs do not
// perform color management.  All colors in Panda3D are linear unless
// otherwise specified.
1 7 CS_sRGB 7 CS_sRGB 107
// This is the standard, gamma-2.2-corrected sRGB color space, as used by
// the majority of image formats.
2 8 CS_scRGB 8 CS_scRGB 110
// This is a 16-bit encoded linear color space capable of encoding color
// values in the -0.5...7.4999 range.
3 0 0

1884 17 CopyOnWriteObject 0 141313 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 1454 0 3 1451 1452 1453 0 0 1 0 1873 0 0 0 0 169
/**
 * This base class provides basic reference counting, but also can be used
 * with a CopyOnWritePointer to provide get_read_pointer() and
 * get_write_pointer().
 */

1885 17 DatagramInputFile 0 75777 17 DatagramInputFile 17 DatagramInputFile 0 0 0 1 1455 0 0 4 1456 1457 1458 1459 0 0 1 0 1848 0 0 0 0 130
/**
 * This class can be used to read a binary file that consists of an arbitrary
 * header followed by a number of datagrams.
 */

1886 18 DatagramOutputFile 0 75777 18 DatagramOutputFile 18 DatagramOutputFile 0 0 0 1 1460 0 1 2238 3 1461 1462 1463 0 0 1 0 1855 0 0 0 0 131
/**
 * This class can be used to write a binary file that consists of an arbitrary
 * header followed by a number of datagrams.
 */

1887 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1888 30 DoubleBitMask< BitMaskNative > 0 26625 30 DoubleBitMask< BitMaskNative > 30 DoubleBitMask< BitMaskNative > 0 0 0 1 1465 1472 0 52 1466 1467 1468 1469 1470 1471 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 0 0 0 0 0 0

1889 19 DoubleBitMaskNative 0 2105345 19 DoubleBitMaskNative 19 DoubleBitMaskNative 0 0 1888 0 0 0 0 0 0 0 0 0 0

1890 36 DoubleBitMask< DoubleBitMaskNative > 0 26625 36 DoubleBitMask< DoubleBitMaskNative > 36 DoubleBitMask< DoubleBitMaskNative > 0 0 0 1 1519 1526 0 52 1520 1521 1522 1523 1524 1525 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 0 0 0 0 0 0

1891 17 QuadBitMaskNative 0 2105345 17 QuadBitMaskNative 17 QuadBitMaskNative 0 0 1890 0 0 0 0 0 0 0 0 0 0

1892 8 DrawMask 0 2105345 8 DrawMask 8 DrawMask 0 0 1859 0 0 0 0 0 0 0 0 0 0

1893 14 KeyboardButton 0 141313 14 KeyboardButton 14 KeyboardButton 0 0 0 1 1625 1626 0 52 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 0 0 0 0 0 162
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to standard keyboard keys.
 */

1894 15 ModifierButtons 0 26625 15 ModifierButtons 15 ModifierButtons 0 0 0 1 1631 1632 1 2239 23 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1649 1650 1651 1652 1653 1654 1655 1656 1 2259 0 0 0 0 135
/**
 * This class monitors the state of a number of individual buttons and tracks
 * whether each button is known to be down or up.
 */

1895 11 MouseButton 0 141313 11 MouseButton 11 MouseButton 0 0 0 1 1668 1669 0 11 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 0 0 0 0 0 162
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to standard mouse buttons.
 */

1896 9 MouseData 0 141313 9 MouseData 9 MouseData 0 0 0 1 1670 1676 3 2240 2241 2242 5 1671 1672 1673 1674 1675 0 0 0 0 0 124
/**
 * Holds the data that might be generated by a 2-d pointer input device, such
 * as the mouse in the GraphicsWindow.
 */

1897 24 NodeCachedReferenceCount 0 43009 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 6 1677 1678 1679 1680 1681 1682 0 0 1 0 1873 0 0 0 1 1898 1495
/**
 * This class further specializes CachedTypedWritableReferenceCount to also
 * add a node_ref_count, for the purposes of counting the number of times the
 * object is referenced by a "node", presumably a PandaNode.
 *
 * This essentially combines the functionality of NodeReferenceCount and
 * CachedTypedWritableReferenceCount, so that a derivative of this object
 * actually has three counters: the standard reference count, the "cache"
 * reference count, and the "node" reference count.  Rather than multiply
 * inheriting from the two reference count classes, we inherit only from
 * CachedTypedWritableReferenceCount and simply duplicate the functionality of
 * NodeReferenceCount, to avoid all of the problems associated with multiple
 * inheritance.
 *
 * The intended design is to use this as a base class for RenderState and
 * TransformState, both of which are held by PandaNodes, and also have caches
 * which are independently maintained.  By keeping track of how many nodes
 * hold a pointer to a particular object, we can classify each object into
 * node-referenced, cache-referenced, or other, which is primarily useful for
 * PStats reporting.
 *
 * As with CachedTypedWritableReferenceCount's cache_ref() and cache_unref(),
 * the new methods node_ref() and node_unref() automatically increment and
 * decrement the primary reference count as well.  In this case, however,
 * there does exist a NodePointerTo<> class to maintain the node_ref counters
 * automatically.
 */

1898 10 Referenced 0 794624 36 NodeCachedReferenceCount::Referenced 36 NodeCachedReferenceCount::Referenced 1897 0 0 0 0 0 0 0 0 0 2 6 R_node 32 NodeCachedReferenceCount::R_node 0
1 7 R_cache 33 NodeCachedReferenceCount::R_cache 0
2 0 0

1899 11 SparseArray 0 141313 11 SparseArray 11 SparseArray 0 0 0 1 1683 1735 0 51 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 0 0 0 0 0 736
/**
 * This class records a set of integers, where each integer is either present
 * or not present in the set.
 *
 * It is similar in principle and in interface to a BitArray (which can be
 * thought of as a set of integers, one integer corresponding to each
 * different bit position), but the SparseArray is implemented as a list of
 * min/max subrange lists, rather than as a bitmask.
 *
 * This makes it particularly efficient for storing sets which consist of
 * large sections of consecutively included or consecutively excluded
 * elements, with arbitrarily large integers, but particularly inefficient for
 * doing boolean operations such as & or |.
 *
 * Also, unlike BitArray, the SparseArray can store negative integers.
 */

1900 14 ParamValueBase 0 75777 14 ParamValueBase 14 ParamValueBase 0 0 0 0 1001 0 3 1736 1737 1738 0 0 1 0 1830 0 0 0 0 141
/**
 * A non-template base class of ParamValue (below), which serves mainly to
 * define the placeholder for the virtual output function.
 */

1901 18 ParamTypedRefCount 0 75777 18 ParamTypedRefCount 18 ParamTypedRefCount 0 0 0 1 1739 1001 1 2243 2 1740 1741 0 0 1 0 1900 0 0 0 0 143
/**
 * A class object for storing specifically objects of type
 * TypedReferenceCount, which is different than TypedWritableReferenceCount.
 */

1902 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 1871 0 0 0 0 0 0 0 0 0 0

1903 20 ParamValue< string > 0 75777 25 ParamValue< std::string > 25 ParamValue< std::string > 0 0 0 1 1742 1001 1 2244 3 1743 1744 1745 0 0 1 0 1900 0 0 0 0 0

1904 10 Type const 0 8832 10 Type const 10 Type const 0 0 0 0 0 0 0 0 0 0 0 0 0

1905 11 ParamString 0 2105345 11 ParamString 11 ParamString 0 0 1903 0 0 0 0 0 0 0 0 0 0

1906 21 ParamValue< wstring > 0 75777 26 ParamValue< std::wstring > 26 ParamValue< std::wstring > 0 0 0 1 1746 1001 1 2245 3 1747 1748 1749 0 0 1 0 1900 0 0 0 0 0

1907 12 ParamWstring 0 2105345 12 ParamWstring 12 ParamWstring 0 0 1906 0 0 0 0 0 0 0 0 0 0

1908 24 ParamValue< LVecBase2d > 0 75777 24 ParamValue< LVecBase2d > 24 ParamValue< LVecBase2d > 0 0 0 1 1750 1001 1 2246 3 1751 1752 1753 0 0 1 0 1900 0 0 0 0 0

1909 14 ParamVecBase2d 0 2105345 14 ParamVecBase2d 14 ParamVecBase2d 0 0 1908 0 0 0 0 0 0 0 0 0 0

1910 24 ParamValue< LVecBase2f > 0 75777 24 ParamValue< LVecBase2f > 24 ParamValue< LVecBase2f > 0 0 0 1 1754 1001 1 2247 3 1755 1756 1757 0 0 1 0 1900 0 0 0 0 0

1911 14 ParamVecBase2f 0 2105345 14 ParamVecBase2f 14 ParamVecBase2f 0 0 1910 0 0 0 0 0 0 0 0 0 0

1912 24 ParamValue< LVecBase2i > 0 75777 24 ParamValue< LVecBase2i > 24 ParamValue< LVecBase2i > 0 0 0 1 1758 1001 1 2248 3 1759 1760 1761 0 0 1 0 1900 0 0 0 0 0

1913 14 ParamVecBase2i 0 2105345 14 ParamVecBase2i 14 ParamVecBase2i 0 0 1912 0 0 0 0 0 0 0 0 0 0

1914 24 ParamValue< LVecBase3d > 0 75777 24 ParamValue< LVecBase3d > 24 ParamValue< LVecBase3d > 0 0 0 1 1762 1001 1 2249 3 1763 1764 1765 0 0 1 0 1900 0 0 0 0 0

1915 14 ParamVecBase3d 0 2105345 14 ParamVecBase3d 14 ParamVecBase3d 0 0 1914 0 0 0 0 0 0 0 0 0 0

1916 24 ParamValue< LVecBase3f > 0 75777 24 ParamValue< LVecBase3f > 24 ParamValue< LVecBase3f > 0 0 0 1 1766 1001 1 2250 3 1767 1768 1769 0 0 1 0 1900 0 0 0 0 0

1917 14 ParamVecBase3f 0 2105345 14 ParamVecBase3f 14 ParamVecBase3f 0 0 1916 0 0 0 0 0 0 0 0 0 0

1918 24 ParamValue< LVecBase3i > 0 75777 24 ParamValue< LVecBase3i > 24 ParamValue< LVecBase3i > 0 0 0 1 1770 1001 1 2251 3 1771 1772 1773 0 0 1 0 1900 0 0 0 0 0

1919 14 ParamVecBase3i 0 2105345 14 ParamVecBase3i 14 ParamVecBase3i 0 0 1918 0 0 0 0 0 0 0 0 0 0

1920 24 ParamValue< LVecBase4d > 0 75777 24 ParamValue< LVecBase4d > 24 ParamValue< LVecBase4d > 0 0 0 1 1774 1001 1 2252 3 1775 1776 1777 0 0 1 0 1900 0 0 0 0 0

1921 14 ParamVecBase4d 0 2105345 14 ParamVecBase4d 14 ParamVecBase4d 0 0 1920 0 0 0 0 0 0 0 0 0 0

1922 24 ParamValue< LVecBase4f > 0 75777 24 ParamValue< LVecBase4f > 24 ParamValue< LVecBase4f > 0 0 0 1 1778 1001 1 2253 3 1779 1780 1781 0 0 1 0 1900 0 0 0 0 0

1923 14 ParamVecBase4f 0 2105345 14 ParamVecBase4f 14 ParamVecBase4f 0 0 1922 0 0 0 0 0 0 0 0 0 0

1924 24 ParamValue< LVecBase4i > 0 75777 24 ParamValue< LVecBase4i > 24 ParamValue< LVecBase4i > 0 0 0 1 1782 1001 1 2254 3 1783 1784 1785 0 0 1 0 1900 0 0 0 0 0

1925 14 ParamVecBase4i 0 2105345 14 ParamVecBase4i 14 ParamVecBase4i 0 0 1924 0 0 0 0 0 0 0 0 0 0

1926 23 ParamValue< LMatrix3d > 0 75777 23 ParamValue< LMatrix3d > 23 ParamValue< LMatrix3d > 0 0 0 1 1786 1001 1 2255 3 1787 1788 1789 0 0 1 0 1900 0 0 0 0 0

1927 13 ParamMatrix3d 0 2105345 13 ParamMatrix3d 13 ParamMatrix3d 0 0 1926 0 0 0 0 0 0 0 0 0 0

1928 23 ParamValue< LMatrix3f > 0 75777 23 ParamValue< LMatrix3f > 23 ParamValue< LMatrix3f > 0 0 0 1 1790 1001 1 2256 3 1791 1792 1793 0 0 1 0 1900 0 0 0 0 0

1929 13 ParamMatrix3f 0 2105345 13 ParamMatrix3f 13 ParamMatrix3f 0 0 1928 0 0 0 0 0 0 0 0 0 0

1930 23 ParamValue< LMatrix4d > 0 75777 23 ParamValue< LMatrix4d > 23 ParamValue< LMatrix4d > 0 0 0 1 1794 1001 1 2257 3 1795 1796 1797 0 0 1 0 1900 0 0 0 0 0

1931 13 ParamMatrix4d 0 2105345 13 ParamMatrix4d 13 ParamMatrix4d 0 0 1930 0 0 0 0 0 0 0 0 0 0

1932 23 ParamValue< LMatrix4f > 0 75777 23 ParamValue< LMatrix4f > 23 ParamValue< LMatrix4f > 0 0 0 1 1798 1001 1 2258 3 1799 1800 1801 0 0 1 0 1900 0 0 0 0 0

1933 13 ParamMatrix4f 0 2105345 13 ParamMatrix4f 13 ParamMatrix4f 0 0 1932 0 0 0 0 0 0 0 0 0 0

1934 13 ParamVecBase2 0 2105345 13 ParamVecBase2 13 ParamVecBase2 0 0 1911 0 0 0 0 0 0 0 0 0 0

1935 13 ParamVecBase3 0 2105345 13 ParamVecBase3 13 ParamVecBase3 0 0 1917 0 0 0 0 0 0 0 0 0 0

1936 13 ParamVecBase4 0 2105345 13 ParamVecBase4 13 ParamVecBase4 0 0 1923 0 0 0 0 0 0 0 0 0 0

1937 12 ParamMatrix3 0 2105345 12 ParamMatrix3 12 ParamMatrix3 0 0 1929 0 0 0 0 0 0 0 0 0 0

1938 12 ParamMatrix4 0 2105345 12 ParamMatrix4 12 ParamMatrix4 0 0 1933 0 0 0 0 0 0 0 0 0 0

1939 20 WritableConfigurable 0 141313 20 WritableConfigurable 20 WritableConfigurable 0 0 0 0 1803 0 1 1802 0 0 1 0 1828 0 0 0 0 379
/**
 * Defined as a fix to allow creating Configurable and Writable objects.
 * Otherwise the compiler gets confused since both TypedWritable and
 * Configurable inherit from TypedObject.
 *
 * An object that has data or parameters that are set less frequently (at
 * least occasionally) than every frame.  We can cache the configuration info
 * by by using the "dirty" flag.
 */

1940 17 UniqueIdAllocator 0 26625 17 UniqueIdAllocator 17 UniqueIdAllocator 0 0 0 1 1804 1805 0 6 1806 1807 1808 1809 1810 1811 0 0 0 0 0 812
/**
 * Manage a set of ID values from min to max inclusive.  The ID numbers that
 * are freed will be allocated (reused) in the same order.  I.e.  the oldest
 * ID numbers will be allocated.
 *
 * This implementation will use 4 bytes per id number, plus a few bytes of
 * management data.  e.g.  10,000 ID numbers will use 40KB.
 *
 * Also be advised that ID -1 and -2 are used internally by the allocator.  If
 * allocate returns IndexEnd (-1) then the allocator is out of free ID
 * numbers.
 *
 * There are other implementations that can better leverage runs of used or
 * unused IDs or use bit arrays for the IDs.  But, it takes extra work to
 * track the age of freed IDs, which is required for what we wanted.  If you
 * would like to kick around other implementation ideas, please contact
 * Schuyler.
 */

1941 10 PortalMask 0 2105345 10 PortalMask 10 PortalMask 0 0 1859 0 0 0 0 0 0 0 0 0 0

1942 37 ConstPointerToArray< ushort > const * 0 8576 37 ConstPointerToArray< ushort > const * 37 ConstPointerToArray< ushort > const * 0 0 1943 0 0 0 0 0 0 0 0 0 0

1943 35 ConstPointerToArray< ushort > const 0 8832 35 ConstPointerToArray< ushort > const 35 ConstPointerToArray< ushort > const 0 0 1814 0 0 0 0 0 0 0 0 0 0

1944 31 ConstPointerToArray< ushort > * 0 8576 31 ConstPointerToArray< ushort > * 31 ConstPointerToArray< ushort > * 0 0 1814 0 0 0 0 0 0 0 0 0 0

1945 32 PointerToArray< ushort > const * 0 8576 32 PointerToArray< ushort > const * 32 PointerToArray< ushort > const * 0 0 1946 0 0 0 0 0 0 0 0 0 0

1946 30 PointerToArray< ushort > const 0 8832 30 PointerToArray< ushort > const 30 PointerToArray< ushort > const 0 0 1818 0 0 0 0 0 0 0 0 0 0

1947 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1948 6 ushort 0 2105344 6 ushort 6 ushort 0 0 1949 0 0 0 0 0 0 0 0 0 0

1949 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1950 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1951 0 0 0 0 0 0 0 0 0 0

1951 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1952 0 0 0 0 0 0 0 0 0 0

1952 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1953 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1954 51 PointerToBase< ReferenceCountedVector< ushort > > * 0 8576 51 PointerToBase< ReferenceCountedVector< ushort > > * 51 PointerToBase< ReferenceCountedVector< ushort > > * 0 0 1816 0 0 0 0 0 0 0 0 0 0

1955 57 PointerToBase< ReferenceCountedVector< ushort > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< ushort > > const * 57 PointerToBase< ReferenceCountedVector< ushort > > const * 0 0 1956 0 0 0 0 0 0 0 0 0 0

1956 55 PointerToBase< ReferenceCountedVector< ushort > > const 0 8832 55 PointerToBase< ReferenceCountedVector< ushort > > const 55 PointerToBase< ReferenceCountedVector< ushort > > const 0 0 1816 0 0 0 0 0 0 0 0 0 0

1957 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1887 0 0 0 0 0 0 0 0 0 0

1958 26 PointerToArray< ushort > * 0 8576 26 PointerToArray< ushort > * 26 PointerToArray< ushort > * 0 0 1818 0 0 0 0 0 0 0 0 0 0

1959 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1960 0 0 0 0 0 0 0 0 0 0

1960 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1961 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1962 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 1819 0 0 0 0 0 0 0 0 0 0

1963 21 AnimInterface const * 0 8576 21 AnimInterface const * 21 AnimInterface const * 0 0 1964 0 0 0 0 0 0 0 0 0 0

1964 19 AnimInterface const 0 8832 19 AnimInterface const 19 AnimInterface const 0 0 1819 0 0 0 0 0 0 0 0 0 0

1965 11 UpdateSeq * 0 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 1824 0 0 0 0 0 0 0 0 0 0

1966 17 UpdateSeq const * 0 8576 17 UpdateSeq const * 17 UpdateSeq const * 0 0 1967 0 0 0 0 0 0 0 0 0 0

1967 15 UpdateSeq const 0 8832 15 UpdateSeq const 15 UpdateSeq const 0 0 1824 0 0 0 0 0 0 0 0 0 0

1968 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1969 0 0 0 0 0 0 0 0 0 0

1969 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 0

1970 11 BamReader * 0 8576 11 BamReader * 11 BamReader * 0 0 1846 0 0 0 0 0 0 0 0 0 0

1971 21 TypedWritable const * 0 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 1972 0 0 0 0 0 0 0 0 0 0

1972 19 TypedWritable const 0 8832 19 TypedWritable const 19 TypedWritable const 0 0 1828 0 0 0 0 0 0 0 0 0 0

1973 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 1830 0 0 0 0 0 0 0 0 0 0

1974 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1831 0 0 0 0 0 0 0 0 0 0

1975 22 BamCacheRecord const * 0 8576 22 BamCacheRecord const * 22 BamCacheRecord const * 0 0 1976 0 0 0 0 0 0 0 0 0 0

1976 20 BamCacheRecord const 0 8832 20 BamCacheRecord const 20 BamCacheRecord const 0 0 1832 0 0 0 0 0 0 0 0 0 0

1977 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 1832 0 0 0 0 0 0 0 0 0 0

1978 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1834 0 0 0 0 0 0 0 0 0 0

1979 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 1980 0 0 0 0 0 0 0 0 0 0

1980 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 1981 0 0 0 0 0 0 0 0 0 0

1981 11 VirtualFile 0 2048 11 VirtualFile 11 VirtualFile 0 0 0 0 0 0 0 0 0 0 0 0 91
/**
 * The abstract base class for a file or directory within the
 * VirtualFileSystem.
 */

1982 10 BamCache * 0 8576 10 BamCache * 10 BamCache * 0 0 1838 0 0 0 0 0 0 0 0 0 0

1983 16 BamCache const * 0 8576 16 BamCache const * 16 BamCache const * 0 0 1984 0 0 0 0 0 0 0 0 0 0

1984 14 BamCache const 0 8832 14 BamCache const 14 BamCache const 0 0 1838 0 0 0 0 0 0 0 0 0 0

1985 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1835 0 0 0 0 0 0 0 0 0 0

1986 10 BamEnums * 0 8576 10 BamEnums * 10 BamEnums * 0 0 1839 0 0 0 0 0 0 0 0 0 0

1987 16 BamEnums const * 0 8576 16 BamEnums const * 16 BamEnums const * 0 0 1988 0 0 0 0 0 0 0 0 0 0

1988 14 BamEnums const 0 8832 14 BamEnums const 14 BamEnums const 0 0 1839 0 0 0 0 0 0 0 0 0 0

1989 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 1849 0 0 0 0 0 0 0 0 0 0

1990 15 LoaderOptions * 0 8576 15 LoaderOptions * 15 LoaderOptions * 0 0 1843 0 0 0 0 0 0 0 0 0 0

1991 9 AuxData * 0 8576 20 BamReader::AuxData * 20 BamReader::AuxData * 0 0 1992 0 0 0 0 0 0 0 0 0 0

1992 7 AuxData 0 1312768 18 BamReader::AuxData 18 BamReader::AuxData 1846 0 0 0 0 0 0 0 0 0 0 0 187
// Inherit from this class to piggyback additional temporary data on the
// bamReader (via set_aux_data() and get_aux_data()) for any particular
// objects during the bam reading process.

1993 17 BamReader const * 0 8576 17 BamReader const * 17 BamReader const * 0 0 1994 0 0 0 0 0 0 0 0 0 0

1994 15 BamReader const 0 8832 15 BamReader const 15 BamReader const 0 0 1846 0 0 0 0 0 0 0 0 0 0

1995 17 BamWriter const * 0 8576 17 BamWriter const * 17 BamWriter const * 0 0 1996 0 0 0 0 0 0 0 0 0 0

1996 15 BamWriter const 0 8832 15 BamWriter const 15 BamWriter const 0 0 1853 0 0 0 0 0 0 0 0 0 0

1997 11 BamWriter * 0 8576 11 BamWriter * 11 BamWriter * 0 0 1853 0 0 0 0 0 0 0 0 0 0

1998 25 BitMask< uint16_t, 16 > * 0 8576 25 BitMask< uint16_t, 16 > * 25 BitMask< uint16_t, 16 > * 0 0 1856 0 0 0 0 0 0 0 0 0 0

1999 31 BitMask< uint16_t, 16 > const * 0 8576 31 BitMask< uint16_t, 16 > const * 31 BitMask< uint16_t, 16 > const * 0 0 2000 0 0 0 0 0 0 0 0 0 0

2000 29 BitMask< uint16_t, 16 > const 0 8832 29 BitMask< uint16_t, 16 > const 29 BitMask< uint16_t, 16 > const 0 0 1856 0 0 0 0 0 0 0 0 0 0

2001 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 1949 0 0 0 0 0 0 0 0 0 0

2002 25 BitMask< uint32_t, 32 > * 0 8576 25 BitMask< uint32_t, 32 > * 25 BitMask< uint32_t, 32 > * 0 0 1858 0 0 0 0 0 0 0 0 0 0

2003 31 BitMask< uint32_t, 32 > const * 0 8576 31 BitMask< uint32_t, 32 > const * 31 BitMask< uint32_t, 32 > const * 0 0 2004 0 0 0 0 0 0 0 0 0 0

2004 29 BitMask< uint32_t, 32 > const 0 8832 29 BitMask< uint32_t, 32 > const 29 BitMask< uint32_t, 32 > const 0 0 1858 0 0 0 0 0 0 0 0 0 0

2005 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 2006 0 0 0 0 0 0 0 0 0 0

2006 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2007 25 BitMask< uint64_t, 64 > * 0 8576 25 BitMask< uint64_t, 64 > * 25 BitMask< uint64_t, 64 > * 0 0 1860 0 0 0 0 0 0 0 0 0 0

2008 31 BitMask< uint64_t, 64 > const * 0 8576 31 BitMask< uint64_t, 64 > const * 31 BitMask< uint64_t, 64 > const * 0 0 2009 0 0 0 0 0 0 0 0 0 0

2009 29 BitMask< uint64_t, 64 > const 0 8832 29 BitMask< uint64_t, 64 > const 29 BitMask< uint64_t, 64 > const 0 0 1860 0 0 0 0 0 0 0 0 0 0

2010 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 1947 0 0 0 0 0 0 0 0 0 0

2011 10 BitArray * 0 8576 10 BitArray * 10 BitArray * 0 0 1863 0 0 0 0 0 0 0 0 0 0

2012 16 BitArray const * 0 8576 16 BitArray const * 16 BitArray const * 0 0 2013 0 0 0 0 0 0 0 0 0 0

2013 14 BitArray const 0 8832 14 BitArray const 14 BitArray const 0 0 1863 0 0 0 0 0 0 0 0 0 0

2014 8 WordType 0 2367488 18 BitArray::WordType 18 BitArray::WordType 1863 0 2010 0 0 0 0 0 0 0 0 0 0

2015 19 SparseArray const * 0 8576 19 SparseArray const * 19 SparseArray const * 0 0 2016 0 0 0 0 0 0 0 0 0 0

2016 17 SparseArray const 0 8832 17 SparseArray const 17 SparseArray const 0 0 1899 0 0 0 0 0 0 0 0 0 0

2017 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1947 0 0 0 0 0 0 0 0 0 0

2018 8 MaskType 0 2367488 18 BitArray::MaskType 18 BitArray::MaskType 1863 0 1862 0 0 0 0 0 0 0 0 0 0

2019 10 MaskType * 0 8576 20 BitArray::MaskType * 20 BitArray::MaskType * 0 0 2018 0 0 0 0 0 0 0 0 0 0

2020 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1865 0 0 0 0 0 0 0 0 0 0

2021 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 2022 0 0 0 0 0 0 0 0 0 0

2022 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 1865 0 0 0 0 0 0 0 0 0 0

2023 22 ButtonRegistry const * 0 8576 22 ButtonRegistry const * 22 ButtonRegistry const * 0 0 2024 0 0 0 0 0 0 0 0 0 0

2024 20 ButtonRegistry const 0 8832 20 ButtonRegistry const 20 ButtonRegistry const 0 0 1869 0 0 0 0 0 0 0 0 0 0

2025 16 ButtonRegistry * 0 8576 16 ButtonRegistry * 16 ButtonRegistry * 0 0 1869 0 0 0 0 0 0 0 0 0 0

2026 11 ButtonMap * 0 8576 11 ButtonMap * 11 ButtonMap * 0 0 1870 0 0 0 0 0 0 0 0 0 0

2027 17 ButtonMap const * 0 8576 17 ButtonMap const * 17 ButtonMap const * 0 0 2028 0 0 0 0 0 0 0 0 0 0

2028 15 ButtonMap const 0 8832 15 ButtonMap const 15 ButtonMap const 0 0 1870 0 0 0 0 0 0 0 0 0 0

2029 22 CallbackObject const * 0 8576 22 CallbackObject const * 22 CallbackObject const * 0 0 2030 0 0 0 0 0 0 0 0 0 0

2030 20 CallbackObject const 0 8832 20 CallbackObject const 20 CallbackObject const 0 0 1872 0 0 0 0 0 0 0 0 0 0

2031 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1872 0 0 0 0 0 0 0 0 0 0

2032 41 CachedTypedWritableReferenceCount const * 0 8576 41 CachedTypedWritableReferenceCount const * 41 CachedTypedWritableReferenceCount const * 0 0 2033 0 0 0 0 0 0 0 0 0 0

2033 39 CachedTypedWritableReferenceCount const 0 8832 39 CachedTypedWritableReferenceCount const 39 CachedTypedWritableReferenceCount const 0 0 1873 0 0 0 0 0 0 0 0 0 0

2034 20 CallbackData const * 0 8576 20 CallbackData const * 20 CallbackData const * 0 0 2035 0 0 0 0 0 0 0 0 0 0

2035 18 CallbackData const 0 8832 18 CallbackData const 18 CallbackData const 0 0 1874 0 0 0 0 0 0 0 0 0 0

2036 14 CallbackData * 0 8576 14 CallbackData * 14 CallbackData * 0 0 1874 0 0 0 0 0 0 0 0 0 0

2037 22 PythonCallbackObject * 0 8576 22 PythonCallbackObject * 22 PythonCallbackObject * 0 0 1875 0 0 0 0 0 0 0 0 0 0

2038 28 PythonCallbackObject const * 0 8576 28 PythonCallbackObject const * 28 PythonCallbackObject const * 0 0 2039 0 0 0 0 0 0 0 0 0 0

2039 26 PythonCallbackObject const 0 8832 26 PythonCallbackObject const 26 PythonCallbackObject const 0 0 1875 0 0 0 0 0 0 0 0 0 0

2040 9 TimeVal * 0 8576 9 TimeVal * 9 TimeVal * 0 0 1876 0 0 0 0 0 0 0 0 0 0

2041 15 TimeVal const * 0 8576 15 TimeVal const * 15 TimeVal const * 0 0 2042 0 0 0 0 0 0 0 0 0 0

2042 13 TimeVal const 0 8832 13 TimeVal const 13 TimeVal const 0 0 1876 0 0 0 0 0 0 0 0 0 0

2043 13 ClockObject * 0 8576 13 ClockObject * 13 ClockObject * 0 0 1880 0 0 0 0 0 0 0 0 0 0

2044 19 ClockObject const * 0 8576 19 ClockObject const * 19 ClockObject const * 0 0 2045 0 0 0 0 0 0 0 0 0 0

2045 17 ClockObject const 0 8832 17 ClockObject const 17 ClockObject const 0 0 1880 0 0 0 0 0 0 0 0 0 0

2046 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 2047 0 0 0 0 0 0 0 0 0 0

2047 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 396
/**
 * A thread; that is, a lightweight process.  This is an abstract base class;
 * to use it, you must subclass from it and redefine thread_main().
 *
 * The thread itself will keep a reference count on the Thread object while it
 * is running; when the thread returns from its root function, the Thread
 * object will automatically be destructed if no other pointers are
 * referencing it.
 */

2048 25 CopyOnWriteObject const * 0 8576 25 CopyOnWriteObject const * 25 CopyOnWriteObject const * 0 0 2049 0 0 0 0 0 0 0 0 0 0

2049 23 CopyOnWriteObject const 0 8832 23 CopyOnWriteObject const 23 CopyOnWriteObject const 0 0 1884 0 0 0 0 0 0 0 0 0 0

2050 19 DatagramInputFile * 0 8576 19 DatagramInputFile * 19 DatagramInputFile * 0 0 1885 0 0 0 0 0 0 0 0 0 0

2051 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 2052 0 0 0 0 0 0 0 0 0 0

2052 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 2053 0 0 0 0 0 0 0 0 0 0

2053 13 FileReference 0 2048 13 FileReference 13 FileReference 0 0 0 0 0 0 0 0 0 0 0 0 149
/**
 * Keeps a reference-counted pointer to a file on disk.  As long as the
 * FileReference is held, someone presumably has a use for this file.
 */

2054 9 istream * 0 8576 9 istream * 9 istream * 0 0 2055 0 0 0 0 0 0 0 0 0 0

2055 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

2056 20 DatagramOutputFile * 0 8576 20 DatagramOutputFile * 20 DatagramOutputFile * 0 0 1886 0 0 0 0 0 0 0 0 0 0

2057 32 DoubleBitMask< BitMaskNative > * 0 8576 32 DoubleBitMask< BitMaskNative > * 32 DoubleBitMask< BitMaskNative > * 0 0 1888 0 0 0 0 0 0 0 0 0 0

2058 38 DoubleBitMask< BitMaskNative > const * 0 8576 38 DoubleBitMask< BitMaskNative > const * 38 DoubleBitMask< BitMaskNative > const * 0 0 2059 0 0 0 0 0 0 0 0 0 0

2059 36 DoubleBitMask< BitMaskNative > const 0 8832 36 DoubleBitMask< BitMaskNative > const 36 DoubleBitMask< BitMaskNative > const 0 0 1888 0 0 0 0 0 0 0 0 0 0

2060 38 DoubleBitMask< DoubleBitMaskNative > * 0 8576 38 DoubleBitMask< DoubleBitMaskNative > * 38 DoubleBitMask< DoubleBitMaskNative > * 0 0 1890 0 0 0 0 0 0 0 0 0 0

2061 44 DoubleBitMask< DoubleBitMaskNative > const * 0 8576 44 DoubleBitMask< DoubleBitMaskNative > const * 44 DoubleBitMask< DoubleBitMaskNative > const * 0 0 2062 0 0 0 0 0 0 0 0 0 0

2062 42 DoubleBitMask< DoubleBitMaskNative > const 0 8832 42 DoubleBitMask< DoubleBitMaskNative > const 42 DoubleBitMask< DoubleBitMaskNative > const 0 0 1890 0 0 0 0 0 0 0 0 0 0

2063 16 KeyboardButton * 0 8576 16 KeyboardButton * 16 KeyboardButton * 0 0 1893 0 0 0 0 0 0 0 0 0 0

2064 22 KeyboardButton const * 0 8576 22 KeyboardButton const * 22 KeyboardButton const * 0 0 2065 0 0 0 0 0 0 0 0 0 0

2065 20 KeyboardButton const 0 8832 20 KeyboardButton const 20 KeyboardButton const 0 0 1893 0 0 0 0 0 0 0 0 0 0

2066 17 ModifierButtons * 0 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 1894 0 0 0 0 0 0 0 0 0 0

2067 23 ModifierButtons const * 0 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 2068 0 0 0 0 0 0 0 0 0 0

2068 21 ModifierButtons const 0 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 1894 0 0 0 0 0 0 0 0 0 0

2069 13 MouseButton * 0 8576 13 MouseButton * 13 MouseButton * 0 0 1895 0 0 0 0 0 0 0 0 0 0

2070 19 MouseButton const * 0 8576 19 MouseButton const * 19 MouseButton const * 0 0 2071 0 0 0 0 0 0 0 0 0 0

2071 17 MouseButton const 0 8832 17 MouseButton const 17 MouseButton const 0 0 1895 0 0 0 0 0 0 0 0 0 0

2072 11 MouseData * 0 8576 11 MouseData * 11 MouseData * 0 0 1896 0 0 0 0 0 0 0 0 0 0

2073 17 MouseData const * 0 8576 17 MouseData const * 17 MouseData const * 0 0 2074 0 0 0 0 0 0 0 0 0 0

2074 15 MouseData const 0 8832 15 MouseData const 15 MouseData const 0 0 1896 0 0 0 0 0 0 0 0 0 0

2075 32 NodeCachedReferenceCount const * 0 8576 32 NodeCachedReferenceCount const * 32 NodeCachedReferenceCount const * 0 0 2076 0 0 0 0 0 0 0 0 0 0

2076 30 NodeCachedReferenceCount const 0 8832 30 NodeCachedReferenceCount const 30 NodeCachedReferenceCount const 0 0 1897 0 0 0 0 0 0 0 0 0 0

2077 13 SparseArray * 0 8576 13 SparseArray * 13 SparseArray * 0 0 1899 0 0 0 0 0 0 0 0 0 0

2078 22 ParamValueBase const * 0 8576 22 ParamValueBase const * 22 ParamValueBase const * 0 0 2079 0 0 0 0 0 0 0 0 0 0

2079 20 ParamValueBase const 0 8832 20 ParamValueBase const 20 ParamValueBase const 0 0 1900 0 0 0 0 0 0 0 0 0 0

2080 27 TypedReferenceCount const * 0 8576 27 TypedReferenceCount const * 27 TypedReferenceCount const * 0 0 2081 0 0 0 0 0 0 0 0 0 0

2081 25 TypedReferenceCount const 0 8832 25 TypedReferenceCount const 25 TypedReferenceCount const 0 0 1871 0 0 0 0 0 0 0 0 0 0

2082 20 ParamTypedRefCount * 0 8576 20 ParamTypedRefCount * 20 ParamTypedRefCount * 0 0 1901 0 0 0 0 0 0 0 0 0 0

2083 26 ParamTypedRefCount const * 0 8576 26 ParamTypedRefCount const * 26 ParamTypedRefCount const * 0 0 2084 0 0 0 0 0 0 0 0 0 0

2084 24 ParamTypedRefCount const 0 8832 24 ParamTypedRefCount const 24 ParamTypedRefCount const 0 0 1901 0 0 0 0 0 0 0 0 0 0

2085 22 ParamValue< string > * 0 8576 27 ParamValue< std::string > * 27 ParamValue< std::string > * 0 0 1903 0 0 0 0 0 0 0 0 0 0

2086 28 ParamValue< string > const * 0 8576 33 ParamValue< std::string > const * 33 ParamValue< std::string > const * 0 0 2087 0 0 0 0 0 0 0 0 0 0

2087 26 ParamValue< string > const 0 8832 31 ParamValue< std::string > const 31 ParamValue< std::string > const 0 0 1903 0 0 0 0 0 0 0 0 0 0

2088 23 ParamValue< wstring > * 0 8576 28 ParamValue< std::wstring > * 28 ParamValue< std::wstring > * 0 0 1906 0 0 0 0 0 0 0 0 0 0

2089 29 ParamValue< wstring > const * 0 8576 34 ParamValue< std::wstring > const * 34 ParamValue< std::wstring > const * 0 0 2090 0 0 0 0 0 0 0 0 0 0

2090 27 ParamValue< wstring > const 0 8832 32 ParamValue< std::wstring > const 32 ParamValue< std::wstring > const 0 0 1906 0 0 0 0 0 0 0 0 0 0

2091 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2092 0 0 0 0 0 0 0 0 0 0

2092 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2093 0 0 0 0 0 0 0 0 0 0

2093 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2094 26 ParamValue< LVecBase2d > * 0 8576 26 ParamValue< LVecBase2d > * 26 ParamValue< LVecBase2d > * 0 0 1908 0 0 0 0 0 0 0 0 0 0

2095 32 ParamValue< LVecBase2d > const * 0 8576 32 ParamValue< LVecBase2d > const * 32 ParamValue< LVecBase2d > const * 0 0 2096 0 0 0 0 0 0 0 0 0 0

2096 30 ParamValue< LVecBase2d > const 0 8832 30 ParamValue< LVecBase2d > const 30 ParamValue< LVecBase2d > const 0 0 1908 0 0 0 0 0 0 0 0 0 0

2097 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 2098 0 0 0 0 0 0 0 0 0 0

2098 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 2099 0 0 0 0 0 0 0 0 0 0

2099 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2100 26 ParamValue< LVecBase2f > * 0 8576 26 ParamValue< LVecBase2f > * 26 ParamValue< LVecBase2f > * 0 0 1910 0 0 0 0 0 0 0 0 0 0

2101 32 ParamValue< LVecBase2f > const * 0 8576 32 ParamValue< LVecBase2f > const * 32 ParamValue< LVecBase2f > const * 0 0 2102 0 0 0 0 0 0 0 0 0 0

2102 30 ParamValue< LVecBase2f > const 0 8832 30 ParamValue< LVecBase2f > const 30 ParamValue< LVecBase2f > const 0 0 1910 0 0 0 0 0 0 0 0 0 0

2103 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 2104 0 0 0 0 0 0 0 0 0 0

2104 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 2105 0 0 0 0 0 0 0 0 0 0

2105 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2106 26 ParamValue< LVecBase2i > * 0 8576 26 ParamValue< LVecBase2i > * 26 ParamValue< LVecBase2i > * 0 0 1912 0 0 0 0 0 0 0 0 0 0

2107 32 ParamValue< LVecBase2i > const * 0 8576 32 ParamValue< LVecBase2i > const * 32 ParamValue< LVecBase2i > const * 0 0 2108 0 0 0 0 0 0 0 0 0 0

2108 30 ParamValue< LVecBase2i > const 0 8832 30 ParamValue< LVecBase2i > const 30 ParamValue< LVecBase2i > const 0 0 1912 0 0 0 0 0 0 0 0 0 0

2109 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2110 0 0 0 0 0 0 0 0 0 0

2110 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2111 0 0 0 0 0 0 0 0 0 0

2111 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2112 26 ParamValue< LVecBase3d > * 0 8576 26 ParamValue< LVecBase3d > * 26 ParamValue< LVecBase3d > * 0 0 1914 0 0 0 0 0 0 0 0 0 0

2113 32 ParamValue< LVecBase3d > const * 0 8576 32 ParamValue< LVecBase3d > const * 32 ParamValue< LVecBase3d > const * 0 0 2114 0 0 0 0 0 0 0 0 0 0

2114 30 ParamValue< LVecBase3d > const 0 8832 30 ParamValue< LVecBase3d > const 30 ParamValue< LVecBase3d > const 0 0 1914 0 0 0 0 0 0 0 0 0 0

2115 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 2116 0 0 0 0 0 0 0 0 0 0

2116 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 2117 0 0 0 0 0 0 0 0 0 0

2117 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2118 26 ParamValue< LVecBase3f > * 0 8576 26 ParamValue< LVecBase3f > * 26 ParamValue< LVecBase3f > * 0 0 1916 0 0 0 0 0 0 0 0 0 0

2119 32 ParamValue< LVecBase3f > const * 0 8576 32 ParamValue< LVecBase3f > const * 32 ParamValue< LVecBase3f > const * 0 0 2120 0 0 0 0 0 0 0 0 0 0

2120 30 ParamValue< LVecBase3f > const 0 8832 30 ParamValue< LVecBase3f > const 30 ParamValue< LVecBase3f > const 0 0 1916 0 0 0 0 0 0 0 0 0 0

2121 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 2122 0 0 0 0 0 0 0 0 0 0

2122 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 2123 0 0 0 0 0 0 0 0 0 0

2123 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2124 26 ParamValue< LVecBase3i > * 0 8576 26 ParamValue< LVecBase3i > * 26 ParamValue< LVecBase3i > * 0 0 1918 0 0 0 0 0 0 0 0 0 0

2125 32 ParamValue< LVecBase3i > const * 0 8576 32 ParamValue< LVecBase3i > const * 32 ParamValue< LVecBase3i > const * 0 0 2126 0 0 0 0 0 0 0 0 0 0

2126 30 ParamValue< LVecBase3i > const 0 8832 30 ParamValue< LVecBase3i > const 30 ParamValue< LVecBase3i > const 0 0 1918 0 0 0 0 0 0 0 0 0 0

2127 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2128 0 0 0 0 0 0 0 0 0 0

2128 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2129 0 0 0 0 0 0 0 0 0 0

2129 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2130 26 ParamValue< LVecBase4d > * 0 8576 26 ParamValue< LVecBase4d > * 26 ParamValue< LVecBase4d > * 0 0 1920 0 0 0 0 0 0 0 0 0 0

2131 32 ParamValue< LVecBase4d > const * 0 8576 32 ParamValue< LVecBase4d > const * 32 ParamValue< LVecBase4d > const * 0 0 2132 0 0 0 0 0 0 0 0 0 0

2132 30 ParamValue< LVecBase4d > const 0 8832 30 ParamValue< LVecBase4d > const 30 ParamValue< LVecBase4d > const 0 0 1920 0 0 0 0 0 0 0 0 0 0

2133 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2134 0 0 0 0 0 0 0 0 0 0

2134 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2135 0 0 0 0 0 0 0 0 0 0

2135 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2136 26 ParamValue< LVecBase4f > * 0 8576 26 ParamValue< LVecBase4f > * 26 ParamValue< LVecBase4f > * 0 0 1922 0 0 0 0 0 0 0 0 0 0

2137 32 ParamValue< LVecBase4f > const * 0 8576 32 ParamValue< LVecBase4f > const * 32 ParamValue< LVecBase4f > const * 0 0 2138 0 0 0 0 0 0 0 0 0 0

2138 30 ParamValue< LVecBase4f > const 0 8832 30 ParamValue< LVecBase4f > const 30 ParamValue< LVecBase4f > const 0 0 1922 0 0 0 0 0 0 0 0 0 0

2139 18 LVecBase4i const * 0 8576 18 LVecBase4i const * 18 LVecBase4i const * 0 0 2140 0 0 0 0 0 0 0 0 0 0

2140 16 LVecBase4i const 0 8832 16 LVecBase4i const 16 LVecBase4i const 0 0 2141 0 0 0 0 0 0 0 0 0 0

2141 10 LVecBase4i 0 2048 10 LVecBase4i 10 LVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2142 26 ParamValue< LVecBase4i > * 0 8576 26 ParamValue< LVecBase4i > * 26 ParamValue< LVecBase4i > * 0 0 1924 0 0 0 0 0 0 0 0 0 0

2143 32 ParamValue< LVecBase4i > const * 0 8576 32 ParamValue< LVecBase4i > const * 32 ParamValue< LVecBase4i > const * 0 0 2144 0 0 0 0 0 0 0 0 0 0

2144 30 ParamValue< LVecBase4i > const 0 8832 30 ParamValue< LVecBase4i > const 30 ParamValue< LVecBase4i > const 0 0 1924 0 0 0 0 0 0 0 0 0 0

2145 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2146 0 0 0 0 0 0 0 0 0 0

2146 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2147 0 0 0 0 0 0 0 0 0 0

2147 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

2148 25 ParamValue< LMatrix3d > * 0 8576 25 ParamValue< LMatrix3d > * 25 ParamValue< LMatrix3d > * 0 0 1926 0 0 0 0 0 0 0 0 0 0

2149 31 ParamValue< LMatrix3d > const * 0 8576 31 ParamValue< LMatrix3d > const * 31 ParamValue< LMatrix3d > const * 0 0 2150 0 0 0 0 0 0 0 0 0 0

2150 29 ParamValue< LMatrix3d > const 0 8832 29 ParamValue< LMatrix3d > const 29 ParamValue< LMatrix3d > const 0 0 1926 0 0 0 0 0 0 0 0 0 0

2151 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 2152 0 0 0 0 0 0 0 0 0 0

2152 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 2153 0 0 0 0 0 0 0 0 0 0

2153 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

2154 25 ParamValue< LMatrix3f > * 0 8576 25 ParamValue< LMatrix3f > * 25 ParamValue< LMatrix3f > * 0 0 1928 0 0 0 0 0 0 0 0 0 0

2155 31 ParamValue< LMatrix3f > const * 0 8576 31 ParamValue< LMatrix3f > const * 31 ParamValue< LMatrix3f > const * 0 0 2156 0 0 0 0 0 0 0 0 0 0

2156 29 ParamValue< LMatrix3f > const 0 8832 29 ParamValue< LMatrix3f > const 29 ParamValue< LMatrix3f > const 0 0 1928 0 0 0 0 0 0 0 0 0 0

2157 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2158 0 0 0 0 0 0 0 0 0 0

2158 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2159 0 0 0 0 0 0 0 0 0 0

2159 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

2160 25 ParamValue< LMatrix4d > * 0 8576 25 ParamValue< LMatrix4d > * 25 ParamValue< LMatrix4d > * 0 0 1930 0 0 0 0 0 0 0 0 0 0

2161 31 ParamValue< LMatrix4d > const * 0 8576 31 ParamValue< LMatrix4d > const * 31 ParamValue< LMatrix4d > const * 0 0 2162 0 0 0 0 0 0 0 0 0 0

2162 29 ParamValue< LMatrix4d > const 0 8832 29 ParamValue< LMatrix4d > const 29 ParamValue< LMatrix4d > const 0 0 1930 0 0 0 0 0 0 0 0 0 0

2163 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 2164 0 0 0 0 0 0 0 0 0 0

2164 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 2165 0 0 0 0 0 0 0 0 0 0

2165 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

2166 25 ParamValue< LMatrix4f > * 0 8576 25 ParamValue< LMatrix4f > * 25 ParamValue< LMatrix4f > * 0 0 1932 0 0 0 0 0 0 0 0 0 0

2167 31 ParamValue< LMatrix4f > const * 0 8576 31 ParamValue< LMatrix4f > const * 31 ParamValue< LMatrix4f > const * 0 0 2168 0 0 0 0 0 0 0 0 0 0

2168 29 ParamValue< LMatrix4f > const 0 8832 29 ParamValue< LMatrix4f > const 29 ParamValue< LMatrix4f > const 0 0 1932 0 0 0 0 0 0 0 0 0 0

2169 25 UniqueIdAllocator const * 0 8576 25 UniqueIdAllocator const * 25 UniqueIdAllocator const * 0 0 2170 0 0 0 0 0 0 0 0 0 0

2170 23 UniqueIdAllocator const 0 8832 23 UniqueIdAllocator const 23 UniqueIdAllocator const 0 0 1940 0 0 0 0 0 0 0 0 0 0

2171 19 UniqueIdAllocator * 0 8576 19 UniqueIdAllocator * 19 UniqueIdAllocator * 0 0 1940 0 0 0 0 0 0 0 0 0 0

2172 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 2173 0 0 0 0 0 0 0 0 0 0

2173 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2174 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 2175 0 0 0 0 0 0 0 0 0 0

2175 24 ConfigVariableSearchPath 0 2048 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 731
/**
 * This is similar to a ConfigVariableList, but it returns its list as a
 * DSearchPath, as a list of directories.
 *
 * You may locally append directories to the end of the search path with the
 * methods here, or prepend them to the beginning.  Use these methods to make
 * adjustments to the path; do not attempt to directly modify the const
 * DSearchPath object returned by get_value().
 *
 * Unlike other ConfigVariable types, local changes (made by calling
 * append_directory() and prepend_directory()) are specific to this particular
 * instance of the ConfigVariableSearchPath.  A separate instance of the same
 * variable, created by using the same name to the constructor, will not
 * reflect the local changes.
 */

2176 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 2177 0 0 0 0 0 0 0 0 0 0

2177 10 ConfigPage 0 2048 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 0 0 0 0 0 0 262
/**
 * A page of ConfigDeclarations that may be loaded or unloaded.  Typically
 * this represents a single .prc file that is read from disk at runtime, but
 * it may also represent a list of declarations built up by application code
 * and explicitly loaded.
 */

2178 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 2179 0 0 0 0 0 0 0 0 0 0

2179 7 HashVal 0 2048 7 HashVal 7 HashVal 0 0 0 0 0 0 0 0 0 0 0 0 0

0
79
2180 9 play_rate 0 6 0 955 954 0 0 0 0 24 AnimInterface::play_rate 0

2181 10 frame_rate 0 2 0 956 0 0 0 0 0 25 AnimInterface::frame_rate 0

2182 10 num_frames 0 2 0 957 0 0 0 0 0 25 AnimInterface::num_frames 0

2183 5 frame 0 2 0 958 0 0 0 0 0 20 AnimInterface::frame 0

2184 10 next_frame 0 2 0 959 0 0 0 0 0 25 AnimInterface::next_frame 0

2185 4 frac 0 2 0 960 0 0 0 0 0 19 AnimInterface::frac 0

2186 10 full_frame 0 2 0 961 0 0 0 0 0 25 AnimInterface::full_frame 0

2187 11 full_fframe 0 2 0 962 0 0 0 0 0 26 AnimInterface::full_fframe 0

2188 7 playing 0 2 0 963 0 0 0 0 0 22 AnimInterface::playing 0

2189 3 seq 0 2 0 984 0 0 0 0 0 14 UpdateSeq::seq 0

2190 15 source_pathname 0 2 0 1009 0 0 0 0 0 31 BamCacheRecord::source_pathname 0

2191 14 cache_filename 0 2 0 1010 0 0 0 0 0 30 BamCacheRecord::cache_filename 0

2192 16 source_timestamp 0 2 0 1011 0 0 0 0 0 32 BamCacheRecord::source_timestamp 0

2193 13 recorded_time 0 2 0 1012 0 0 0 0 0 29 BamCacheRecord::recorded_time 0

2194 4 data 0 30 0 1020 1022 1018 1019 0 0 20 BamCacheRecord::data 0

2195 6 active 0 6 0 1029 1028 0 0 0 0 16 BamCache::active 0

2196 12 cache_models 0 6 0 1031 1030 0 0 0 0 22 BamCache::cache_models 0

2197 14 cache_textures 0 6 0 1033 1032 0 0 0 0 24 BamCache::cache_textures 0

2198 25 cache_compressed_textures 0 6 0 1035 1034 0 0 0 0 35 BamCache::cache_compressed_textures 0

2199 22 cache_compiled_shaders 0 6 0 1037 1036 0 0 0 0 32 BamCache::cache_compiled_shaders 0

2200 4 root 0 6 0 1039 1038 0 0 0 0 14 BamCache::root 0

2201 10 flush_time 0 6 0 1041 1040 0 0 0 0 20 BamCache::flush_time 0

2202 16 cache_max_kbytes 0 6 0 1043 1042 0 0 0 0 26 BamCache::cache_max_kbytes 0

2203 9 read_only 0 6 0 1045 1044 0 0 0 0 19 BamCache::read_only 0

2204 5 flags 0 6 0 1059 1058 0 0 0 0 20 LoaderOptions::flags 0

2205 13 texture_flags 0 6 0 1061 1060 0 0 0 0 28 LoaderOptions::texture_flags 0

2206 17 texture_num_views 0 6 0 1063 1062 0 0 0 0 32 LoaderOptions::texture_num_views 0

2207 18 auto_texture_scale 0 6 0 1065 1064 0 0 0 0 33 LoaderOptions::auto_texture_scale 0

2208 6 source 0 6 0 1071 1070 0 0 0 0 17 BamReader::source 0

2209 8 filename 0 2 0 1075 0 0 0 0 0 19 BamReader::filename 0

2210 14 loader_options 0 6 0 1076 1077 0 0 0 0 25 BamReader::loader_options 0

2211 12 file_version 0 2 0 1088 0 0 0 0 0 23 BamReader::file_version 0

2212 11 file_endian 0 2 0 1084 0 0 0 0 0 22 BamReader::file_endian 0

2213 20 file_stdfloat_double 0 2 0 1085 0 0 0 0 0 31 BamReader::file_stdfloat_double 0

2214 6 target 0 6 0 1093 1092 0 0 0 0 17 BamWriter::target 0

2215 8 filename 0 2 0 1095 0 0 0 0 0 19 BamWriter::filename 0

2216 11 file_endian 0 2 0 1102 0 0 0 0 0 22 BamWriter::file_endian 0

2217 20 file_stdfloat_double 0 2 0 1103 0 0 0 0 0 31 BamWriter::file_stdfloat_double 0

2218 17 file_texture_mode 0 2 0 1104 0 0 0 0 0 28 BamWriter::file_texture_mode 0

2219 9 root_node 0 6 0 1106 1107 0 0 0 0 20 BamWriter::root_node 0

2220 5 index 0 2 0 1369 0 0 0 0 0 19 ButtonHandle::index 0

2221 4 name 0 2 0 1364 0 0 0 0 0 18 ButtonHandle::name 0

2222 16 ascii_equivalent 0 10 0 1366 0 1365 0 0 0 30 ButtonHandle::ascii_equivalent 0

2223 5 alias 0 2 0 1367 0 0 0 0 0 19 ButtonHandle::alias 0

2224 15 cache_ref_count 0 2 0 1396 0 0 0 0 0 50 CachedTypedWritableReferenceCount::cache_ref_count 0

2225 8 function 0 6 0 1410 1409 0 0 0 0 30 PythonCallbackObject::function 0

2226 2 tv 0 6 1877 1415 1416 0 0 0 0 11 TimeVal::tv 0

2227 4 mode 0 6 0 1420 1419 0 0 0 0 17 ClockObject::mode 0

2228 10 frame_time 0 6 0 1421 1426 0 0 0 0 23 ClockObject::frame_time 0

2229 9 real_time 0 6 0 1422 1425 0 0 0 0 22 ClockObject::real_time 0

2230 9 long_time 0 2 0 1423 0 0 0 0 0 22 ClockObject::long_time 0

2231 11 frame_count 0 6 0 1428 1427 0 0 0 0 24 ClockObject::frame_count 0

2232 2 dt 0 6 0 1430 1431 0 0 0 0 15 ClockObject::dt 0

2233 6 max_dt 0 6 0 1433 1434 0 0 0 0 19 ClockObject::max_dt 0

2234 14 degrade_factor 0 6 0 1435 1436 0 0 0 0 27 ClockObject::degrade_factor 0

2235 27 average_frame_rate_interval 0 6 0 1438 1437 0 0 0 0 40 ClockObject::average_frame_rate_interval 0

2236 18 average_frame_rate 0 2 0 1439 0 0 0 0 0 31 ClockObject::average_frame_rate 0

2237 18 max_frame_duration 0 2 0 1440 0 0 0 0 0 31 ClockObject::max_frame_duration 0

2238 6 stream 0 2 0 1464 0 0 0 0 0 26 DatagramOutputFile::stream 0

2239 7 buttons 0 66 0 1648 0 0 0 0 1646 24 ModifierButtons::buttons 0

2240 1 x 0 2 0 1672 0 0 0 0 0 12 MouseData::x 0

2241 1 y 0 2 0 1673 0 0 0 0 0 12 MouseData::y 0

2242 9 in_window 0 2 0 1674 0 0 0 0 0 20 MouseData::in_window 0

2243 5 value 0 2 0 1740 0 0 0 0 0 25 ParamTypedRefCount::value 0

2244 5 value 0 6 0 1744 1743 0 0 0 0 27 ParamValue< string >::value 0

2245 5 value 0 6 0 1748 1747 0 0 0 0 28 ParamValue< wstring >::value 0

2246 5 value 0 6 0 1752 1751 0 0 0 0 31 ParamValue< LVecBase2d >::value 0

2247 5 value 0 6 0 1756 1755 0 0 0 0 31 ParamValue< LVecBase2f >::value 0

2248 5 value 0 6 0 1760 1759 0 0 0 0 31 ParamValue< LVecBase2i >::value 0

2249 5 value 0 6 0 1764 1763 0 0 0 0 31 ParamValue< LVecBase3d >::value 0

2250 5 value 0 6 0 1768 1767 0 0 0 0 31 ParamValue< LVecBase3f >::value 0

2251 5 value 0 6 0 1772 1771 0 0 0 0 31 ParamValue< LVecBase3i >::value 0

2252 5 value 0 6 0 1776 1775 0 0 0 0 31 ParamValue< LVecBase4d >::value 0

2253 5 value 0 6 0 1780 1779 0 0 0 0 31 ParamValue< LVecBase4f >::value 0

2254 5 value 0 6 0 1784 1783 0 0 0 0 31 ParamValue< LVecBase4i >::value 0

2255 5 value 0 6 0 1788 1787 0 0 0 0 30 ParamValue< LMatrix3d >::value 0

2256 5 value 0 6 0 1792 1791 0 0 0 0 30 ParamValue< LMatrix3f >::value 0

2257 5 value 0 6 0 1796 1795 0 0 0 0 30 ParamValue< LMatrix4d >::value 0

2258 5 value 0 6 0 1800 1799 0 0 0 0 30 ParamValue< LMatrix4f >::value 0

1
2259 11 get_buttons 0 1646 1647 28 ModifierButtons::get_buttons 0

